// <auto-generated>
/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using devhl.CoinMarketCap.Client;
using devhl.CoinMarketCap.Model;

namespace devhl.CoinMarketCap.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptocurrencyApi : IApi
    {
        /// <summary>
        /// Airdrop
        /// </summary>
        /// <remarks>
        /// Returns information about a single airdrop available on CoinMarketCap. Includes the cryptocurrency metadata.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Airdrop Unique ID. This can be found using the Airdrops API.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;AirdropResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<AirdropResponseModel?>> GetV1CryptocurrencyAirdropWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Airdrop
        /// </summary>
        /// <remarks>
        /// Returns information about a single airdrop available on CoinMarketCap. Includes the cryptocurrency metadata.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Airdrop Unique ID. This can be found using the Airdrops API.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;AirdropResponseModel&gt;</returns>
        Task<AirdropResponseModel?> GetV1CryptocurrencyAirdropAsync(string id, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Airdrop
        /// </summary>
        /// <remarks>
        /// Returns information about a single airdrop available on CoinMarketCap. Includes the cryptocurrency metadata.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </remarks>
        /// <param name="id">Airdrop Unique ID. This can be found using the Airdrops API.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;AirdropResponseModel?&gt;</returns>
        Task<AirdropResponseModel?> GetV1CryptocurrencyAirdropOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Airdrops
        /// </summary>
        /// <remarks>
        /// Returns a list of past, present, or future airdrops which have run on CoinMarketCap.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="status">What status of airdrops. (optional, default to ONGOING)</param>
        /// <param name="id">Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1 (optional)</param>
        /// <param name="slug">Alternatively filter airdrops by a cryptocurrency slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter airdrops one cryptocurrency symbol. Example: \&quot;BTC\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;AirdropsResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<AirdropsResponseModel?>> GetV1CryptocurrencyAirdropsWithHttpInfoAsync(int? start = null, int? limit = null, string? status = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Airdrops
        /// </summary>
        /// <remarks>
        /// Returns a list of past, present, or future airdrops which have run on CoinMarketCap.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="status">What status of airdrops. (optional, default to ONGOING)</param>
        /// <param name="id">Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1 (optional)</param>
        /// <param name="slug">Alternatively filter airdrops by a cryptocurrency slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter airdrops one cryptocurrency symbol. Example: \&quot;BTC\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;AirdropsResponseModel&gt;</returns>
        Task<AirdropsResponseModel?> GetV1CryptocurrencyAirdropsAsync(int? start = null, int? limit = null, string? status = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Airdrops
        /// </summary>
        /// <remarks>
        /// Returns a list of past, present, or future airdrops which have run on CoinMarketCap.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="status">What status of airdrops. (optional, default to ONGOING)</param>
        /// <param name="id">Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1 (optional)</param>
        /// <param name="slug">Alternatively filter airdrops by a cryptocurrency slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter airdrops one cryptocurrency symbol. Example: \&quot;BTC\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;AirdropsResponseModel?&gt;</returns>
        Task<AirdropsResponseModel?> GetV1CryptocurrencyAirdropsOrDefaultAsync(int? start = null, int? limit = null, string? status = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Categories
        /// </summary>
        /// <remarks>
        /// Returns information about all coin categories available on CoinMarketCap. Includes a paginated list of cryptocurrency quotes and metadata from each category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="id">Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CategoriesResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CategoriesResponseModel?>> GetV1CryptocurrencyCategoriesWithHttpInfoAsync(int? start = null, int? limit = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Categories
        /// </summary>
        /// <remarks>
        /// Returns information about all coin categories available on CoinMarketCap. Includes a paginated list of cryptocurrency quotes and metadata from each category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="id">Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CategoriesResponseModel&gt;</returns>
        Task<CategoriesResponseModel?> GetV1CryptocurrencyCategoriesAsync(int? start = null, int? limit = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Categories
        /// </summary>
        /// <remarks>
        /// Returns information about all coin categories available on CoinMarketCap. Includes a paginated list of cryptocurrency quotes and metadata from each category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="id">Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CategoriesResponseModel?&gt;</returns>
        Task<CategoriesResponseModel?> GetV1CryptocurrencyCategoriesOrDefaultAsync(int? start = null, int? limit = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Category
        /// </summary>
        /// <remarks>
        /// Returns information about a single coin category available on CoinMarketCap. Includes a paginated list of the cryptocurrency quotes and metadata for the category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our Cryptocurrency Category page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Category ID. This can be found using the Categories API.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of coins to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of coins to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CategoryResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CategoryResponseModel?>> GetV1CryptocurrencyCategoryWithHttpInfoAsync(string id, int? start = null, int? limit = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Category
        /// </summary>
        /// <remarks>
        /// Returns information about a single coin category available on CoinMarketCap. Includes a paginated list of the cryptocurrency quotes and metadata for the category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our Cryptocurrency Category page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Category ID. This can be found using the Categories API.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of coins to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of coins to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CategoryResponseModel&gt;</returns>
        Task<CategoryResponseModel?> GetV1CryptocurrencyCategoryAsync(string id, int? start = null, int? limit = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Category
        /// </summary>
        /// <remarks>
        /// Returns information about a single coin category available on CoinMarketCap. Includes a paginated list of the cryptocurrency quotes and metadata for the category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our Cryptocurrency Category page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </remarks>
        /// <param name="id">The Category ID. This can be found using the Categories API.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of coins to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of coins to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CategoryResponseModel?&gt;</returns>
        Task<CategoryResponseModel?> GetV1CryptocurrencyCategoryOrDefaultAsync(string id, int? start = null, int? limit = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Metadata
        /// </summary>
        /// <remarks>
        /// Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency&#39;s technical documentation.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).   **CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="address">Alternatively pass in a contract address. Example: \&quot;0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\&quot; (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,tags,platform,date_added,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,tags,platform,date_added,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrenciesInfoResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrenciesInfoResponseModel?>> GetV1CryptocurrencyInfoWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? address = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Metadata
        /// </summary>
        /// <remarks>
        /// Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency&#39;s technical documentation.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).   **CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="address">Alternatively pass in a contract address. Example: \&quot;0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\&quot; (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,tags,platform,date_added,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,tags,platform,date_added,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrenciesInfoResponseModel&gt;</returns>
        Task<CryptocurrenciesInfoResponseModel?> GetV1CryptocurrencyInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? address = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Metadata
        /// </summary>
        /// <remarks>
        /// Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency&#39;s technical documentation.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).   **CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  
        /// </remarks>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="address">Alternatively pass in a contract address. Example: \&quot;0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\&quot; (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,tags,platform,date_added,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,tags,platform,date_added,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrenciesInfoResponseModel?&gt;</returns>
        Task<CryptocurrenciesInfoResponseModel?> GetV1CryptocurrencyInfoOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? address = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Listings Historical
        /// </summary>
        /// <remarks>
        /// Returns a ranked and sorted list of all cryptocurrencies for a historical UTC date.     **Technical Notes** - This endpoint is identical in format to our [/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) endpoint but is used to retrieve historical daily ranking snapshots from the end of each UTC day.   - Daily snapshots reflect market data at the end of each UTC day and may be requested as far back as 2013-04-28 (as supported by your plan&#39;s historical limits).   - The required \&quot;date\&quot; parameter can be passed as a Unix timestamp or ISO 8601 date but only the date portion of the timestamp will be referenced. It is recommended to send an ISO date format like \&quot;2019-10-10\&quot; without time. - This endpoint is for retrieving paginated and sorted lists of all currencies. If you require historical market data on specific cryptocurrencies you should use [/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical).       Cryptocurrencies are listed by cmc_rank by default. You may optionally sort against any of the following:   **cmc_rank**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **market_cap**: market cap (latest trade price x circulating supply).   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **volume_24h**: 24 hour trading volume for each currency.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.       **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (12 months)   - Enterprise (Up to 6 years)  **Cache / Update frequency:** The last completed UTC day is available 30 minutes after midnight on the next UTC day.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical daily crypto ranking snapshot pages like this one on [February 02, 2014](https://coinmarketcap.com/historical/20140202/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">date (Unix or ISO 8601) to reference day of snapshot.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to cmc_rank)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&#x60; to include all auxiliary fields. (optional, default to &quot;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyListingsLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyListingsLatestResponseModel?>> GetV1CryptocurrencyListingsHistoricalWithHttpInfoAsync(string date, int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings Historical
        /// </summary>
        /// <remarks>
        /// Returns a ranked and sorted list of all cryptocurrencies for a historical UTC date.     **Technical Notes** - This endpoint is identical in format to our [/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) endpoint but is used to retrieve historical daily ranking snapshots from the end of each UTC day.   - Daily snapshots reflect market data at the end of each UTC day and may be requested as far back as 2013-04-28 (as supported by your plan&#39;s historical limits).   - The required \&quot;date\&quot; parameter can be passed as a Unix timestamp or ISO 8601 date but only the date portion of the timestamp will be referenced. It is recommended to send an ISO date format like \&quot;2019-10-10\&quot; without time. - This endpoint is for retrieving paginated and sorted lists of all currencies. If you require historical market data on specific cryptocurrencies you should use [/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical).       Cryptocurrencies are listed by cmc_rank by default. You may optionally sort against any of the following:   **cmc_rank**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **market_cap**: market cap (latest trade price x circulating supply).   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **volume_24h**: 24 hour trading volume for each currency.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.       **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (12 months)   - Enterprise (Up to 6 years)  **Cache / Update frequency:** The last completed UTC day is available 30 minutes after midnight on the next UTC day.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical daily crypto ranking snapshot pages like this one on [February 02, 2014](https://coinmarketcap.com/historical/20140202/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">date (Unix or ISO 8601) to reference day of snapshot.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to cmc_rank)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&#x60; to include all auxiliary fields. (optional, default to &quot;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyListingsLatestResponseModel&gt;</returns>
        Task<CryptocurrencyListingsLatestResponseModel?> GetV1CryptocurrencyListingsHistoricalAsync(string date, int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings Historical
        /// </summary>
        /// <remarks>
        /// Returns a ranked and sorted list of all cryptocurrencies for a historical UTC date.     **Technical Notes** - This endpoint is identical in format to our [/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) endpoint but is used to retrieve historical daily ranking snapshots from the end of each UTC day.   - Daily snapshots reflect market data at the end of each UTC day and may be requested as far back as 2013-04-28 (as supported by your plan&#39;s historical limits).   - The required \&quot;date\&quot; parameter can be passed as a Unix timestamp or ISO 8601 date but only the date portion of the timestamp will be referenced. It is recommended to send an ISO date format like \&quot;2019-10-10\&quot; without time. - This endpoint is for retrieving paginated and sorted lists of all currencies. If you require historical market data on specific cryptocurrencies you should use [/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical).       Cryptocurrencies are listed by cmc_rank by default. You may optionally sort against any of the following:   **cmc_rank**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **market_cap**: market cap (latest trade price x circulating supply).   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **volume_24h**: 24 hour trading volume for each currency.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.       **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (12 months)   - Enterprise (Up to 6 years)  **Cache / Update frequency:** The last completed UTC day is available 30 minutes after midnight on the next UTC day.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical daily crypto ranking snapshot pages like this one on [February 02, 2014](https://coinmarketcap.com/historical/20140202/).
        /// </remarks>
        /// <param name="date">date (Unix or ISO 8601) to reference day of snapshot.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to cmc_rank)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&#x60; to include all auxiliary fields. (optional, default to &quot;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyListingsLatestResponseModel?&gt;</returns>
        Task<CryptocurrencyListingsLatestResponseModel?> GetV1CryptocurrencyListingsHistoricalOrDefaultAsync(string date, int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Listings Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all active cryptocurrencies with latest market data. The default \&quot;market_cap\&quot; sort returns cryptocurrency in order of CoinMarketCap&#39;s market cap rank (as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;) but you may configure this call to order by another market ranking field. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.   You may sort against any of the following:   **market_cap**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **market_cap_strict**: A strict market cap sort (latest trade price x circulating supply).   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **date_added**: Date cryptocurrency was added to the system.   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **market_cap_by_total_supply_strict**: market cap by total supply.   **volume_24h**: rolling 24 hour adjusted trading volume.   **volume_7d**: rolling 24 hour adjusted trading volume.   **volume_30d**: rolling 24 hour adjusted trading volume.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest cryptocurrency listing and ranking pages like [coinmarketcap.com/all/views/all/](https://coinmarketcap.com/all/views/all/), [coinmarketcap.com/tokens/](https://coinmarketcap.com/tokens/), [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/), [coinmarketcap.com/new/](https://coinmarketcap.com/new/).         ***NOTE:** Use this endpoint if you need a sorted and paginated list of all cryptocurrencies. If you want to query for market data on a few specific cryptocurrencies use [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="priceMin">Optionally specify a threshold of minimum USD price to filter results by. (optional)</param>
        /// <param name="priceMax">Optionally specify a threshold of maximum USD price to filter results by. (optional)</param>
        /// <param name="marketCapMin">Optionally specify a threshold of minimum market cap to filter results by. (optional)</param>
        /// <param name="marketCapMax">Optionally specify a threshold of maximum market cap to filter results by. (optional)</param>
        /// <param name="volume24hMin">Optionally specify a threshold of minimum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="volume24hMax">Optionally specify a threshold of maximum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMin">Optionally specify a threshold of minimum circulating supply to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMax">Optionally specify a threshold of maximum circulating supply to filter results by. (optional)</param>
        /// <param name="percentChange24hMin">Optionally specify a threshold of minimum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="percentChange24hMax">Optionally specify a threshold of maximum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to market_cap)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="tag">The tag of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calc&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyListingsLatestResponseModel1?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyListingsLatestResponseModel1?>> GetV1CryptocurrencyListingsLatestWithHttpInfoAsync(int? start = null, int? limit = null, decimal? priceMin = null, decimal? priceMax = null, decimal? marketCapMin = null, decimal? marketCapMax = null, decimal? volume24hMin = null, decimal? volume24hMax = null, decimal? circulatingSupplyMin = null, decimal? circulatingSupplyMax = null, decimal? percentChange24hMin = null, decimal? percentChange24hMax = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? tag = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all active cryptocurrencies with latest market data. The default \&quot;market_cap\&quot; sort returns cryptocurrency in order of CoinMarketCap&#39;s market cap rank (as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;) but you may configure this call to order by another market ranking field. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.   You may sort against any of the following:   **market_cap**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **market_cap_strict**: A strict market cap sort (latest trade price x circulating supply).   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **date_added**: Date cryptocurrency was added to the system.   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **market_cap_by_total_supply_strict**: market cap by total supply.   **volume_24h**: rolling 24 hour adjusted trading volume.   **volume_7d**: rolling 24 hour adjusted trading volume.   **volume_30d**: rolling 24 hour adjusted trading volume.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest cryptocurrency listing and ranking pages like [coinmarketcap.com/all/views/all/](https://coinmarketcap.com/all/views/all/), [coinmarketcap.com/tokens/](https://coinmarketcap.com/tokens/), [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/), [coinmarketcap.com/new/](https://coinmarketcap.com/new/).         ***NOTE:** Use this endpoint if you need a sorted and paginated list of all cryptocurrencies. If you want to query for market data on a few specific cryptocurrencies use [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="priceMin">Optionally specify a threshold of minimum USD price to filter results by. (optional)</param>
        /// <param name="priceMax">Optionally specify a threshold of maximum USD price to filter results by. (optional)</param>
        /// <param name="marketCapMin">Optionally specify a threshold of minimum market cap to filter results by. (optional)</param>
        /// <param name="marketCapMax">Optionally specify a threshold of maximum market cap to filter results by. (optional)</param>
        /// <param name="volume24hMin">Optionally specify a threshold of minimum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="volume24hMax">Optionally specify a threshold of maximum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMin">Optionally specify a threshold of minimum circulating supply to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMax">Optionally specify a threshold of maximum circulating supply to filter results by. (optional)</param>
        /// <param name="percentChange24hMin">Optionally specify a threshold of minimum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="percentChange24hMax">Optionally specify a threshold of maximum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to market_cap)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="tag">The tag of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calc&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyListingsLatestResponseModel1&gt;</returns>
        Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsLatestAsync(int? start = null, int? limit = null, decimal? priceMin = null, decimal? priceMax = null, decimal? marketCapMin = null, decimal? marketCapMax = null, decimal? volume24hMin = null, decimal? volume24hMax = null, decimal? circulatingSupplyMin = null, decimal? circulatingSupplyMax = null, decimal? percentChange24hMin = null, decimal? percentChange24hMax = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? tag = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all active cryptocurrencies with latest market data. The default \&quot;market_cap\&quot; sort returns cryptocurrency in order of CoinMarketCap&#39;s market cap rank (as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;) but you may configure this call to order by another market ranking field. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.   You may sort against any of the following:   **market_cap**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **market_cap_strict**: A strict market cap sort (latest trade price x circulating supply).   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **date_added**: Date cryptocurrency was added to the system.   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **market_cap_by_total_supply_strict**: market cap by total supply.   **volume_24h**: rolling 24 hour adjusted trading volume.   **volume_7d**: rolling 24 hour adjusted trading volume.   **volume_30d**: rolling 24 hour adjusted trading volume.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest cryptocurrency listing and ranking pages like [coinmarketcap.com/all/views/all/](https://coinmarketcap.com/all/views/all/), [coinmarketcap.com/tokens/](https://coinmarketcap.com/tokens/), [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/), [coinmarketcap.com/new/](https://coinmarketcap.com/new/).         ***NOTE:** Use this endpoint if you need a sorted and paginated list of all cryptocurrencies. If you want to query for market data on a few specific cryptocurrencies use [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* 
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="priceMin">Optionally specify a threshold of minimum USD price to filter results by. (optional)</param>
        /// <param name="priceMax">Optionally specify a threshold of maximum USD price to filter results by. (optional)</param>
        /// <param name="marketCapMin">Optionally specify a threshold of minimum market cap to filter results by. (optional)</param>
        /// <param name="marketCapMax">Optionally specify a threshold of maximum market cap to filter results by. (optional)</param>
        /// <param name="volume24hMin">Optionally specify a threshold of minimum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="volume24hMax">Optionally specify a threshold of maximum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMin">Optionally specify a threshold of minimum circulating supply to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMax">Optionally specify a threshold of maximum circulating supply to filter results by. (optional)</param>
        /// <param name="percentChange24hMin">Optionally specify a threshold of minimum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="percentChange24hMax">Optionally specify a threshold of maximum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to market_cap)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="tag">The tag of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calc&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyListingsLatestResponseModel1?&gt;</returns>
        Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsLatestOrDefaultAsync(int? start = null, int? limit = null, decimal? priceMin = null, decimal? priceMax = null, decimal? marketCapMin = null, decimal? marketCapMax = null, decimal? volume24hMin = null, decimal? volume24hMax = null, decimal? circulatingSupplyMin = null, decimal? circulatingSupplyMax = null, decimal? percentChange24hMin = null, decimal? percentChange24hMax = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? tag = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Listings New
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of most recently added cryptocurrencies.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our \&quot;new\&quot; cryptocurrency page [coinmarketcap.com/new/](https://coinmarketcap.com/new)    ***NOTE:** Use this endpoint if you need a sorted and paginated list of all recently added cryptocurrencies.* 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyListingsLatestResponseModel1?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyListingsLatestResponseModel1?>> GetV1CryptocurrencyListingsNewWithHttpInfoAsync(int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings New
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of most recently added cryptocurrencies.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our \&quot;new\&quot; cryptocurrency page [coinmarketcap.com/new/](https://coinmarketcap.com/new)    ***NOTE:** Use this endpoint if you need a sorted and paginated list of all recently added cryptocurrencies.* 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyListingsLatestResponseModel1&gt;</returns>
        Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsNewAsync(int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings New
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of most recently added cryptocurrencies.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our \&quot;new\&quot; cryptocurrency page [coinmarketcap.com/new/](https://coinmarketcap.com/new)    ***NOTE:** Use this endpoint if you need a sorted and paginated list of all recently added cryptocurrencies.* 
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyListingsLatestResponseModel1?&gt;</returns>
        Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsNewOrDefaultAsync(int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// CoinMarketCap ID Map
        /// </summary>
        /// <remarks>
        /// Returns a mapping of all cryptocurrencies to unique CoinMarketCap &#x60;id&#x60;s. Per our &lt;a href&#x3D;\&quot;#section/Best-Practices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Best Practices&lt;/a&gt; we recommend utilizing CMC ID instead of cryptocurrency symbols to securely identify cryptocurrencies with our other endpoints and in your own application logic.  Each cryptocurrency returned includes typical identifiers such as &#x60;name&#x60;, &#x60;symbol&#x60;, and &#x60;token_address&#x60; for flexible mapping to &#x60;id&#x60;.         By default this endpoint returns cryptocurrencies that have actively tracked markets on supported exchanges. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered cryptocurrency projects that are listed but do not yet meet methodology requirements to have tracked markets via &#x60;listing_status&#x3D;untracked&#x60;. Please review our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.         Cryptocurrencies returned include &#x60;first_historical_data&#x60; and &#x60;last_historical_data&#x60; timestamps to conveniently reference historical date ranges available to query with historical time-series data endpoints. You may also use the &#x60;aux&#x60; parameter to only include properties you require to slim down the payload if calling this endpoint frequently.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active cryptocurrencies are returned by default. Pass &#x60;inactive&#x60; to get a list of cryptocurrencies that are no longer active. Pass &#x60;untracked&#x60; to get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to id)</param>
        /// <param name="symbol">Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;platform,first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyMapResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyMapResponseModel?>> GetV1CryptocurrencyMapWithHttpInfoAsync(string? listingStatus = null, int? start = null, int? limit = null, string? sort = null, string? symbol = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// CoinMarketCap ID Map
        /// </summary>
        /// <remarks>
        /// Returns a mapping of all cryptocurrencies to unique CoinMarketCap &#x60;id&#x60;s. Per our &lt;a href&#x3D;\&quot;#section/Best-Practices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Best Practices&lt;/a&gt; we recommend utilizing CMC ID instead of cryptocurrency symbols to securely identify cryptocurrencies with our other endpoints and in your own application logic.  Each cryptocurrency returned includes typical identifiers such as &#x60;name&#x60;, &#x60;symbol&#x60;, and &#x60;token_address&#x60; for flexible mapping to &#x60;id&#x60;.         By default this endpoint returns cryptocurrencies that have actively tracked markets on supported exchanges. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered cryptocurrency projects that are listed but do not yet meet methodology requirements to have tracked markets via &#x60;listing_status&#x3D;untracked&#x60;. Please review our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.         Cryptocurrencies returned include &#x60;first_historical_data&#x60; and &#x60;last_historical_data&#x60; timestamps to conveniently reference historical date ranges available to query with historical time-series data endpoints. You may also use the &#x60;aux&#x60; parameter to only include properties you require to slim down the payload if calling this endpoint frequently.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active cryptocurrencies are returned by default. Pass &#x60;inactive&#x60; to get a list of cryptocurrencies that are no longer active. Pass &#x60;untracked&#x60; to get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to id)</param>
        /// <param name="symbol">Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;platform,first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyMapResponseModel&gt;</returns>
        Task<CryptocurrencyMapResponseModel?> GetV1CryptocurrencyMapAsync(string? listingStatus = null, int? start = null, int? limit = null, string? sort = null, string? symbol = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// CoinMarketCap ID Map
        /// </summary>
        /// <remarks>
        /// Returns a mapping of all cryptocurrencies to unique CoinMarketCap &#x60;id&#x60;s. Per our &lt;a href&#x3D;\&quot;#section/Best-Practices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Best Practices&lt;/a&gt; we recommend utilizing CMC ID instead of cryptocurrency symbols to securely identify cryptocurrencies with our other endpoints and in your own application logic.  Each cryptocurrency returned includes typical identifiers such as &#x60;name&#x60;, &#x60;symbol&#x60;, and &#x60;token_address&#x60; for flexible mapping to &#x60;id&#x60;.         By default this endpoint returns cryptocurrencies that have actively tracked markets on supported exchanges. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered cryptocurrency projects that are listed but do not yet meet methodology requirements to have tracked markets via &#x60;listing_status&#x3D;untracked&#x60;. Please review our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.         Cryptocurrencies returned include &#x60;first_historical_data&#x60; and &#x60;last_historical_data&#x60; timestamps to conveniently reference historical date ranges available to query with historical time-series data endpoints. You may also use the &#x60;aux&#x60; parameter to only include properties you require to slim down the payload if calling this endpoint frequently.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </remarks>
        /// <param name="listingStatus">Only active cryptocurrencies are returned by default. Pass &#x60;inactive&#x60; to get a list of cryptocurrencies that are no longer active. Pass &#x60;untracked&#x60; to get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to id)</param>
        /// <param name="symbol">Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;platform,first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyMapResponseModel?&gt;</returns>
        Task<CryptocurrencyMapResponseModel?> GetV1CryptocurrencyMapOrDefaultAsync(string? listingStatus = null, int? start = null, int? limit = null, string? sort = null, string? symbol = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Market Pairs Latest
        /// </summary>
        /// <remarks>
        /// Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a cryptocurrency by slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \&quot;BTC\&quot;. A single cryptocurrency \&quot;id\&quot;, \&quot;slug\&quot;, *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sortDir">Optionally specify the sort direction of markets returned. (optional, default to desc)</param>
        /// <param name="sort">Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass &#x60;cmc_rank&#x60; to return a CMC methodology based sort where markets with excluded volumes are returned last. (optional, default to volume_24h_strict)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?id&#x3D;1&amp;matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?symbol&#x3D;BTC&amp;matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyMarketPairsLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyMarketPairsLatestResponseModel?>> GetV1CryptocurrencyMarketpairsLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, int? start = null, int? limit = null, string? sortDir = null, string? sort = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Market Pairs Latest
        /// </summary>
        /// <remarks>
        /// Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a cryptocurrency by slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \&quot;BTC\&quot;. A single cryptocurrency \&quot;id\&quot;, \&quot;slug\&quot;, *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sortDir">Optionally specify the sort direction of markets returned. (optional, default to desc)</param>
        /// <param name="sort">Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass &#x60;cmc_rank&#x60; to return a CMC methodology based sort where markets with excluded volumes are returned last. (optional, default to volume_24h_strict)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?id&#x3D;1&amp;matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?symbol&#x3D;BTC&amp;matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyMarketPairsLatestResponseModel&gt;</returns>
        Task<CryptocurrencyMarketPairsLatestResponseModel?> GetV1CryptocurrencyMarketpairsLatestAsync(string? id = null, string? slug = null, string? symbol = null, int? start = null, int? limit = null, string? sortDir = null, string? sort = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Market Pairs Latest
        /// </summary>
        /// <remarks>
        /// Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  
        /// </remarks>
        /// <param name="id">A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a cryptocurrency by slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \&quot;BTC\&quot;. A single cryptocurrency \&quot;id\&quot;, \&quot;slug\&quot;, *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sortDir">Optionally specify the sort direction of markets returned. (optional, default to desc)</param>
        /// <param name="sort">Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass &#x60;cmc_rank&#x60; to return a CMC methodology based sort where markets with excluded volumes are returned last. (optional, default to volume_24h_strict)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?id&#x3D;1&amp;matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?symbol&#x3D;BTC&amp;matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyMarketPairsLatestResponseModel?&gt;</returns>
        Task<CryptocurrencyMarketPairsLatestResponseModel?> GetV1CryptocurrencyMarketpairsLatestOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, int? start = null, int? limit = null, string? sortDir = null, string? sort = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// OHLCV Historical
        /// </summary>
        /// <remarks>
        /// Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is only supported with daily periods at this time.       **Technical Notes** - Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time for this \&quot;time_period\&quot;.  - One OHLCV quote will be returned for every \&quot;time_period\&quot; between your \&quot;time_start\&quot; (exclusive) and \&quot;time_end\&quot; (inclusive).   - If a \&quot;time_start\&quot; is not supplied, the \&quot;time_period\&quot; will be calculated in reverse from \&quot;time_end\&quot; using the \&quot;count\&quot; parameter which defaults to 10 results.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.    - If you don&#39;t need every \&quot;time_period\&quot; between your dates you may adjust the frequency that \&quot;time_period\&quot; is sampled using the \&quot;interval\&quot; parameter. For example with \&quot;time_period\&quot; set to \&quot;daily\&quot; you may set \&quot;interval\&quot; to \&quot;2d\&quot; to get the daily OHLCV for every other day. You could set \&quot;interval\&quot; to \&quot;monthly\&quot; to get the first daily OHLCV for each month, or set it to \&quot;yearly\&quot; to get the daily OHLCV value against the same date every year.    **Implementation Tips** - If querying for a specific OHLCV date your \&quot;time_start\&quot; should specify a timestamp of 1 interval prior as \&quot;time_start\&quot; is an exclusive time parameter (as opposed to \&quot;time_end\&quot; which is inclusive to the search). This means that when you pass a \&quot;time_start\&quot; results will be returned for the *next* complete \&quot;time_period\&quot;. For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \&quot;time_start\&quot; should be \&quot;2018-11-29\&quot;.    - If only specifying a \&quot;count\&quot; parameter to return latest OHLCV periods, your \&quot;count\&quot; should be 1 number higher than the number of results you expect to receive. \&quot;Count\&quot; defines the number of \&quot;time_period\&quot; intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \&quot;count&#x3D;2\&quot; to skip the incomplete active time period. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**      There are 2 types of time interval formats that may be used for \&quot;time_period\&quot; and \&quot;interval\&quot; parameters. For \&quot;time_period\&quot; these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \&quot;interval\&quot; to adjust how frequently \&quot;time_period\&quot; is sampled.      The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Hour intervals in UTC.   **\&quot;daily\&quot;** - Calendar day intervals for each UTC day.   **\&quot;weekly\&quot;** - Calendar week intervals for each calendar week.   **\&quot;monthly\&quot;** - Calendar month intervals for each calendar month.     **\&quot;yearly\&quot;** - Calendar year intervals for each calendar year.      The second are relative time intervals.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Time periods that repeat every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.      Please note that \&quot;time_period\&quot; currently supports the \&quot;daily\&quot; and \&quot;hourly\&quot; options. \&quot;interval\&quot; supports all interval options.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~ - ~~Hobbyist~~ - Startup (1 month) - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.   **Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,1027\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Time period to return OHLCV data for. The default is \&quot;daily\&quot;. See the main endpoint description for details. (optional, default to daily)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we&#39;ll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="count">Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items. (optional, default to 10.0M)</param>
        /// <param name="interval">Optionally adjust the interval that \&quot;time_period\&quot; is sampled. See main endpoint description for available options. (optional, default to daily)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyOHLCVHistoricalResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyOHLCVHistoricalResponseModel?>> GetV1CryptocurrencyOhlcvHistoricalWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// OHLCV Historical
        /// </summary>
        /// <remarks>
        /// Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is only supported with daily periods at this time.       **Technical Notes** - Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time for this \&quot;time_period\&quot;.  - One OHLCV quote will be returned for every \&quot;time_period\&quot; between your \&quot;time_start\&quot; (exclusive) and \&quot;time_end\&quot; (inclusive).   - If a \&quot;time_start\&quot; is not supplied, the \&quot;time_period\&quot; will be calculated in reverse from \&quot;time_end\&quot; using the \&quot;count\&quot; parameter which defaults to 10 results.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.    - If you don&#39;t need every \&quot;time_period\&quot; between your dates you may adjust the frequency that \&quot;time_period\&quot; is sampled using the \&quot;interval\&quot; parameter. For example with \&quot;time_period\&quot; set to \&quot;daily\&quot; you may set \&quot;interval\&quot; to \&quot;2d\&quot; to get the daily OHLCV for every other day. You could set \&quot;interval\&quot; to \&quot;monthly\&quot; to get the first daily OHLCV for each month, or set it to \&quot;yearly\&quot; to get the daily OHLCV value against the same date every year.    **Implementation Tips** - If querying for a specific OHLCV date your \&quot;time_start\&quot; should specify a timestamp of 1 interval prior as \&quot;time_start\&quot; is an exclusive time parameter (as opposed to \&quot;time_end\&quot; which is inclusive to the search). This means that when you pass a \&quot;time_start\&quot; results will be returned for the *next* complete \&quot;time_period\&quot;. For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \&quot;time_start\&quot; should be \&quot;2018-11-29\&quot;.    - If only specifying a \&quot;count\&quot; parameter to return latest OHLCV periods, your \&quot;count\&quot; should be 1 number higher than the number of results you expect to receive. \&quot;Count\&quot; defines the number of \&quot;time_period\&quot; intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \&quot;count&#x3D;2\&quot; to skip the incomplete active time period. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**      There are 2 types of time interval formats that may be used for \&quot;time_period\&quot; and \&quot;interval\&quot; parameters. For \&quot;time_period\&quot; these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \&quot;interval\&quot; to adjust how frequently \&quot;time_period\&quot; is sampled.      The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Hour intervals in UTC.   **\&quot;daily\&quot;** - Calendar day intervals for each UTC day.   **\&quot;weekly\&quot;** - Calendar week intervals for each calendar week.   **\&quot;monthly\&quot;** - Calendar month intervals for each calendar month.     **\&quot;yearly\&quot;** - Calendar year intervals for each calendar year.      The second are relative time intervals.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Time periods that repeat every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.      Please note that \&quot;time_period\&quot; currently supports the \&quot;daily\&quot; and \&quot;hourly\&quot; options. \&quot;interval\&quot; supports all interval options.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~ - ~~Hobbyist~~ - Startup (1 month) - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.   **Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,1027\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Time period to return OHLCV data for. The default is \&quot;daily\&quot;. See the main endpoint description for details. (optional, default to daily)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we&#39;ll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="count">Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items. (optional, default to 10.0M)</param>
        /// <param name="interval">Optionally adjust the interval that \&quot;time_period\&quot; is sampled. See main endpoint description for available options. (optional, default to daily)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyOHLCVHistoricalResponseModel&gt;</returns>
        Task<CryptocurrencyOHLCVHistoricalResponseModel?> GetV1CryptocurrencyOhlcvHistoricalAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// OHLCV Historical
        /// </summary>
        /// <remarks>
        /// Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is only supported with daily periods at this time.       **Technical Notes** - Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time for this \&quot;time_period\&quot;.  - One OHLCV quote will be returned for every \&quot;time_period\&quot; between your \&quot;time_start\&quot; (exclusive) and \&quot;time_end\&quot; (inclusive).   - If a \&quot;time_start\&quot; is not supplied, the \&quot;time_period\&quot; will be calculated in reverse from \&quot;time_end\&quot; using the \&quot;count\&quot; parameter which defaults to 10 results.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.    - If you don&#39;t need every \&quot;time_period\&quot; between your dates you may adjust the frequency that \&quot;time_period\&quot; is sampled using the \&quot;interval\&quot; parameter. For example with \&quot;time_period\&quot; set to \&quot;daily\&quot; you may set \&quot;interval\&quot; to \&quot;2d\&quot; to get the daily OHLCV for every other day. You could set \&quot;interval\&quot; to \&quot;monthly\&quot; to get the first daily OHLCV for each month, or set it to \&quot;yearly\&quot; to get the daily OHLCV value against the same date every year.    **Implementation Tips** - If querying for a specific OHLCV date your \&quot;time_start\&quot; should specify a timestamp of 1 interval prior as \&quot;time_start\&quot; is an exclusive time parameter (as opposed to \&quot;time_end\&quot; which is inclusive to the search). This means that when you pass a \&quot;time_start\&quot; results will be returned for the *next* complete \&quot;time_period\&quot;. For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \&quot;time_start\&quot; should be \&quot;2018-11-29\&quot;.    - If only specifying a \&quot;count\&quot; parameter to return latest OHLCV periods, your \&quot;count\&quot; should be 1 number higher than the number of results you expect to receive. \&quot;Count\&quot; defines the number of \&quot;time_period\&quot; intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \&quot;count&#x3D;2\&quot; to skip the incomplete active time period. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**      There are 2 types of time interval formats that may be used for \&quot;time_period\&quot; and \&quot;interval\&quot; parameters. For \&quot;time_period\&quot; these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \&quot;interval\&quot; to adjust how frequently \&quot;time_period\&quot; is sampled.      The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Hour intervals in UTC.   **\&quot;daily\&quot;** - Calendar day intervals for each UTC day.   **\&quot;weekly\&quot;** - Calendar week intervals for each calendar week.   **\&quot;monthly\&quot;** - Calendar month intervals for each calendar month.     **\&quot;yearly\&quot;** - Calendar year intervals for each calendar year.      The second are relative time intervals.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Time periods that repeat every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.      Please note that \&quot;time_period\&quot; currently supports the \&quot;daily\&quot; and \&quot;hourly\&quot; options. \&quot;interval\&quot; supports all interval options.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~ - ~~Hobbyist~~ - Startup (1 month) - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.   **Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).
        /// </remarks>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,1027\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Time period to return OHLCV data for. The default is \&quot;daily\&quot;. See the main endpoint description for details. (optional, default to daily)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we&#39;ll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="count">Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items. (optional, default to 10.0M)</param>
        /// <param name="interval">Optionally adjust the interval that \&quot;time_period\&quot; is sampled. See main endpoint description for available options. (optional, default to daily)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyOHLCVHistoricalResponseModel?&gt;</returns>
        Task<CryptocurrencyOHLCVHistoricalResponseModel?> GetV1CryptocurrencyOhlcvHistoricalOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// OHLCV Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise    **Cache / Update frequency:** Every 5 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.     **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.     **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyOHLCVLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyOHLCVLatestResponseModel?>> GetV1CryptocurrencyOhlcvLatestWithHttpInfoAsync(string? id = null, string? symbol = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// OHLCV Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise    **Cache / Update frequency:** Every 5 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.     **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.     **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyOHLCVLatestResponseModel&gt;</returns>
        Task<CryptocurrencyOHLCVLatestResponseModel?> GetV1CryptocurrencyOhlcvLatestAsync(string? id = null, string? symbol = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// OHLCV Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise    **Cache / Update frequency:** Every 5 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.     **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.     **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </remarks>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyOHLCVLatestResponseModel?&gt;</returns>
        Task<CryptocurrencyOHLCVLatestResponseModel?> GetV1CryptocurrencyOhlcvLatestOrDefaultAsync(string? id = null, string? symbol = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Price Performance Stats
        /// </summary>
        /// <remarks>
        /// Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an &#x60;all_time&#x60; period by default. UTC &#x60;yesterday&#x60; and a number of *rolling time periods* may be requested using the &#x60;time_period&#x60; parameter. Utilize the &#x60;convert&#x60; parameter to translate values into multiple fiats or cryptocurrencies using historical rates.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).         ***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Specify one or more comma-delimited time periods to return stats for. &#x60;all_time&#x60; is the default. Pass &#x60;all_time,yesterday,24h,7d,30d,90d,365d&#x60; to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example &#x60;24h&#x60; would have a close time of now and an open time of 24 hours before now. *Please note: &#x60;yesterday&#x60; is a UTC period and currently does not currently support &#x60;high&#x60; and &#x60;low&#x60; timestamps.* (optional, default to &quot;all_time&quot;)</param>
        /// <param name="convert">Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyPricePerformanceStatsLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyPricePerformanceStatsLatestResponseModel?>> GetV1CryptocurrencyPriceperformancestatsLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Price Performance Stats
        /// </summary>
        /// <remarks>
        /// Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an &#x60;all_time&#x60; period by default. UTC &#x60;yesterday&#x60; and a number of *rolling time periods* may be requested using the &#x60;time_period&#x60; parameter. Utilize the &#x60;convert&#x60; parameter to translate values into multiple fiats or cryptocurrencies using historical rates.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).         ***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Specify one or more comma-delimited time periods to return stats for. &#x60;all_time&#x60; is the default. Pass &#x60;all_time,yesterday,24h,7d,30d,90d,365d&#x60; to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example &#x60;24h&#x60; would have a close time of now and an open time of 24 hours before now. *Please note: &#x60;yesterday&#x60; is a UTC period and currently does not currently support &#x60;high&#x60; and &#x60;low&#x60; timestamps.* (optional, default to &quot;all_time&quot;)</param>
        /// <param name="convert">Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyPricePerformanceStatsLatestResponseModel&gt;</returns>
        Task<CryptocurrencyPricePerformanceStatsLatestResponseModel?> GetV1CryptocurrencyPriceperformancestatsLatestAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Price Performance Stats
        /// </summary>
        /// <remarks>
        /// Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an &#x60;all_time&#x60; period by default. UTC &#x60;yesterday&#x60; and a number of *rolling time periods* may be requested using the &#x60;time_period&#x60; parameter. Utilize the &#x60;convert&#x60; parameter to translate values into multiple fiats or cryptocurrencies using historical rates.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).         ***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* 
        /// </remarks>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Specify one or more comma-delimited time periods to return stats for. &#x60;all_time&#x60; is the default. Pass &#x60;all_time,yesterday,24h,7d,30d,90d,365d&#x60; to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example &#x60;24h&#x60; would have a close time of now and an open time of 24 hours before now. *Please note: &#x60;yesterday&#x60; is a UTC period and currently does not currently support &#x60;high&#x60; and &#x60;low&#x60; timestamps.* (optional, default to &quot;all_time&quot;)</param>
        /// <param name="convert">Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyPricePerformanceStatsLatestResponseModel?&gt;</returns>
        Task<CryptocurrencyPricePerformanceStatsLatestResponseModel?> GetV1CryptocurrencyPriceperformancestatsLatestOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.  **Technical Notes**   - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.    **Implementation Tips** - Want to get the last quote of each UTC day? Don&#39;t use \&quot;interval&#x3D;daily\&quot; as that returns the first quote. Instead use \&quot;interval&#x3D;24h\&quot; to repeat a specific timestamp search every 24 hours and pass ex. \&quot;time_start&#x3D;2019-01-04T23:59:00.000Z\&quot; to query for the last record of each UTC day. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.  The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 month) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.     **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;price,volume,market_cap,quote_timestamp,is_active,is_fiat,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;price,volume,market_cap,quote_timestamp,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyQuotesHistoricalResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyQuotesHistoricalResponseModel?>> GetV1CryptocurrencyQuotesHistoricalWithHttpInfoAsync(string? id = null, string? symbol = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.  **Technical Notes**   - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.    **Implementation Tips** - Want to get the last quote of each UTC day? Don&#39;t use \&quot;interval&#x3D;daily\&quot; as that returns the first quote. Instead use \&quot;interval&#x3D;24h\&quot; to repeat a specific timestamp search every 24 hours and pass ex. \&quot;time_start&#x3D;2019-01-04T23:59:00.000Z\&quot; to query for the last record of each UTC day. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.  The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 month) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.     **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;price,volume,market_cap,quote_timestamp,is_active,is_fiat,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;price,volume,market_cap,quote_timestamp,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyQuotesHistoricalResponseModel&gt;</returns>
        Task<CryptocurrencyQuotesHistoricalResponseModel?> GetV1CryptocurrencyQuotesHistoricalAsync(string? id = null, string? symbol = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.  **Technical Notes**   - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.    **Implementation Tips** - Want to get the last quote of each UTC day? Don&#39;t use \&quot;interval&#x3D;daily\&quot; as that returns the first quote. Instead use \&quot;interval&#x3D;24h\&quot; to repeat a specific timestamp search every 24 hours and pass ex. \&quot;time_start&#x3D;2019-01-04T23:59:00.000Z\&quot; to query for the last record of each UTC day. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.  The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 month) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.     **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  
        /// </remarks>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;price,volume,market_cap,quote_timestamp,is_active,is_fiat,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;price,volume,market_cap,quote_timestamp,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyQuotesHistoricalResponseModel?&gt;</returns>
        Task<CryptocurrencyQuotesHistoricalResponseModel?> GetV1CryptocurrencyQuotesHistoricalOrDefaultAsync(string? id = null, string? symbol = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest market quote for 1 or more cryptocurrencies. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).       ***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyQuotesLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyQuotesLatestResponseModel?>> GetV1CryptocurrencyQuotesLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest market quote for 1 or more cryptocurrencies. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).       ***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyQuotesLatestResponseModel&gt;</returns>
        Task<CryptocurrencyQuotesLatestResponseModel?> GetV1CryptocurrencyQuotesLatestAsync(string? id = null, string? slug = null, string? symbol = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest market quote for 1 or more cryptocurrencies. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).       ***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*
        /// </remarks>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyQuotesLatestResponseModel?&gt;</returns>
        Task<CryptocurrencyQuotesLatestResponseModel?> GetV1CryptocurrencyQuotesLatestOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Trending Gainers &amp; Losers
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrencies, determined and sorted by the largest price gains or losses.   You may sort against any of the following:   **percent_change_24h**: 24 hour trading price percentage change for each currency.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Gainers &amp; Losers page [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the biggest gainers and losers. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to percent_change_24h)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyTrendingGainersLosersResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyTrendingGainersLosersResponseModel?>> GetV1CryptocurrencyTrendingGainerslosersWithHttpInfoAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Trending Gainers &amp; Losers
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrencies, determined and sorted by the largest price gains or losses.   You may sort against any of the following:   **percent_change_24h**: 24 hour trading price percentage change for each currency.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Gainers &amp; Losers page [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the biggest gainers and losers. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to percent_change_24h)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyTrendingGainersLosersResponseModel&gt;</returns>
        Task<CryptocurrencyTrendingGainersLosersResponseModel?> GetV1CryptocurrencyTrendingGainerslosersAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Trending Gainers &amp; Losers
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrencies, determined and sorted by the largest price gains or losses.   You may sort against any of the following:   **percent_change_24h**: 24 hour trading price percentage change for each currency.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Gainers &amp; Losers page [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/).
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the biggest gainers and losers. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to percent_change_24h)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyTrendingGainersLosersResponseModel?&gt;</returns>
        Task<CryptocurrencyTrendingGainersLosersResponseModel?> GetV1CryptocurrencyTrendingGainerslosersOrDefaultAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Trending Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Trending page [coinmarketcap.com/trending-cryptocurrencies/](https://coinmarketcap.com/trending-cryptocurrencies/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the latest trending coins. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyTrendingLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyTrendingLatestResponseModel?>> GetV1CryptocurrencyTrendingLatestWithHttpInfoAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Trending Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Trending page [coinmarketcap.com/trending-cryptocurrencies/](https://coinmarketcap.com/trending-cryptocurrencies/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the latest trending coins. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyTrendingLatestResponseModel&gt;</returns>
        Task<CryptocurrencyTrendingLatestResponseModel?> GetV1CryptocurrencyTrendingLatestAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Trending Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Trending page [coinmarketcap.com/trending-cryptocurrencies/](https://coinmarketcap.com/trending-cryptocurrencies/).
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the latest trending coins. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyTrendingLatestResponseModel?&gt;</returns>
        Task<CryptocurrencyTrendingLatestResponseModel?> GetV1CryptocurrencyTrendingLatestOrDefaultAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Trending Most Visited
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The CoinMarketCap “Most Visited” trending list. [coinmarketcap.com/most-viewed-pages/](https://coinmarketcap.com/most-viewed-pages/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for most visited currencies. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CryptocurrencyTrendingMostVisitedResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<CryptocurrencyTrendingMostVisitedResponseModel?>> GetV1CryptocurrencyTrendingMostvisitedWithHttpInfoAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Trending Most Visited
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The CoinMarketCap “Most Visited” trending list. [coinmarketcap.com/most-viewed-pages/](https://coinmarketcap.com/most-viewed-pages/).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for most visited currencies. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyTrendingMostVisitedResponseModel&gt;</returns>
        Task<CryptocurrencyTrendingMostVisitedResponseModel?> GetV1CryptocurrencyTrendingMostvisitedAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Trending Most Visited
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The CoinMarketCap “Most Visited” trending list. [coinmarketcap.com/most-viewed-pages/](https://coinmarketcap.com/most-viewed-pages/).
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for most visited currencies. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CryptocurrencyTrendingMostVisitedResponseModel?&gt;</returns>
        Task<CryptocurrencyTrendingMostVisitedResponseModel?> GetV1CryptocurrencyTrendingMostvisitedOrDefaultAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CryptocurrencyApi : ICryptocurrencyApi
    {
        /// <summary>
        /// An event to track the health of the server. 
        /// If you store these event args, be sure to purge old event args to prevent a memory leak.
        /// </summary>
        public event ClientUtils.EventHandler<ApiResponseEventArgs>? ApiResponded;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CryptocurrencyApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrencyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CryptocurrencyApi(ILogger<CryptocurrencyApi> logger, HttpClient httpClient, 
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            Logger = logger;
            HttpClient = httpClient;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Airdrop Returns information about a single airdrop available on CoinMarketCap. Includes the cryptocurrency metadata.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Airdrop Unique ID. This can be found using the Airdrops API.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="AirdropResponseModel"/>&gt;</returns>
        public async Task<AirdropResponseModel?> GetV1CryptocurrencyAirdropAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<AirdropResponseModel?> result = await GetV1CryptocurrencyAirdropWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Airdrop Returns information about a single airdrop available on CoinMarketCap. Includes the cryptocurrency metadata.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Airdrop Unique ID. This can be found using the Airdrops API.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="AirdropResponseModel"/>&gt;</returns>
        public async Task<AirdropResponseModel?> GetV1CryptocurrencyAirdropOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<AirdropResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyAirdropWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Airdrop Returns information about a single airdrop available on CoinMarketCap. Includes the cryptocurrency metadata.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Airdrop Unique ID. This can be found using the Airdrops API.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="AirdropResponseModel"/></returns>
        public async Task<ApiResponse<AirdropResponseModel?>> GetV1CryptocurrencyAirdropWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (id == null)
                    throw new ArgumentNullException(nameof(id));
                    
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/airdrop";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);

                parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);
                
                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/airdrop"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<AirdropResponseModel?> apiResponse = new ApiResponse<AirdropResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<AirdropResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Airdrops Returns a list of past, present, or future airdrops which have run on CoinMarketCap.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="status">What status of airdrops. (optional, default to ONGOING)</param>
        /// <param name="id">Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1 (optional)</param>
        /// <param name="slug">Alternatively filter airdrops by a cryptocurrency slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter airdrops one cryptocurrency symbol. Example: \&quot;BTC\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="AirdropsResponseModel"/>&gt;</returns>
        public async Task<AirdropsResponseModel?> GetV1CryptocurrencyAirdropsAsync(int? start = null, int? limit = null, string? status = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<AirdropsResponseModel?> result = await GetV1CryptocurrencyAirdropsWithHttpInfoAsync(start, limit, status, id, slug, symbol, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Airdrops Returns a list of past, present, or future airdrops which have run on CoinMarketCap.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="status">What status of airdrops. (optional, default to ONGOING)</param>
        /// <param name="id">Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1 (optional)</param>
        /// <param name="slug">Alternatively filter airdrops by a cryptocurrency slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter airdrops one cryptocurrency symbol. Example: \&quot;BTC\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="AirdropsResponseModel"/>&gt;</returns>
        public async Task<AirdropsResponseModel?> GetV1CryptocurrencyAirdropsOrDefaultAsync(int? start = null, int? limit = null, string? status = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<AirdropsResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyAirdropsWithHttpInfoAsync(start, limit, status, id, slug, symbol, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Airdrops Returns a list of past, present, or future airdrops which have run on CoinMarketCap.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="status">What status of airdrops. (optional, default to ONGOING)</param>
        /// <param name="id">Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1 (optional)</param>
        /// <param name="slug">Alternatively filter airdrops by a cryptocurrency slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter airdrops one cryptocurrency symbol. Example: \&quot;BTC\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="AirdropsResponseModel"/></returns>
        public async Task<ApiResponse<AirdropsResponseModel?>> GetV1CryptocurrencyAirdropsWithHttpInfoAsync(int? start = null, int? limit = null, string? status = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/airdrops";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (status != null)
                    parseQueryString["status"] = Uri.EscapeDataString(status.ToString()!);

                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/airdrops"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<AirdropsResponseModel?> apiResponse = new ApiResponse<AirdropsResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<AirdropsResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Categories Returns information about all coin categories available on CoinMarketCap. Includes a paginated list of cryptocurrency quotes and metadata from each category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="id">Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CategoriesResponseModel"/>&gt;</returns>
        public async Task<CategoriesResponseModel?> GetV1CryptocurrencyCategoriesAsync(int? start = null, int? limit = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CategoriesResponseModel?> result = await GetV1CryptocurrencyCategoriesWithHttpInfoAsync(start, limit, id, slug, symbol, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Categories Returns information about all coin categories available on CoinMarketCap. Includes a paginated list of cryptocurrency quotes and metadata from each category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="id">Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CategoriesResponseModel"/>&gt;</returns>
        public async Task<CategoriesResponseModel?> GetV1CryptocurrencyCategoriesOrDefaultAsync(int? start = null, int? limit = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CategoriesResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyCategoriesWithHttpInfoAsync(start, limit, id, slug, symbol, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Categories Returns information about all coin categories available on CoinMarketCap. Includes a paginated list of cryptocurrency quotes and metadata from each category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="id">Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CategoriesResponseModel"/></returns>
        public async Task<ApiResponse<CategoriesResponseModel?>> GetV1CryptocurrencyCategoriesWithHttpInfoAsync(int? start = null, int? limit = null, string? id = null, string? slug = null, string? symbol = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/categories";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/categories"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CategoriesResponseModel?> apiResponse = new ApiResponse<CategoriesResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CategoriesResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Category Returns information about a single coin category available on CoinMarketCap. Includes a paginated list of the cryptocurrency quotes and metadata for the category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our Cryptocurrency Category page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Category ID. This can be found using the Categories API.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of coins to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of coins to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CategoryResponseModel"/>&gt;</returns>
        public async Task<CategoryResponseModel?> GetV1CryptocurrencyCategoryAsync(string id, int? start = null, int? limit = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CategoryResponseModel?> result = await GetV1CryptocurrencyCategoryWithHttpInfoAsync(id, start, limit, convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Category Returns information about a single coin category available on CoinMarketCap. Includes a paginated list of the cryptocurrency quotes and metadata for the category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our Cryptocurrency Category page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Category ID. This can be found using the Categories API.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of coins to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of coins to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CategoryResponseModel"/>&gt;</returns>
        public async Task<CategoryResponseModel?> GetV1CryptocurrencyCategoryOrDefaultAsync(string id, int? start = null, int? limit = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CategoryResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyCategoryWithHttpInfoAsync(id, start, limit, convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Category Returns information about a single coin category available on CoinMarketCap. Includes a paginated list of the cryptocurrency quotes and metadata for the category.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Free   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our Cryptocurrency Category page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Category ID. This can be found using the Categories API.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of coins to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of coins to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CategoryResponseModel"/></returns>
        public async Task<ApiResponse<CategoryResponseModel?>> GetV1CryptocurrencyCategoryWithHttpInfoAsync(string id, int? start = null, int? limit = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (id == null)
                    throw new ArgumentNullException(nameof(id));
                    
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/category";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);

                parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);
                
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/category"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CategoryResponseModel?> apiResponse = new ApiResponse<CategoryResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Metadata Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency&#39;s technical documentation.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).   **CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="address">Alternatively pass in a contract address. Example: \&quot;0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\&quot; (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,tags,platform,date_added,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,tags,platform,date_added,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrenciesInfoResponseModel"/>&gt;</returns>
        public async Task<CryptocurrenciesInfoResponseModel?> GetV1CryptocurrencyInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? address = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrenciesInfoResponseModel?> result = await GetV1CryptocurrencyInfoWithHttpInfoAsync(id, slug, symbol, address, aux, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Metadata Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency&#39;s technical documentation.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).   **CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="address">Alternatively pass in a contract address. Example: \&quot;0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\&quot; (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,tags,platform,date_added,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,tags,platform,date_added,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrenciesInfoResponseModel"/>&gt;</returns>
        public async Task<CryptocurrenciesInfoResponseModel?> GetV1CryptocurrencyInfoOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? address = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrenciesInfoResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyInfoWithHttpInfoAsync(id, slug, symbol, address, aux, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Metadata Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency&#39;s technical documentation.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).   **CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="address">Alternatively pass in a contract address. Example: \&quot;0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\&quot; (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,tags,platform,date_added,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,tags,platform,date_added,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrenciesInfoResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrenciesInfoResponseModel?>> GetV1CryptocurrencyInfoWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? address = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/info";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (address != null)
                    parseQueryString["address"] = Uri.EscapeDataString(address.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/info"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrenciesInfoResponseModel?> apiResponse = new ApiResponse<CryptocurrenciesInfoResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrenciesInfoResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Listings Historical Returns a ranked and sorted list of all cryptocurrencies for a historical UTC date.     **Technical Notes** - This endpoint is identical in format to our [/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) endpoint but is used to retrieve historical daily ranking snapshots from the end of each UTC day.   - Daily snapshots reflect market data at the end of each UTC day and may be requested as far back as 2013-04-28 (as supported by your plan&#39;s historical limits).   - The required \&quot;date\&quot; parameter can be passed as a Unix timestamp or ISO 8601 date but only the date portion of the timestamp will be referenced. It is recommended to send an ISO date format like \&quot;2019-10-10\&quot; without time. - This endpoint is for retrieving paginated and sorted lists of all currencies. If you require historical market data on specific cryptocurrencies you should use [/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical).       Cryptocurrencies are listed by cmc_rank by default. You may optionally sort against any of the following:   **cmc_rank**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **market_cap**: market cap (latest trade price x circulating supply).   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **volume_24h**: 24 hour trading volume for each currency.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.       **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (12 months)   - Enterprise (Up to 6 years)  **Cache / Update frequency:** The last completed UTC day is available 30 minutes after midnight on the next UTC day.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical daily crypto ranking snapshot pages like this one on [February 02, 2014](https://coinmarketcap.com/historical/20140202/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">date (Unix or ISO 8601) to reference day of snapshot.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to cmc_rank)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&#x60; to include all auxiliary fields. (optional, default to &quot;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyListingsLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyListingsLatestResponseModel?> GetV1CryptocurrencyListingsHistoricalAsync(string date, int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyListingsLatestResponseModel?> result = await GetV1CryptocurrencyListingsHistoricalWithHttpInfoAsync(date, start, limit, convert, convertId, sort, sortDir, cryptocurrencyType, aux, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Listings Historical Returns a ranked and sorted list of all cryptocurrencies for a historical UTC date.     **Technical Notes** - This endpoint is identical in format to our [/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) endpoint but is used to retrieve historical daily ranking snapshots from the end of each UTC day.   - Daily snapshots reflect market data at the end of each UTC day and may be requested as far back as 2013-04-28 (as supported by your plan&#39;s historical limits).   - The required \&quot;date\&quot; parameter can be passed as a Unix timestamp or ISO 8601 date but only the date portion of the timestamp will be referenced. It is recommended to send an ISO date format like \&quot;2019-10-10\&quot; without time. - This endpoint is for retrieving paginated and sorted lists of all currencies. If you require historical market data on specific cryptocurrencies you should use [/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical).       Cryptocurrencies are listed by cmc_rank by default. You may optionally sort against any of the following:   **cmc_rank**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **market_cap**: market cap (latest trade price x circulating supply).   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **volume_24h**: 24 hour trading volume for each currency.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.       **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (12 months)   - Enterprise (Up to 6 years)  **Cache / Update frequency:** The last completed UTC day is available 30 minutes after midnight on the next UTC day.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical daily crypto ranking snapshot pages like this one on [February 02, 2014](https://coinmarketcap.com/historical/20140202/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">date (Unix or ISO 8601) to reference day of snapshot.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to cmc_rank)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&#x60; to include all auxiliary fields. (optional, default to &quot;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyListingsLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyListingsLatestResponseModel?> GetV1CryptocurrencyListingsHistoricalOrDefaultAsync(string date, int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyListingsLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyListingsHistoricalWithHttpInfoAsync(date, start, limit, convert, convertId, sort, sortDir, cryptocurrencyType, aux, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Listings Historical Returns a ranked and sorted list of all cryptocurrencies for a historical UTC date.     **Technical Notes** - This endpoint is identical in format to our [/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) endpoint but is used to retrieve historical daily ranking snapshots from the end of each UTC day.   - Daily snapshots reflect market data at the end of each UTC day and may be requested as far back as 2013-04-28 (as supported by your plan&#39;s historical limits).   - The required \&quot;date\&quot; parameter can be passed as a Unix timestamp or ISO 8601 date but only the date portion of the timestamp will be referenced. It is recommended to send an ISO date format like \&quot;2019-10-10\&quot; without time. - This endpoint is for retrieving paginated and sorted lists of all currencies. If you require historical market data on specific cryptocurrencies you should use [/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical).       Cryptocurrencies are listed by cmc_rank by default. You may optionally sort against any of the following:   **cmc_rank**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **market_cap**: market cap (latest trade price x circulating supply).   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **volume_24h**: 24 hour trading volume for each currency.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.       **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (12 months)   - Enterprise (Up to 6 years)  **Cache / Update frequency:** The last completed UTC day is available 30 minutes after midnight on the next UTC day.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical daily crypto ranking snapshot pages like this one on [February 02, 2014](https://coinmarketcap.com/historical/20140202/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">date (Unix or ISO 8601) to reference day of snapshot.</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to cmc_rank)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&#x60; to include all auxiliary fields. (optional, default to &quot;platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyListingsLatestResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyListingsLatestResponseModel?>> GetV1CryptocurrencyListingsHistoricalWithHttpInfoAsync(string date, int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'

                if (date == null)
                    throw new ArgumentNullException(nameof(date));
                    
                #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/listings/historical";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);

                parseQueryString["date"] = Uri.EscapeDataString(date.ToString()!);
                
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (sort != null)
                    parseQueryString["sort"] = Uri.EscapeDataString(sort.ToString()!);

                if (sortDir != null)
                    parseQueryString["sort_dir"] = Uri.EscapeDataString(sortDir.ToString()!);

                if (cryptocurrencyType != null)
                    parseQueryString["cryptocurrency_type"] = Uri.EscapeDataString(cryptocurrencyType.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/listings/historical"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyListingsLatestResponseModel?> apiResponse = new ApiResponse<CryptocurrencyListingsLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyListingsLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Listings Latest Returns a paginated list of all active cryptocurrencies with latest market data. The default \&quot;market_cap\&quot; sort returns cryptocurrency in order of CoinMarketCap&#39;s market cap rank (as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;) but you may configure this call to order by another market ranking field. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.   You may sort against any of the following:   **market_cap**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **market_cap_strict**: A strict market cap sort (latest trade price x circulating supply).   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **date_added**: Date cryptocurrency was added to the system.   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **market_cap_by_total_supply_strict**: market cap by total supply.   **volume_24h**: rolling 24 hour adjusted trading volume.   **volume_7d**: rolling 24 hour adjusted trading volume.   **volume_30d**: rolling 24 hour adjusted trading volume.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest cryptocurrency listing and ranking pages like [coinmarketcap.com/all/views/all/](https://coinmarketcap.com/all/views/all/), [coinmarketcap.com/tokens/](https://coinmarketcap.com/tokens/), [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/), [coinmarketcap.com/new/](https://coinmarketcap.com/new/).         ***NOTE:** Use this endpoint if you need a sorted and paginated list of all cryptocurrencies. If you want to query for market data on a few specific cryptocurrencies use [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="priceMin">Optionally specify a threshold of minimum USD price to filter results by. (optional)</param>
        /// <param name="priceMax">Optionally specify a threshold of maximum USD price to filter results by. (optional)</param>
        /// <param name="marketCapMin">Optionally specify a threshold of minimum market cap to filter results by. (optional)</param>
        /// <param name="marketCapMax">Optionally specify a threshold of maximum market cap to filter results by. (optional)</param>
        /// <param name="volume24hMin">Optionally specify a threshold of minimum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="volume24hMax">Optionally specify a threshold of maximum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMin">Optionally specify a threshold of minimum circulating supply to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMax">Optionally specify a threshold of maximum circulating supply to filter results by. (optional)</param>
        /// <param name="percentChange24hMin">Optionally specify a threshold of minimum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="percentChange24hMax">Optionally specify a threshold of maximum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to market_cap)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="tag">The tag of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calc&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyListingsLatestResponseModel1"/>&gt;</returns>
        public async Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsLatestAsync(int? start = null, int? limit = null, decimal? priceMin = null, decimal? priceMax = null, decimal? marketCapMin = null, decimal? marketCapMax = null, decimal? volume24hMin = null, decimal? volume24hMax = null, decimal? circulatingSupplyMin = null, decimal? circulatingSupplyMax = null, decimal? percentChange24hMin = null, decimal? percentChange24hMax = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? tag = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyListingsLatestResponseModel1?> result = await GetV1CryptocurrencyListingsLatestWithHttpInfoAsync(start, limit, priceMin, priceMax, marketCapMin, marketCapMax, volume24hMin, volume24hMax, circulatingSupplyMin, circulatingSupplyMax, percentChange24hMin, percentChange24hMax, convert, convertId, sort, sortDir, cryptocurrencyType, tag, aux, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Listings Latest Returns a paginated list of all active cryptocurrencies with latest market data. The default \&quot;market_cap\&quot; sort returns cryptocurrency in order of CoinMarketCap&#39;s market cap rank (as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;) but you may configure this call to order by another market ranking field. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.   You may sort against any of the following:   **market_cap**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **market_cap_strict**: A strict market cap sort (latest trade price x circulating supply).   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **date_added**: Date cryptocurrency was added to the system.   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **market_cap_by_total_supply_strict**: market cap by total supply.   **volume_24h**: rolling 24 hour adjusted trading volume.   **volume_7d**: rolling 24 hour adjusted trading volume.   **volume_30d**: rolling 24 hour adjusted trading volume.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest cryptocurrency listing and ranking pages like [coinmarketcap.com/all/views/all/](https://coinmarketcap.com/all/views/all/), [coinmarketcap.com/tokens/](https://coinmarketcap.com/tokens/), [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/), [coinmarketcap.com/new/](https://coinmarketcap.com/new/).         ***NOTE:** Use this endpoint if you need a sorted and paginated list of all cryptocurrencies. If you want to query for market data on a few specific cryptocurrencies use [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="priceMin">Optionally specify a threshold of minimum USD price to filter results by. (optional)</param>
        /// <param name="priceMax">Optionally specify a threshold of maximum USD price to filter results by. (optional)</param>
        /// <param name="marketCapMin">Optionally specify a threshold of minimum market cap to filter results by. (optional)</param>
        /// <param name="marketCapMax">Optionally specify a threshold of maximum market cap to filter results by. (optional)</param>
        /// <param name="volume24hMin">Optionally specify a threshold of minimum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="volume24hMax">Optionally specify a threshold of maximum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMin">Optionally specify a threshold of minimum circulating supply to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMax">Optionally specify a threshold of maximum circulating supply to filter results by. (optional)</param>
        /// <param name="percentChange24hMin">Optionally specify a threshold of minimum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="percentChange24hMax">Optionally specify a threshold of maximum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to market_cap)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="tag">The tag of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calc&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyListingsLatestResponseModel1"/>&gt;</returns>
        public async Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsLatestOrDefaultAsync(int? start = null, int? limit = null, decimal? priceMin = null, decimal? priceMax = null, decimal? marketCapMin = null, decimal? marketCapMax = null, decimal? volume24hMin = null, decimal? volume24hMax = null, decimal? circulatingSupplyMin = null, decimal? circulatingSupplyMax = null, decimal? percentChange24hMin = null, decimal? percentChange24hMax = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? tag = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyListingsLatestResponseModel1?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyListingsLatestWithHttpInfoAsync(start, limit, priceMin, priceMax, marketCapMin, marketCapMax, volume24hMin, volume24hMax, circulatingSupplyMin, circulatingSupplyMax, percentChange24hMin, percentChange24hMax, convert, convertId, sort, sortDir, cryptocurrencyType, tag, aux, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Listings Latest Returns a paginated list of all active cryptocurrencies with latest market data. The default \&quot;market_cap\&quot; sort returns cryptocurrency in order of CoinMarketCap&#39;s market cap rank (as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;) but you may configure this call to order by another market ranking field. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.   You may sort against any of the following:   **market_cap**: CoinMarketCap&#39;s market cap rank as outlined in &lt;a href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our methodology&lt;/a&gt;.   **market_cap_strict**: A strict market cap sort (latest trade price x circulating supply).   **name**: The cryptocurrency name.   **symbol**: The cryptocurrency symbol.   **date_added**: Date cryptocurrency was added to the system.   **price**: latest average trade price across markets.   **circulating_supply**: approximate number of coins currently in circulation.   **total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).   **max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.   **num_market_pairs**: number of market pairs across all exchanges trading each currency.   **market_cap_by_total_supply_strict**: market cap by total supply.   **volume_24h**: rolling 24 hour adjusted trading volume.   **volume_7d**: rolling 24 hour adjusted trading volume.   **volume_30d**: rolling 24 hour adjusted trading volume.   **percent_change_1h**: 1 hour trading price percentage change for each currency.   **percent_change_24h**: 24 hour trading price percentage change for each currency.   **percent_change_7d**: 7 day trading price percentage change for each currency.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest cryptocurrency listing and ranking pages like [coinmarketcap.com/all/views/all/](https://coinmarketcap.com/all/views/all/), [coinmarketcap.com/tokens/](https://coinmarketcap.com/tokens/), [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/), [coinmarketcap.com/new/](https://coinmarketcap.com/new/).         ***NOTE:** Use this endpoint if you need a sorted and paginated list of all cryptocurrencies. If you want to query for market data on a few specific cryptocurrencies use [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="priceMin">Optionally specify a threshold of minimum USD price to filter results by. (optional)</param>
        /// <param name="priceMax">Optionally specify a threshold of maximum USD price to filter results by. (optional)</param>
        /// <param name="marketCapMin">Optionally specify a threshold of minimum market cap to filter results by. (optional)</param>
        /// <param name="marketCapMax">Optionally specify a threshold of maximum market cap to filter results by. (optional)</param>
        /// <param name="volume24hMin">Optionally specify a threshold of minimum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="volume24hMax">Optionally specify a threshold of maximum 24 hour USD volume to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMin">Optionally specify a threshold of minimum circulating supply to filter results by. (optional)</param>
        /// <param name="circulatingSupplyMax">Optionally specify a threshold of maximum circulating supply to filter results by. (optional)</param>
        /// <param name="percentChange24hMin">Optionally specify a threshold of minimum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="percentChange24hMax">Optionally specify a threshold of maximum 24 hour percent change to filter results by. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to market_cap)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cryptocurrencyType">The type of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="tag">The tag of cryptocurrency to include. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calc&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyListingsLatestResponseModel1"/></returns>
        public async Task<ApiResponse<CryptocurrencyListingsLatestResponseModel1?>> GetV1CryptocurrencyListingsLatestWithHttpInfoAsync(int? start = null, int? limit = null, decimal? priceMin = null, decimal? priceMax = null, decimal? marketCapMin = null, decimal? marketCapMax = null, decimal? volume24hMin = null, decimal? volume24hMax = null, decimal? circulatingSupplyMin = null, decimal? circulatingSupplyMax = null, decimal? percentChange24hMin = null, decimal? percentChange24hMax = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, string? cryptocurrencyType = null, string? tag = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/listings/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (priceMin != null)
                    parseQueryString["price_min"] = Uri.EscapeDataString(priceMin.ToString()!);

                if (priceMax != null)
                    parseQueryString["price_max"] = Uri.EscapeDataString(priceMax.ToString()!);

                if (marketCapMin != null)
                    parseQueryString["market_cap_min"] = Uri.EscapeDataString(marketCapMin.ToString()!);

                if (marketCapMax != null)
                    parseQueryString["market_cap_max"] = Uri.EscapeDataString(marketCapMax.ToString()!);

                if (volume24hMin != null)
                    parseQueryString["volume_24h_min"] = Uri.EscapeDataString(volume24hMin.ToString()!);

                if (volume24hMax != null)
                    parseQueryString["volume_24h_max"] = Uri.EscapeDataString(volume24hMax.ToString()!);

                if (circulatingSupplyMin != null)
                    parseQueryString["circulating_supply_min"] = Uri.EscapeDataString(circulatingSupplyMin.ToString()!);

                if (circulatingSupplyMax != null)
                    parseQueryString["circulating_supply_max"] = Uri.EscapeDataString(circulatingSupplyMax.ToString()!);

                if (percentChange24hMin != null)
                    parseQueryString["percent_change_24h_min"] = Uri.EscapeDataString(percentChange24hMin.ToString()!);

                if (percentChange24hMax != null)
                    parseQueryString["percent_change_24h_max"] = Uri.EscapeDataString(percentChange24hMax.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (sort != null)
                    parseQueryString["sort"] = Uri.EscapeDataString(sort.ToString()!);

                if (sortDir != null)
                    parseQueryString["sort_dir"] = Uri.EscapeDataString(sortDir.ToString()!);

                if (cryptocurrencyType != null)
                    parseQueryString["cryptocurrency_type"] = Uri.EscapeDataString(cryptocurrencyType.ToString()!);

                if (tag != null)
                    parseQueryString["tag"] = Uri.EscapeDataString(tag.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/listings/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyListingsLatestResponseModel1?> apiResponse = new ApiResponse<CryptocurrencyListingsLatestResponseModel1?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyListingsLatestResponseModel1>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Listings New Returns a paginated list of most recently added cryptocurrencies.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our \&quot;new\&quot; cryptocurrency page [coinmarketcap.com/new/](https://coinmarketcap.com/new)    ***NOTE:** Use this endpoint if you need a sorted and paginated list of all recently added cryptocurrencies.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyListingsLatestResponseModel1"/>&gt;</returns>
        public async Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsNewAsync(int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyListingsLatestResponseModel1?> result = await GetV1CryptocurrencyListingsNewWithHttpInfoAsync(start, limit, convert, convertId, sortDir, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Listings New Returns a paginated list of most recently added cryptocurrencies.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our \&quot;new\&quot; cryptocurrency page [coinmarketcap.com/new/](https://coinmarketcap.com/new)    ***NOTE:** Use this endpoint if you need a sorted and paginated list of all recently added cryptocurrencies.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyListingsLatestResponseModel1"/>&gt;</returns>
        public async Task<CryptocurrencyListingsLatestResponseModel1?> GetV1CryptocurrencyListingsNewOrDefaultAsync(int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyListingsLatestResponseModel1?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyListingsNewWithHttpInfoAsync(start, limit, convert, convertId, sortDir, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Listings New Returns a paginated list of most recently added cryptocurrencies.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our \&quot;new\&quot; cryptocurrency page [coinmarketcap.com/new/](https://coinmarketcap.com/new)    ***NOTE:** Use this endpoint if you need a sorted and paginated list of all recently added cryptocurrencies.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyListingsLatestResponseModel1"/></returns>
        public async Task<ApiResponse<CryptocurrencyListingsLatestResponseModel1?>> GetV1CryptocurrencyListingsNewWithHttpInfoAsync(int? start = null, int? limit = null, string? convert = null, string? convertId = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/listings/new";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (sortDir != null)
                    parseQueryString["sort_dir"] = Uri.EscapeDataString(sortDir.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/listings/new"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyListingsLatestResponseModel1?> apiResponse = new ApiResponse<CryptocurrencyListingsLatestResponseModel1?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyListingsLatestResponseModel1>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// CoinMarketCap ID Map Returns a mapping of all cryptocurrencies to unique CoinMarketCap &#x60;id&#x60;s. Per our &lt;a href&#x3D;\&quot;#section/Best-Practices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Best Practices&lt;/a&gt; we recommend utilizing CMC ID instead of cryptocurrency symbols to securely identify cryptocurrencies with our other endpoints and in your own application logic.  Each cryptocurrency returned includes typical identifiers such as &#x60;name&#x60;, &#x60;symbol&#x60;, and &#x60;token_address&#x60; for flexible mapping to &#x60;id&#x60;.         By default this endpoint returns cryptocurrencies that have actively tracked markets on supported exchanges. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered cryptocurrency projects that are listed but do not yet meet methodology requirements to have tracked markets via &#x60;listing_status&#x3D;untracked&#x60;. Please review our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.         Cryptocurrencies returned include &#x60;first_historical_data&#x60; and &#x60;last_historical_data&#x60; timestamps to conveniently reference historical date ranges available to query with historical time-series data endpoints. You may also use the &#x60;aux&#x60; parameter to only include properties you require to slim down the payload if calling this endpoint frequently.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active cryptocurrencies are returned by default. Pass &#x60;inactive&#x60; to get a list of cryptocurrencies that are no longer active. Pass &#x60;untracked&#x60; to get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to id)</param>
        /// <param name="symbol">Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;platform,first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyMapResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyMapResponseModel?> GetV1CryptocurrencyMapAsync(string? listingStatus = null, int? start = null, int? limit = null, string? sort = null, string? symbol = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyMapResponseModel?> result = await GetV1CryptocurrencyMapWithHttpInfoAsync(listingStatus, start, limit, sort, symbol, aux, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// CoinMarketCap ID Map Returns a mapping of all cryptocurrencies to unique CoinMarketCap &#x60;id&#x60;s. Per our &lt;a href&#x3D;\&quot;#section/Best-Practices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Best Practices&lt;/a&gt; we recommend utilizing CMC ID instead of cryptocurrency symbols to securely identify cryptocurrencies with our other endpoints and in your own application logic.  Each cryptocurrency returned includes typical identifiers such as &#x60;name&#x60;, &#x60;symbol&#x60;, and &#x60;token_address&#x60; for flexible mapping to &#x60;id&#x60;.         By default this endpoint returns cryptocurrencies that have actively tracked markets on supported exchanges. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered cryptocurrency projects that are listed but do not yet meet methodology requirements to have tracked markets via &#x60;listing_status&#x3D;untracked&#x60;. Please review our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.         Cryptocurrencies returned include &#x60;first_historical_data&#x60; and &#x60;last_historical_data&#x60; timestamps to conveniently reference historical date ranges available to query with historical time-series data endpoints. You may also use the &#x60;aux&#x60; parameter to only include properties you require to slim down the payload if calling this endpoint frequently.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active cryptocurrencies are returned by default. Pass &#x60;inactive&#x60; to get a list of cryptocurrencies that are no longer active. Pass &#x60;untracked&#x60; to get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to id)</param>
        /// <param name="symbol">Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;platform,first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyMapResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyMapResponseModel?> GetV1CryptocurrencyMapOrDefaultAsync(string? listingStatus = null, int? start = null, int? limit = null, string? sort = null, string? symbol = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyMapResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyMapWithHttpInfoAsync(listingStatus, start, limit, sort, symbol, aux, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// CoinMarketCap ID Map Returns a mapping of all cryptocurrencies to unique CoinMarketCap &#x60;id&#x60;s. Per our &lt;a href&#x3D;\&quot;#section/Best-Practices\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Best Practices&lt;/a&gt; we recommend utilizing CMC ID instead of cryptocurrency symbols to securely identify cryptocurrencies with our other endpoints and in your own application logic.  Each cryptocurrency returned includes typical identifiers such as &#x60;name&#x60;, &#x60;symbol&#x60;, and &#x60;token_address&#x60; for flexible mapping to &#x60;id&#x60;.         By default this endpoint returns cryptocurrencies that have actively tracked markets on supported exchanges. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered cryptocurrency projects that are listed but do not yet meet methodology requirements to have tracked markets via &#x60;listing_status&#x3D;untracked&#x60;. Please review our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.         Cryptocurrencies returned include &#x60;first_historical_data&#x60; and &#x60;last_historical_data&#x60; timestamps to conveniently reference historical date ranges available to query with historical time-series data endpoints. You may also use the &#x60;aux&#x60; parameter to only include properties you require to slim down the payload if calling this endpoint frequently.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 API call credit per request no matter query size.   **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active cryptocurrencies are returned by default. Pass &#x60;inactive&#x60; to get a list of cryptocurrencies that are no longer active. Pass &#x60;untracked&#x60; to get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to id)</param>
        /// <param name="symbol">Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;platform,first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;platform,first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyMapResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyMapResponseModel?>> GetV1CryptocurrencyMapWithHttpInfoAsync(string? listingStatus = null, int? start = null, int? limit = null, string? sort = null, string? symbol = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/map";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (listingStatus != null)
                    parseQueryString["listing_status"] = Uri.EscapeDataString(listingStatus.ToString()!);

                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (sort != null)
                    parseQueryString["sort"] = Uri.EscapeDataString(sort.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/map"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyMapResponseModel?> apiResponse = new ApiResponse<CryptocurrencyMapResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyMapResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Market Pairs Latest Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a cryptocurrency by slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \&quot;BTC\&quot;. A single cryptocurrency \&quot;id\&quot;, \&quot;slug\&quot;, *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sortDir">Optionally specify the sort direction of markets returned. (optional, default to desc)</param>
        /// <param name="sort">Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass &#x60;cmc_rank&#x60; to return a CMC methodology based sort where markets with excluded volumes are returned last. (optional, default to volume_24h_strict)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?id&#x3D;1&amp;matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?symbol&#x3D;BTC&amp;matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyMarketPairsLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyMarketPairsLatestResponseModel?> GetV1CryptocurrencyMarketpairsLatestAsync(string? id = null, string? slug = null, string? symbol = null, int? start = null, int? limit = null, string? sortDir = null, string? sort = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyMarketPairsLatestResponseModel?> result = await GetV1CryptocurrencyMarketpairsLatestWithHttpInfoAsync(id, slug, symbol, start, limit, sortDir, sort, aux, matchedId, matchedSymbol, category, feeType, convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Market Pairs Latest Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a cryptocurrency by slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \&quot;BTC\&quot;. A single cryptocurrency \&quot;id\&quot;, \&quot;slug\&quot;, *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sortDir">Optionally specify the sort direction of markets returned. (optional, default to desc)</param>
        /// <param name="sort">Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass &#x60;cmc_rank&#x60; to return a CMC methodology based sort where markets with excluded volumes are returned last. (optional, default to volume_24h_strict)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?id&#x3D;1&amp;matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?symbol&#x3D;BTC&amp;matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyMarketPairsLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyMarketPairsLatestResponseModel?> GetV1CryptocurrencyMarketpairsLatestOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, int? start = null, int? limit = null, string? sortDir = null, string? sort = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyMarketPairsLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyMarketpairsLatestWithHttpInfoAsync(id, slug, symbol, start, limit, sortDir, sort, aux, matchedId, matchedSymbol, category, feeType, convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Market Pairs Latest Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a cryptocurrency by slug. Example: \&quot;bitcoin\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \&quot;BTC\&quot;. A single cryptocurrency \&quot;id\&quot;, \&quot;slug\&quot;, *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sortDir">Optionally specify the sort direction of markets returned. (optional, default to desc)</param>
        /// <param name="sort">Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass &#x60;cmc_rank&#x60; to return a CMC methodology based sort where markets with excluded volumes are returned last. (optional, default to volume_24h_strict)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?id&#x3D;1&amp;matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?symbol&#x3D;BTC&amp;matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot;. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyMarketPairsLatestResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyMarketPairsLatestResponseModel?>> GetV1CryptocurrencyMarketpairsLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, int? start = null, int? limit = null, string? sortDir = null, string? sort = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/market-pairs/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (sortDir != null)
                    parseQueryString["sort_dir"] = Uri.EscapeDataString(sortDir.ToString()!);

                if (sort != null)
                    parseQueryString["sort"] = Uri.EscapeDataString(sort.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                if (matchedId != null)
                    parseQueryString["matched_id"] = Uri.EscapeDataString(matchedId.ToString()!);

                if (matchedSymbol != null)
                    parseQueryString["matched_symbol"] = Uri.EscapeDataString(matchedSymbol.ToString()!);

                if (category != null)
                    parseQueryString["category"] = Uri.EscapeDataString(category.ToString()!);

                if (feeType != null)
                    parseQueryString["fee_type"] = Uri.EscapeDataString(feeType.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/market-pairs/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyMarketPairsLatestResponseModel?> apiResponse = new ApiResponse<CryptocurrencyMarketPairsLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyMarketPairsLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// OHLCV Historical Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is only supported with daily periods at this time.       **Technical Notes** - Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time for this \&quot;time_period\&quot;.  - One OHLCV quote will be returned for every \&quot;time_period\&quot; between your \&quot;time_start\&quot; (exclusive) and \&quot;time_end\&quot; (inclusive).   - If a \&quot;time_start\&quot; is not supplied, the \&quot;time_period\&quot; will be calculated in reverse from \&quot;time_end\&quot; using the \&quot;count\&quot; parameter which defaults to 10 results.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.    - If you don&#39;t need every \&quot;time_period\&quot; between your dates you may adjust the frequency that \&quot;time_period\&quot; is sampled using the \&quot;interval\&quot; parameter. For example with \&quot;time_period\&quot; set to \&quot;daily\&quot; you may set \&quot;interval\&quot; to \&quot;2d\&quot; to get the daily OHLCV for every other day. You could set \&quot;interval\&quot; to \&quot;monthly\&quot; to get the first daily OHLCV for each month, or set it to \&quot;yearly\&quot; to get the daily OHLCV value against the same date every year.    **Implementation Tips** - If querying for a specific OHLCV date your \&quot;time_start\&quot; should specify a timestamp of 1 interval prior as \&quot;time_start\&quot; is an exclusive time parameter (as opposed to \&quot;time_end\&quot; which is inclusive to the search). This means that when you pass a \&quot;time_start\&quot; results will be returned for the *next* complete \&quot;time_period\&quot;. For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \&quot;time_start\&quot; should be \&quot;2018-11-29\&quot;.    - If only specifying a \&quot;count\&quot; parameter to return latest OHLCV periods, your \&quot;count\&quot; should be 1 number higher than the number of results you expect to receive. \&quot;Count\&quot; defines the number of \&quot;time_period\&quot; intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \&quot;count&#x3D;2\&quot; to skip the incomplete active time period. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**      There are 2 types of time interval formats that may be used for \&quot;time_period\&quot; and \&quot;interval\&quot; parameters. For \&quot;time_period\&quot; these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \&quot;interval\&quot; to adjust how frequently \&quot;time_period\&quot; is sampled.      The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Hour intervals in UTC.   **\&quot;daily\&quot;** - Calendar day intervals for each UTC day.   **\&quot;weekly\&quot;** - Calendar week intervals for each calendar week.   **\&quot;monthly\&quot;** - Calendar month intervals for each calendar month.     **\&quot;yearly\&quot;** - Calendar year intervals for each calendar year.      The second are relative time intervals.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Time periods that repeat every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.      Please note that \&quot;time_period\&quot; currently supports the \&quot;daily\&quot; and \&quot;hourly\&quot; options. \&quot;interval\&quot; supports all interval options.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~ - ~~Hobbyist~~ - Startup (1 month) - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.   **Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,1027\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Time period to return OHLCV data for. The default is \&quot;daily\&quot;. See the main endpoint description for details. (optional, default to daily)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we&#39;ll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="count">Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items. (optional, default to 10.0M)</param>
        /// <param name="interval">Optionally adjust the interval that \&quot;time_period\&quot; is sampled. See main endpoint description for available options. (optional, default to daily)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyOHLCVHistoricalResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyOHLCVHistoricalResponseModel?> GetV1CryptocurrencyOhlcvHistoricalAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyOHLCVHistoricalResponseModel?> result = await GetV1CryptocurrencyOhlcvHistoricalWithHttpInfoAsync(id, slug, symbol, timePeriod, timeStart, timeEnd, count, interval, convert, convertId, skipInvalid, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// OHLCV Historical Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is only supported with daily periods at this time.       **Technical Notes** - Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time for this \&quot;time_period\&quot;.  - One OHLCV quote will be returned for every \&quot;time_period\&quot; between your \&quot;time_start\&quot; (exclusive) and \&quot;time_end\&quot; (inclusive).   - If a \&quot;time_start\&quot; is not supplied, the \&quot;time_period\&quot; will be calculated in reverse from \&quot;time_end\&quot; using the \&quot;count\&quot; parameter which defaults to 10 results.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.    - If you don&#39;t need every \&quot;time_period\&quot; between your dates you may adjust the frequency that \&quot;time_period\&quot; is sampled using the \&quot;interval\&quot; parameter. For example with \&quot;time_period\&quot; set to \&quot;daily\&quot; you may set \&quot;interval\&quot; to \&quot;2d\&quot; to get the daily OHLCV for every other day. You could set \&quot;interval\&quot; to \&quot;monthly\&quot; to get the first daily OHLCV for each month, or set it to \&quot;yearly\&quot; to get the daily OHLCV value against the same date every year.    **Implementation Tips** - If querying for a specific OHLCV date your \&quot;time_start\&quot; should specify a timestamp of 1 interval prior as \&quot;time_start\&quot; is an exclusive time parameter (as opposed to \&quot;time_end\&quot; which is inclusive to the search). This means that when you pass a \&quot;time_start\&quot; results will be returned for the *next* complete \&quot;time_period\&quot;. For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \&quot;time_start\&quot; should be \&quot;2018-11-29\&quot;.    - If only specifying a \&quot;count\&quot; parameter to return latest OHLCV periods, your \&quot;count\&quot; should be 1 number higher than the number of results you expect to receive. \&quot;Count\&quot; defines the number of \&quot;time_period\&quot; intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \&quot;count&#x3D;2\&quot; to skip the incomplete active time period. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**      There are 2 types of time interval formats that may be used for \&quot;time_period\&quot; and \&quot;interval\&quot; parameters. For \&quot;time_period\&quot; these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \&quot;interval\&quot; to adjust how frequently \&quot;time_period\&quot; is sampled.      The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Hour intervals in UTC.   **\&quot;daily\&quot;** - Calendar day intervals for each UTC day.   **\&quot;weekly\&quot;** - Calendar week intervals for each calendar week.   **\&quot;monthly\&quot;** - Calendar month intervals for each calendar month.     **\&quot;yearly\&quot;** - Calendar year intervals for each calendar year.      The second are relative time intervals.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Time periods that repeat every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.      Please note that \&quot;time_period\&quot; currently supports the \&quot;daily\&quot; and \&quot;hourly\&quot; options. \&quot;interval\&quot; supports all interval options.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~ - ~~Hobbyist~~ - Startup (1 month) - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.   **Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,1027\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Time period to return OHLCV data for. The default is \&quot;daily\&quot;. See the main endpoint description for details. (optional, default to daily)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we&#39;ll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="count">Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items. (optional, default to 10.0M)</param>
        /// <param name="interval">Optionally adjust the interval that \&quot;time_period\&quot; is sampled. See main endpoint description for available options. (optional, default to daily)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyOHLCVHistoricalResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyOHLCVHistoricalResponseModel?> GetV1CryptocurrencyOhlcvHistoricalOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyOHLCVHistoricalResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyOhlcvHistoricalWithHttpInfoAsync(id, slug, symbol, timePeriod, timeStart, timeEnd, count, interval, convert, convertId, skipInvalid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// OHLCV Historical Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is only supported with daily periods at this time.       **Technical Notes** - Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time for this \&quot;time_period\&quot;.  - One OHLCV quote will be returned for every \&quot;time_period\&quot; between your \&quot;time_start\&quot; (exclusive) and \&quot;time_end\&quot; (inclusive).   - If a \&quot;time_start\&quot; is not supplied, the \&quot;time_period\&quot; will be calculated in reverse from \&quot;time_end\&quot; using the \&quot;count\&quot; parameter which defaults to 10 results.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.    - If you don&#39;t need every \&quot;time_period\&quot; between your dates you may adjust the frequency that \&quot;time_period\&quot; is sampled using the \&quot;interval\&quot; parameter. For example with \&quot;time_period\&quot; set to \&quot;daily\&quot; you may set \&quot;interval\&quot; to \&quot;2d\&quot; to get the daily OHLCV for every other day. You could set \&quot;interval\&quot; to \&quot;monthly\&quot; to get the first daily OHLCV for each month, or set it to \&quot;yearly\&quot; to get the daily OHLCV value against the same date every year.    **Implementation Tips** - If querying for a specific OHLCV date your \&quot;time_start\&quot; should specify a timestamp of 1 interval prior as \&quot;time_start\&quot; is an exclusive time parameter (as opposed to \&quot;time_end\&quot; which is inclusive to the search). This means that when you pass a \&quot;time_start\&quot; results will be returned for the *next* complete \&quot;time_period\&quot;. For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \&quot;time_start\&quot; should be \&quot;2018-11-29\&quot;.    - If only specifying a \&quot;count\&quot; parameter to return latest OHLCV periods, your \&quot;count\&quot; should be 1 number higher than the number of results you expect to receive. \&quot;Count\&quot; defines the number of \&quot;time_period\&quot; intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \&quot;count&#x3D;2\&quot; to skip the incomplete active time period. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**      There are 2 types of time interval formats that may be used for \&quot;time_period\&quot; and \&quot;interval\&quot; parameters. For \&quot;time_period\&quot; these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \&quot;interval\&quot; to adjust how frequently \&quot;time_period\&quot; is sampled.      The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Hour intervals in UTC.   **\&quot;daily\&quot;** - Calendar day intervals for each UTC day.   **\&quot;weekly\&quot;** - Calendar week intervals for each calendar week.   **\&quot;monthly\&quot;** - Calendar month intervals for each calendar month.     **\&quot;yearly\&quot;** - Calendar year intervals for each calendar year.      The second are relative time intervals.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Time periods that repeat every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.      Please note that \&quot;time_period\&quot; currently supports the \&quot;daily\&quot; and \&quot;hourly\&quot; options. \&quot;interval\&quot; supports all interval options.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~ - ~~Hobbyist~~ - Startup (1 month) - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.   **Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,1027\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Time period to return OHLCV data for. The default is \&quot;daily\&quot;. See the main endpoint description for details. (optional, default to daily)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we&#39;ll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it&#39;s recommended to send an ISO date format like \&quot;2018-09-19\&quot; without time. (optional)</param>
        /// <param name="count">Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items. (optional, default to 10.0M)</param>
        /// <param name="interval">Optionally adjust the interval that \&quot;time_period\&quot; is sampled. See main endpoint description for available options. (optional, default to daily)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyOHLCVHistoricalResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyOHLCVHistoricalResponseModel?>> GetV1CryptocurrencyOhlcvHistoricalWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/ohlcv/historical";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (timePeriod != null)
                    parseQueryString["time_period"] = Uri.EscapeDataString(timePeriod.ToString()!);

                if (timeStart != null)
                    parseQueryString["time_start"] = Uri.EscapeDataString(timeStart.ToString()!);

                if (timeEnd != null)
                    parseQueryString["time_end"] = Uri.EscapeDataString(timeEnd.ToString()!);

                if (count != null)
                    parseQueryString["count"] = Uri.EscapeDataString(count.ToString()!);

                if (interval != null)
                    parseQueryString["interval"] = Uri.EscapeDataString(interval.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (skipInvalid != null)
                    parseQueryString["skip_invalid"] = Uri.EscapeDataString(skipInvalid.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/ohlcv/historical"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyOHLCVHistoricalResponseModel?> apiResponse = new ApiResponse<CryptocurrencyOHLCVHistoricalResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyOHLCVHistoricalResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// OHLCV Latest Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise    **Cache / Update frequency:** Every 5 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.     **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.     **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyOHLCVLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyOHLCVLatestResponseModel?> GetV1CryptocurrencyOhlcvLatestAsync(string? id = null, string? symbol = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyOHLCVLatestResponseModel?> result = await GetV1CryptocurrencyOhlcvLatestWithHttpInfoAsync(id, symbol, convert, convertId, skipInvalid, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// OHLCV Latest Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise    **Cache / Update frequency:** Every 5 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.     **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.     **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyOHLCVLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyOHLCVLatestResponseModel?> GetV1CryptocurrencyOhlcvLatestOrDefaultAsync(string? id = null, string? symbol = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyOHLCVLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyOhlcvLatestWithHttpInfoAsync(id, symbol, convert, convertId, skipInvalid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// OHLCV Latest Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise    **Cache / Update frequency:** Every 5 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.     **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.     **CMC equivalent pages:** No equivalent, this data is only available via API.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyOHLCVLatestResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyOHLCVLatestResponseModel?>> GetV1CryptocurrencyOhlcvLatestWithHttpInfoAsync(string? id = null, string? symbol = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/ohlcv/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (skipInvalid != null)
                    parseQueryString["skip_invalid"] = Uri.EscapeDataString(skipInvalid.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/ohlcv/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyOHLCVLatestResponseModel?> apiResponse = new ApiResponse<CryptocurrencyOHLCVLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyOHLCVLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Price Performance Stats Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an &#x60;all_time&#x60; period by default. UTC &#x60;yesterday&#x60; and a number of *rolling time periods* may be requested using the &#x60;time_period&#x60; parameter. Utilize the &#x60;convert&#x60; parameter to translate values into multiple fiats or cryptocurrencies using historical rates.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).         ***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Specify one or more comma-delimited time periods to return stats for. &#x60;all_time&#x60; is the default. Pass &#x60;all_time,yesterday,24h,7d,30d,90d,365d&#x60; to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example &#x60;24h&#x60; would have a close time of now and an open time of 24 hours before now. *Please note: &#x60;yesterday&#x60; is a UTC period and currently does not currently support &#x60;high&#x60; and &#x60;low&#x60; timestamps.* (optional, default to &quot;all_time&quot;)</param>
        /// <param name="convert">Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyPricePerformanceStatsLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyPricePerformanceStatsLatestResponseModel?> GetV1CryptocurrencyPriceperformancestatsLatestAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyPricePerformanceStatsLatestResponseModel?> result = await GetV1CryptocurrencyPriceperformancestatsLatestWithHttpInfoAsync(id, slug, symbol, timePeriod, convert, convertId, skipInvalid, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Price Performance Stats Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an &#x60;all_time&#x60; period by default. UTC &#x60;yesterday&#x60; and a number of *rolling time periods* may be requested using the &#x60;time_period&#x60; parameter. Utilize the &#x60;convert&#x60; parameter to translate values into multiple fiats or cryptocurrencies using historical rates.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).         ***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Specify one or more comma-delimited time periods to return stats for. &#x60;all_time&#x60; is the default. Pass &#x60;all_time,yesterday,24h,7d,30d,90d,365d&#x60; to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example &#x60;24h&#x60; would have a close time of now and an open time of 24 hours before now. *Please note: &#x60;yesterday&#x60; is a UTC period and currently does not currently support &#x60;high&#x60; and &#x60;low&#x60; timestamps.* (optional, default to &quot;all_time&quot;)</param>
        /// <param name="convert">Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyPricePerformanceStatsLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyPricePerformanceStatsLatestResponseModel?> GetV1CryptocurrencyPriceperformancestatsLatestOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyPricePerformanceStatsLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyPriceperformancestatsLatestWithHttpInfoAsync(id, slug, symbol, timePeriod, convert, convertId, skipInvalid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Price Performance Stats Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an &#x60;all_time&#x60; period by default. UTC &#x60;yesterday&#x60; and a number of *rolling time periods* may be requested using the &#x60;time_period&#x60; parameter. Utilize the &#x60;convert&#x60; parameter to translate values into multiple fiats or cryptocurrencies using historical rates.     **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).         ***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timePeriod">Specify one or more comma-delimited time periods to return stats for. &#x60;all_time&#x60; is the default. Pass &#x60;all_time,yesterday,24h,7d,30d,90d,365d&#x60; to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example &#x60;24h&#x60; would have a close time of now and an open time of 24 hours before now. *Please note: &#x60;yesterday&#x60; is a UTC period and currently does not currently support &#x60;high&#x60; and &#x60;low&#x60; timestamps.* (optional, default to &quot;all_time&quot;)</param>
        /// <param name="convert">Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyPricePerformanceStatsLatestResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyPricePerformanceStatsLatestResponseModel?>> GetV1CryptocurrencyPriceperformancestatsLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? timePeriod = null, string? convert = null, string? convertId = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/price-performance-stats/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (timePeriod != null)
                    parseQueryString["time_period"] = Uri.EscapeDataString(timePeriod.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (skipInvalid != null)
                    parseQueryString["skip_invalid"] = Uri.EscapeDataString(skipInvalid.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/price-performance-stats/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyPricePerformanceStatsLatestResponseModel?> apiResponse = new ApiResponse<CryptocurrencyPricePerformanceStatsLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyPricePerformanceStatsLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.  **Technical Notes**   - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.    **Implementation Tips** - Want to get the last quote of each UTC day? Don&#39;t use \&quot;interval&#x3D;daily\&quot; as that returns the first quote. Instead use \&quot;interval&#x3D;24h\&quot; to repeat a specific timestamp search every 24 hours and pass ex. \&quot;time_start&#x3D;2019-01-04T23:59:00.000Z\&quot; to query for the last record of each UTC day. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.  The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 month) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.     **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;price,volume,market_cap,quote_timestamp,is_active,is_fiat,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;price,volume,market_cap,quote_timestamp,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyQuotesHistoricalResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyQuotesHistoricalResponseModel?> GetV1CryptocurrencyQuotesHistoricalAsync(string? id = null, string? symbol = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyQuotesHistoricalResponseModel?> result = await GetV1CryptocurrencyQuotesHistoricalWithHttpInfoAsync(id, symbol, timeStart, timeEnd, count, interval, convert, convertId, aux, skipInvalid, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.  **Technical Notes**   - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.    **Implementation Tips** - Want to get the last quote of each UTC day? Don&#39;t use \&quot;interval&#x3D;daily\&quot; as that returns the first quote. Instead use \&quot;interval&#x3D;24h\&quot; to repeat a specific timestamp search every 24 hours and pass ex. \&quot;time_start&#x3D;2019-01-04T23:59:00.000Z\&quot; to query for the last record of each UTC day. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.  The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 month) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.     **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;price,volume,market_cap,quote_timestamp,is_active,is_fiat,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;price,volume,market_cap,quote_timestamp,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyQuotesHistoricalResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyQuotesHistoricalResponseModel?> GetV1CryptocurrencyQuotesHistoricalOrDefaultAsync(string? id = null, string? symbol = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyQuotesHistoricalResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyQuotesHistoricalWithHttpInfoAsync(id, symbol, timeStart, timeEnd, count, interval, convert, convertId, aux, skipInvalid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.  **Technical Notes**   - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.    **Implementation Tips** - Want to get the last quote of each UTC day? Don&#39;t use \&quot;interval&#x3D;daily\&quot; as that returns the first quote. Instead use \&quot;interval&#x3D;24h\&quot; to repeat a specific timestamp search every 24 hours and pass ex. \&quot;time_start&#x3D;2019-01-04T23:59:00.000Z\&quot; to query for the last record of each UTC day. - This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.      **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.  The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 month) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.     **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;price,volume,market_cap,quote_timestamp,is_active,is_fiat,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;price,volume,market_cap,quote_timestamp,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyQuotesHistoricalResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyQuotesHistoricalResponseModel?>> GetV1CryptocurrencyQuotesHistoricalWithHttpInfoAsync(string? id = null, string? symbol = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/quotes/historical";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (timeStart != null)
                    parseQueryString["time_start"] = Uri.EscapeDataString(timeStart.ToString()!);

                if (timeEnd != null)
                    parseQueryString["time_end"] = Uri.EscapeDataString(timeEnd.ToString()!);

                if (count != null)
                    parseQueryString["count"] = Uri.EscapeDataString(count.ToString()!);

                if (interval != null)
                    parseQueryString["interval"] = Uri.EscapeDataString(interval.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                if (skipInvalid != null)
                    parseQueryString["skip_invalid"] = Uri.EscapeDataString(skipInvalid.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/quotes/historical"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyQuotesHistoricalResponseModel?> apiResponse = new ApiResponse<CryptocurrencyQuotesHistoricalResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyQuotesHistoricalResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Quotes Latest Returns the latest market quote for 1 or more cryptocurrencies. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).       ***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyQuotesLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyQuotesLatestResponseModel?> GetV1CryptocurrencyQuotesLatestAsync(string? id = null, string? slug = null, string? symbol = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyQuotesLatestResponseModel?> result = await GetV1CryptocurrencyQuotesLatestWithHttpInfoAsync(id, slug, symbol, convert, convertId, aux, skipInvalid, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Quotes Latest Returns the latest market quote for 1 or more cryptocurrencies. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).       ***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyQuotesLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyQuotesLatestResponseModel?> GetV1CryptocurrencyQuotesLatestOrDefaultAsync(string? id = null, string? slug = null, string? symbol = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyQuotesLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyQuotesLatestWithHttpInfoAsync(id, slug, symbol, convert, convertId, aux, skipInvalid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Quotes Latest Returns the latest market quote for 1 or more cryptocurrencies. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Startup - Hobbyist - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).       ***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2 (optional)</param>
        /// <param name="slug">Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \&quot;bitcoin,ethereum\&quot; (optional)</param>
        /// <param name="symbol">Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \&quot;BTC,ETH\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; *or* \&quot;symbol\&quot; is required for this request. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat&quot;)</param>
        /// <param name="skipInvalid">Pass &#x60;true&#x60; to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyQuotesLatestResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyQuotesLatestResponseModel?>> GetV1CryptocurrencyQuotesLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? symbol = null, string? convert = null, string? convertId = null, string? aux = null, bool? skipInvalid = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/quotes/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (symbol != null)
                    parseQueryString["symbol"] = Uri.EscapeDataString(symbol.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                if (skipInvalid != null)
                    parseQueryString["skip_invalid"] = Uri.EscapeDataString(skipInvalid.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/quotes/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyQuotesLatestResponseModel?> apiResponse = new ApiResponse<CryptocurrencyQuotesLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyQuotesLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Trending Gainers &amp; Losers Returns a paginated list of all trending cryptocurrencies, determined and sorted by the largest price gains or losses.   You may sort against any of the following:   **percent_change_24h**: 24 hour trading price percentage change for each currency.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Gainers &amp; Losers page [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the biggest gainers and losers. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to percent_change_24h)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyTrendingGainersLosersResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyTrendingGainersLosersResponseModel?> GetV1CryptocurrencyTrendingGainerslosersAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyTrendingGainersLosersResponseModel?> result = await GetV1CryptocurrencyTrendingGainerslosersWithHttpInfoAsync(start, limit, timePeriod, convert, convertId, sort, sortDir, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Trending Gainers &amp; Losers Returns a paginated list of all trending cryptocurrencies, determined and sorted by the largest price gains or losses.   You may sort against any of the following:   **percent_change_24h**: 24 hour trading price percentage change for each currency.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Gainers &amp; Losers page [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the biggest gainers and losers. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to percent_change_24h)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyTrendingGainersLosersResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyTrendingGainersLosersResponseModel?> GetV1CryptocurrencyTrendingGainerslosersOrDefaultAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyTrendingGainersLosersResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyTrendingGainerslosersWithHttpInfoAsync(start, limit, timePeriod, convert, convertId, sort, sortDir, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Trending Gainers &amp; Losers Returns a paginated list of all trending cryptocurrencies, determined and sorted by the largest price gains or losses.   You may sort against any of the following:   **percent_change_24h**: 24 hour trading price percentage change for each currency.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Gainers &amp; Losers page [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the biggest gainers and losers. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="sort">What field to sort the list of cryptocurrencies by. (optional, default to percent_change_24h)</param>
        /// <param name="sortDir">The direction in which to order cryptocurrencies against the specified sort. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyTrendingGainersLosersResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyTrendingGainersLosersResponseModel?>> GetV1CryptocurrencyTrendingGainerslosersWithHttpInfoAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, string? sort = null, string? sortDir = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/trending/gainers-losers";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (timePeriod != null)
                    parseQueryString["time_period"] = Uri.EscapeDataString(timePeriod.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (sort != null)
                    parseQueryString["sort"] = Uri.EscapeDataString(sort.ToString()!);

                if (sortDir != null)
                    parseQueryString["sort_dir"] = Uri.EscapeDataString(sortDir.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/trending/gainers-losers"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyTrendingGainersLosersResponseModel?> apiResponse = new ApiResponse<CryptocurrencyTrendingGainersLosersResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyTrendingGainersLosersResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Trending Latest Returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Trending page [coinmarketcap.com/trending-cryptocurrencies/](https://coinmarketcap.com/trending-cryptocurrencies/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the latest trending coins. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyTrendingLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyTrendingLatestResponseModel?> GetV1CryptocurrencyTrendingLatestAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyTrendingLatestResponseModel?> result = await GetV1CryptocurrencyTrendingLatestWithHttpInfoAsync(start, limit, timePeriod, convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Trending Latest Returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Trending page [coinmarketcap.com/trending-cryptocurrencies/](https://coinmarketcap.com/trending-cryptocurrencies/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the latest trending coins. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyTrendingLatestResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyTrendingLatestResponseModel?> GetV1CryptocurrencyTrendingLatestOrDefaultAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyTrendingLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyTrendingLatestWithHttpInfoAsync(start, limit, timePeriod, convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Trending Latest Returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our cryptocurrency Trending page [coinmarketcap.com/trending-cryptocurrencies/](https://coinmarketcap.com/trending-cryptocurrencies/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for the latest trending coins. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyTrendingLatestResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyTrendingLatestResponseModel?>> GetV1CryptocurrencyTrendingLatestWithHttpInfoAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/trending/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (timePeriod != null)
                    parseQueryString["time_period"] = Uri.EscapeDataString(timePeriod.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/trending/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyTrendingLatestResponseModel?> apiResponse = new ApiResponse<CryptocurrencyTrendingLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyTrendingLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Trending Most Visited Returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The CoinMarketCap “Most Visited” trending list. [coinmarketcap.com/most-viewed-pages/](https://coinmarketcap.com/most-viewed-pages/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for most visited currencies. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyTrendingMostVisitedResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyTrendingMostVisitedResponseModel?> GetV1CryptocurrencyTrendingMostvisitedAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyTrendingMostVisitedResponseModel?> result = await GetV1CryptocurrencyTrendingMostvisitedWithHttpInfoAsync(start, limit, timePeriod, convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Trending Most Visited Returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The CoinMarketCap “Most Visited” trending list. [coinmarketcap.com/most-viewed-pages/](https://coinmarketcap.com/most-viewed-pages/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for most visited currencies. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CryptocurrencyTrendingMostVisitedResponseModel"/>&gt;</returns>
        public async Task<CryptocurrencyTrendingMostVisitedResponseModel?> GetV1CryptocurrencyTrendingMostvisitedOrDefaultAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CryptocurrencyTrendingMostVisitedResponseModel?>? result = null;
            try 
            {
                result = await GetV1CryptocurrencyTrendingMostvisitedWithHttpInfoAsync(start, limit, timePeriod, convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Trending Most Visited Returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 10 minutes.   **Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** The CoinMarketCap “Most Visited” trending list. [coinmarketcap.com/most-viewed-pages/](https://coinmarketcap.com/most-viewed-pages/).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="timePeriod">Adjusts the overall window of time for most visited currencies. (optional, default to 24h)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CryptocurrencyTrendingMostVisitedResponseModel"/></returns>
        public async Task<ApiResponse<CryptocurrencyTrendingMostVisitedResponseModel?>> GetV1CryptocurrencyTrendingMostvisitedWithHttpInfoAsync(int? start = null, int? limit = null, string? timePeriod = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/cryptocurrency/trending/most-visited";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (timePeriod != null)
                    parseQueryString["time_period"] = Uri.EscapeDataString(timePeriod.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/cryptocurrency/trending/most-visited"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<CryptocurrencyTrendingMostVisitedResponseModel?> apiResponse = new ApiResponse<CryptocurrencyTrendingMostVisitedResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<CryptocurrencyTrendingMostVisitedResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }
    }
}
