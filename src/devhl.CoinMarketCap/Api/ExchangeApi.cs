// <auto-generated>
/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using devhl.CoinMarketCap.Client;
using devhl.CoinMarketCap.Model;

namespace devhl.CoinMarketCap.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeApi : IApi
    {
        /// <summary>
        /// Metadata
        /// </summary>
        /// <remarks>
        /// Returns all static metadata for one or more exchanges. This information includes details like launch date, logo, official website URL, social links, and market fee documentation URL.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up).   **CMC equivalent pages:** Exchange detail page metadata like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,date_launched,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,date_launched,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ExchangesInfoResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<ExchangesInfoResponseModel?>> GetV1ExchangeInfoWithHttpInfoAsync(string? id = null, string? slug = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Metadata
        /// </summary>
        /// <remarks>
        /// Returns all static metadata for one or more exchanges. This information includes details like launch date, logo, official website URL, social links, and market fee documentation URL.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up).   **CMC equivalent pages:** Exchange detail page metadata like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,date_launched,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,date_launched,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangesInfoResponseModel&gt;</returns>
        Task<ExchangesInfoResponseModel?> GetV1ExchangeInfoAsync(string? id = null, string? slug = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Metadata
        /// </summary>
        /// <remarks>
        /// Returns all static metadata for one or more exchanges. This information includes details like launch date, logo, official website URL, social links, and market fee documentation URL.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up).   **CMC equivalent pages:** Exchange detail page metadata like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </remarks>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,date_launched,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,date_launched,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangesInfoResponseModel?&gt;</returns>
        Task<ExchangesInfoResponseModel?> GetV1ExchangeInfoOrDefaultAsync(string? id = null, string? slug = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Listings Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest exchange listing and ranking pages like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).          ***NOTE:** Use this endpoint if you need a sorted and paginated list of exchanges. If you want to query for market data on a few specific exchanges use /v1/exchange/quotes/latest which is optimized for that purpose. The response data between these endpoints is otherwise the same.*  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to volume_24h)</param>
        /// <param name="sortDir">The direction in which to order exchanges against the specified sort. (optional)</param>
        /// <param name="marketType">The type of exchange markets to include in rankings. This field is deprecated. Please use \&quot;all\&quot; for accurate sorting. (optional, default to all)</param>
        /// <param name="category">The category for this exchange. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiats&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h&quot;)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ExchangeListingsLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<ExchangeListingsLatestResponseModel?>> GetV1ExchangeListingsLatestWithHttpInfoAsync(int? start = null, int? limit = null, string? sort = null, string? sortDir = null, string? marketType = null, string? category = null, string? aux = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest exchange listing and ranking pages like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).          ***NOTE:** Use this endpoint if you need a sorted and paginated list of exchanges. If you want to query for market data on a few specific exchanges use /v1/exchange/quotes/latest which is optimized for that purpose. The response data between these endpoints is otherwise the same.*  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to volume_24h)</param>
        /// <param name="sortDir">The direction in which to order exchanges against the specified sort. (optional)</param>
        /// <param name="marketType">The type of exchange markets to include in rankings. This field is deprecated. Please use \&quot;all\&quot; for accurate sorting. (optional, default to all)</param>
        /// <param name="category">The category for this exchange. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiats&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h&quot;)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeListingsLatestResponseModel&gt;</returns>
        Task<ExchangeListingsLatestResponseModel?> GetV1ExchangeListingsLatestAsync(int? start = null, int? limit = null, string? sort = null, string? sortDir = null, string? marketType = null, string? category = null, string? aux = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Listings Latest
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest exchange listing and ranking pages like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).          ***NOTE:** Use this endpoint if you need a sorted and paginated list of exchanges. If you want to query for market data on a few specific exchanges use /v1/exchange/quotes/latest which is optimized for that purpose. The response data between these endpoints is otherwise the same.*  
        /// </remarks>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to volume_24h)</param>
        /// <param name="sortDir">The direction in which to order exchanges against the specified sort. (optional)</param>
        /// <param name="marketType">The type of exchange markets to include in rankings. This field is deprecated. Please use \&quot;all\&quot; for accurate sorting. (optional, default to all)</param>
        /// <param name="category">The category for this exchange. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiats&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h&quot;)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeListingsLatestResponseModel?&gt;</returns>
        Task<ExchangeListingsLatestResponseModel?> GetV1ExchangeListingsLatestOrDefaultAsync(int? start = null, int? limit = null, string? sort = null, string? sortDir = null, string? marketType = null, string? category = null, string? aux = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// CoinMarketCap ID Map
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all active cryptocurrency exchanges by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique exchange &#x60;id&#x60; across all endpoints as typical exchange identifiers may change over time. As a convenience you may pass a comma-separated list of exchanges by &#x60;slug&#x60; to filter this list to only those you require or the &#x60;aux&#x60; parameter to slim down the payload.  By default this endpoint returns exchanges that have at least 1 actively tracked market. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered exchanges that are listed but do not yet meet methodology requirements to have tracked markets available via &#x60;listing_status&#x3D;untracked&#x60;. Please review **(3) Listing Tiers** in our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.   **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per call.   **CMC equivalent pages:** No equivalent, this data is only available via API.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active exchanges are returned by default. Pass &#x60;inactive&#x60; to get a list of exchanges that are no longer active. Pass &#x60;untracked&#x60; to get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="slug">Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to id)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cryptoId">Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?crypto_id&#x3D;1&#x60; would only return exchanges that have BTC. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ExchangeMapResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<ExchangeMapResponseModel?>> GetV1ExchangeMapWithHttpInfoAsync(string? listingStatus = null, string? slug = null, int? start = null, int? limit = null, string? sort = null, string? aux = null, string? cryptoId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// CoinMarketCap ID Map
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all active cryptocurrency exchanges by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique exchange &#x60;id&#x60; across all endpoints as typical exchange identifiers may change over time. As a convenience you may pass a comma-separated list of exchanges by &#x60;slug&#x60; to filter this list to only those you require or the &#x60;aux&#x60; parameter to slim down the payload.  By default this endpoint returns exchanges that have at least 1 actively tracked market. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered exchanges that are listed but do not yet meet methodology requirements to have tracked markets available via &#x60;listing_status&#x3D;untracked&#x60;. Please review **(3) Listing Tiers** in our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.   **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per call.   **CMC equivalent pages:** No equivalent, this data is only available via API.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active exchanges are returned by default. Pass &#x60;inactive&#x60; to get a list of exchanges that are no longer active. Pass &#x60;untracked&#x60; to get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="slug">Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to id)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cryptoId">Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?crypto_id&#x3D;1&#x60; would only return exchanges that have BTC. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeMapResponseModel&gt;</returns>
        Task<ExchangeMapResponseModel?> GetV1ExchangeMapAsync(string? listingStatus = null, string? slug = null, int? start = null, int? limit = null, string? sort = null, string? aux = null, string? cryptoId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// CoinMarketCap ID Map
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all active cryptocurrency exchanges by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique exchange &#x60;id&#x60; across all endpoints as typical exchange identifiers may change over time. As a convenience you may pass a comma-separated list of exchanges by &#x60;slug&#x60; to filter this list to only those you require or the &#x60;aux&#x60; parameter to slim down the payload.  By default this endpoint returns exchanges that have at least 1 actively tracked market. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered exchanges that are listed but do not yet meet methodology requirements to have tracked markets available via &#x60;listing_status&#x3D;untracked&#x60;. Please review **(3) Listing Tiers** in our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.   **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per call.   **CMC equivalent pages:** No equivalent, this data is only available via API.  
        /// </remarks>
        /// <param name="listingStatus">Only active exchanges are returned by default. Pass &#x60;inactive&#x60; to get a list of exchanges that are no longer active. Pass &#x60;untracked&#x60; to get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="slug">Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to id)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cryptoId">Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?crypto_id&#x3D;1&#x60; would only return exchanges that have BTC. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeMapResponseModel?&gt;</returns>
        Task<ExchangeMapResponseModel?> GetV1ExchangeMapOrDefaultAsync(string? listingStatus = null, string? slug = null, int? start = null, int? limit = null, string? sort = null, string? aux = null, string? cryptoId = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Market Pairs Latest
        /// </summary>
        /// <remarks>
        /// Returns all active market pairs that CoinMarketCap tracks for a given exchange. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.&#39;    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our exchange level active markets pages like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A CoinMarketCap exchange ID. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass an exchange \&quot;slug\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance\&quot;. One \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ExchangeMarketPairsLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<ExchangeMarketPairsLatestResponseModel?>> GetV1ExchangeMarketpairsLatestWithHttpInfoAsync(string? id = null, string? slug = null, int? start = null, int? limit = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Market Pairs Latest
        /// </summary>
        /// <remarks>
        /// Returns all active market pairs that CoinMarketCap tracks for a given exchange. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.&#39;    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our exchange level active markets pages like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A CoinMarketCap exchange ID. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass an exchange \&quot;slug\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance\&quot;. One \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeMarketPairsLatestResponseModel&gt;</returns>
        Task<ExchangeMarketPairsLatestResponseModel?> GetV1ExchangeMarketpairsLatestAsync(string? id = null, string? slug = null, int? start = null, int? limit = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Market Pairs Latest
        /// </summary>
        /// <remarks>
        /// Returns all active market pairs that CoinMarketCap tracks for a given exchange. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.&#39;    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our exchange level active markets pages like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </remarks>
        /// <param name="id">A CoinMarketCap exchange ID. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass an exchange \&quot;slug\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance\&quot;. One \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeMarketPairsLatestResponseModel?&gt;</returns>
        Task<ExchangeMarketPairsLatestResponseModel?> GetV1ExchangeMarketpairsLatestOrDefaultAsync(string? id = null, string? slug = null, int? start = null, int? limit = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historic quotes for any exchange based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  - This endpoint supports requesting multiple exchanges in the same call. Please note the API response will be wrapped in an additional object in this case.     **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (Up to 12 months)   - Enterprise (Up to 6 years)  **Note:** You may use the /exchange/map endpoint to receive a list of earliest historical dates that may be fetched for each exchange as  &#x60;first_historical_data&#x60;. This timestamp will either be the date CoinMarketCap first started tracking the exchange or 2018-04-26T00:45:00.000Z, the earliest date this type of historical data is available for.    **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** No equivalent, this data is only available via API outside of our volume sparkline charts in [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated exchange CoinMarketCap ids. Example: \&quot;24,270\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,kraken\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ExchangeHistoricalQuotesResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<ExchangeHistoricalQuotesResponseModel?>> GetV1ExchangeQuotesHistoricalWithHttpInfoAsync(string? id = null, string? slug = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historic quotes for any exchange based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  - This endpoint supports requesting multiple exchanges in the same call. Please note the API response will be wrapped in an additional object in this case.     **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (Up to 12 months)   - Enterprise (Up to 6 years)  **Note:** You may use the /exchange/map endpoint to receive a list of earliest historical dates that may be fetched for each exchange as  &#x60;first_historical_data&#x60;. This timestamp will either be the date CoinMarketCap first started tracking the exchange or 2018-04-26T00:45:00.000Z, the earliest date this type of historical data is available for.    **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** No equivalent, this data is only available via API outside of our volume sparkline charts in [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated exchange CoinMarketCap ids. Example: \&quot;24,270\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,kraken\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeHistoricalQuotesResponseModel&gt;</returns>
        Task<ExchangeHistoricalQuotesResponseModel?> GetV1ExchangeQuotesHistoricalAsync(string? id = null, string? slug = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historic quotes for any exchange based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  - This endpoint supports requesting multiple exchanges in the same call. Please note the API response will be wrapped in an additional object in this case.     **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (Up to 12 months)   - Enterprise (Up to 6 years)  **Note:** You may use the /exchange/map endpoint to receive a list of earliest historical dates that may be fetched for each exchange as  &#x60;first_historical_data&#x60;. This timestamp will either be the date CoinMarketCap first started tracking the exchange or 2018-04-26T00:45:00.000Z, the earliest date this type of historical data is available for.    **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** No equivalent, this data is only available via API outside of our volume sparkline charts in [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </remarks>
        /// <param name="id">One or more comma-separated exchange CoinMarketCap ids. Example: \&quot;24,270\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,kraken\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeHistoricalQuotesResponseModel?&gt;</returns>
        Task<ExchangeHistoricalQuotesResponseModel?> GetV1ExchangeQuotesHistoricalOrDefaultAsync(string? id = null, string? slug = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest aggregate market data for 1 or more exchanges. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data summary for specific exchanges like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap exchange IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, pass a comma-separated list of exchange \&quot;slugs\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ExchangeQuotesLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<ExchangeQuotesLatestResponseModel?>> GetV1ExchangeQuotesLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest aggregate market data for 1 or more exchanges. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data summary for specific exchanges like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap exchange IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, pass a comma-separated list of exchange \&quot;slugs\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeQuotesLatestResponseModel&gt;</returns>
        Task<ExchangeQuotesLatestResponseModel?> GetV1ExchangeQuotesLatestAsync(string? id = null, string? slug = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest aggregate market data for 1 or more exchanges. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data summary for specific exchanges like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </remarks>
        /// <param name="id">One or more comma-separated CoinMarketCap exchange IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, pass a comma-separated list of exchange \&quot;slugs\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ExchangeQuotesLatestResponseModel?&gt;</returns>
        Task<ExchangeQuotesLatestResponseModel?> GetV1ExchangeQuotesLatestOrDefaultAsync(string? id = null, string? slug = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeApi : IExchangeApi
    {
        /// <summary>
        /// An event to track the health of the server. 
        /// If you store these event args, be sure to purge old event args to prevent a memory leak.
        /// </summary>
        public event ClientUtils.EventHandler<ApiResponseEventArgs>? ApiResponded;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ExchangeApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangeApi(ILogger<ExchangeApi> logger, HttpClient httpClient, 
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            Logger = logger;
            HttpClient = httpClient;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Metadata Returns all static metadata for one or more exchanges. This information includes details like launch date, logo, official website URL, social links, and market fee documentation URL.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up).   **CMC equivalent pages:** Exchange detail page metadata like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,date_launched,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,date_launched,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangesInfoResponseModel"/>&gt;</returns>
        public async Task<ExchangesInfoResponseModel?> GetV1ExchangeInfoAsync(string? id = null, string? slug = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangesInfoResponseModel?> result = await GetV1ExchangeInfoWithHttpInfoAsync(id, slug, aux, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Metadata Returns all static metadata for one or more exchanges. This information includes details like launch date, logo, official website URL, social links, and market fee documentation URL.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up).   **CMC equivalent pages:** Exchange detail page metadata like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,date_launched,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,date_launched,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangesInfoResponseModel"/>&gt;</returns>
        public async Task<ExchangesInfoResponseModel?> GetV1ExchangeInfoOrDefaultAsync(string? id = null, string? slug = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangesInfoResponseModel?>? result = null;
            try 
            {
                result = await GetV1ExchangeInfoWithHttpInfoAsync(id, slug, aux, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Metadata Returns all static metadata for one or more exchanges. This information includes details like launch date, logo, official website URL, social links, and market fee documentation URL.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up).   **CMC equivalent pages:** Exchange detail page metadata like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;urls,logo,description,date_launched,notice,status&#x60; to include all auxiliary fields. (optional, default to &quot;urls,logo,description,date_launched,notice&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ExchangesInfoResponseModel"/></returns>
        public async Task<ApiResponse<ExchangesInfoResponseModel?>> GetV1ExchangeInfoWithHttpInfoAsync(string? id = null, string? slug = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/exchange/info";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/exchange/info"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<ExchangesInfoResponseModel?> apiResponse = new ApiResponse<ExchangesInfoResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ExchangesInfoResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Listings Latest Returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest exchange listing and ranking pages like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).          ***NOTE:** Use this endpoint if you need a sorted and paginated list of exchanges. If you want to query for market data on a few specific exchanges use /v1/exchange/quotes/latest which is optimized for that purpose. The response data between these endpoints is otherwise the same.*  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to volume_24h)</param>
        /// <param name="sortDir">The direction in which to order exchanges against the specified sort. (optional)</param>
        /// <param name="marketType">The type of exchange markets to include in rankings. This field is deprecated. Please use \&quot;all\&quot; for accurate sorting. (optional, default to all)</param>
        /// <param name="category">The category for this exchange. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiats&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h&quot;)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeListingsLatestResponseModel"/>&gt;</returns>
        public async Task<ExchangeListingsLatestResponseModel?> GetV1ExchangeListingsLatestAsync(int? start = null, int? limit = null, string? sort = null, string? sortDir = null, string? marketType = null, string? category = null, string? aux = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeListingsLatestResponseModel?> result = await GetV1ExchangeListingsLatestWithHttpInfoAsync(start, limit, sort, sortDir, marketType, category, aux, convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Listings Latest Returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest exchange listing and ranking pages like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).          ***NOTE:** Use this endpoint if you need a sorted and paginated list of exchanges. If you want to query for market data on a few specific exchanges use /v1/exchange/quotes/latest which is optimized for that purpose. The response data between these endpoints is otherwise the same.*  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to volume_24h)</param>
        /// <param name="sortDir">The direction in which to order exchanges against the specified sort. (optional)</param>
        /// <param name="marketType">The type of exchange markets to include in rankings. This field is deprecated. Please use \&quot;all\&quot; for accurate sorting. (optional, default to all)</param>
        /// <param name="category">The category for this exchange. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiats&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h&quot;)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeListingsLatestResponseModel"/>&gt;</returns>
        public async Task<ExchangeListingsLatestResponseModel?> GetV1ExchangeListingsLatestOrDefaultAsync(int? start = null, int? limit = null, string? sort = null, string? sortDir = null, string? marketType = null, string? category = null, string? aux = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeListingsLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1ExchangeListingsLatestWithHttpInfoAsync(start, limit, sort, sortDir, marketType, category, aux, convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Listings Latest Returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.      **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 1 minute.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our latest exchange listing and ranking pages like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).          ***NOTE:** Use this endpoint if you need a sorted and paginated list of exchanges. If you want to query for market data on a few specific exchanges use /v1/exchange/quotes/latest which is optimized for that purpose. The response data between these endpoints is otherwise the same.*  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to volume_24h)</param>
        /// <param name="sortDir">The direction in which to order exchanges against the specified sort. (optional)</param>
        /// <param name="marketType">The type of exchange markets to include in rankings. This field is deprecated. Please use \&quot;all\&quot; for accurate sorting. (optional, default to all)</param>
        /// <param name="category">The category for this exchange. (optional, default to all)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiats&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h&quot;)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ExchangeListingsLatestResponseModel"/></returns>
        public async Task<ApiResponse<ExchangeListingsLatestResponseModel?>> GetV1ExchangeListingsLatestWithHttpInfoAsync(int? start = null, int? limit = null, string? sort = null, string? sortDir = null, string? marketType = null, string? category = null, string? aux = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/exchange/listings/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (sort != null)
                    parseQueryString["sort"] = Uri.EscapeDataString(sort.ToString()!);

                if (sortDir != null)
                    parseQueryString["sort_dir"] = Uri.EscapeDataString(sortDir.ToString()!);

                if (marketType != null)
                    parseQueryString["market_type"] = Uri.EscapeDataString(marketType.ToString()!);

                if (category != null)
                    parseQueryString["category"] = Uri.EscapeDataString(category.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/exchange/listings/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<ExchangeListingsLatestResponseModel?> apiResponse = new ApiResponse<ExchangeListingsLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ExchangeListingsLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// CoinMarketCap ID Map Returns a paginated list of all active cryptocurrency exchanges by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique exchange &#x60;id&#x60; across all endpoints as typical exchange identifiers may change over time. As a convenience you may pass a comma-separated list of exchanges by &#x60;slug&#x60; to filter this list to only those you require or the &#x60;aux&#x60; parameter to slim down the payload.  By default this endpoint returns exchanges that have at least 1 actively tracked market. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered exchanges that are listed but do not yet meet methodology requirements to have tracked markets available via &#x60;listing_status&#x3D;untracked&#x60;. Please review **(3) Listing Tiers** in our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.   **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per call.   **CMC equivalent pages:** No equivalent, this data is only available via API.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active exchanges are returned by default. Pass &#x60;inactive&#x60; to get a list of exchanges that are no longer active. Pass &#x60;untracked&#x60; to get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="slug">Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to id)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cryptoId">Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?crypto_id&#x3D;1&#x60; would only return exchanges that have BTC. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeMapResponseModel"/>&gt;</returns>
        public async Task<ExchangeMapResponseModel?> GetV1ExchangeMapAsync(string? listingStatus = null, string? slug = null, int? start = null, int? limit = null, string? sort = null, string? aux = null, string? cryptoId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeMapResponseModel?> result = await GetV1ExchangeMapWithHttpInfoAsync(listingStatus, slug, start, limit, sort, aux, cryptoId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// CoinMarketCap ID Map Returns a paginated list of all active cryptocurrency exchanges by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique exchange &#x60;id&#x60; across all endpoints as typical exchange identifiers may change over time. As a convenience you may pass a comma-separated list of exchanges by &#x60;slug&#x60; to filter this list to only those you require or the &#x60;aux&#x60; parameter to slim down the payload.  By default this endpoint returns exchanges that have at least 1 actively tracked market. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered exchanges that are listed but do not yet meet methodology requirements to have tracked markets available via &#x60;listing_status&#x3D;untracked&#x60;. Please review **(3) Listing Tiers** in our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.   **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per call.   **CMC equivalent pages:** No equivalent, this data is only available via API.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active exchanges are returned by default. Pass &#x60;inactive&#x60; to get a list of exchanges that are no longer active. Pass &#x60;untracked&#x60; to get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="slug">Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to id)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cryptoId">Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?crypto_id&#x3D;1&#x60; would only return exchanges that have BTC. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeMapResponseModel"/>&gt;</returns>
        public async Task<ExchangeMapResponseModel?> GetV1ExchangeMapOrDefaultAsync(string? listingStatus = null, string? slug = null, int? start = null, int? limit = null, string? sort = null, string? aux = null, string? cryptoId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeMapResponseModel?>? result = null;
            try 
            {
                result = await GetV1ExchangeMapWithHttpInfoAsync(listingStatus, slug, start, limit, sort, aux, cryptoId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// CoinMarketCap ID Map Returns a paginated list of all active cryptocurrency exchanges by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique exchange &#x60;id&#x60; across all endpoints as typical exchange identifiers may change over time. As a convenience you may pass a comma-separated list of exchanges by &#x60;slug&#x60; to filter this list to only those you require or the &#x60;aux&#x60; parameter to slim down the payload.  By default this endpoint returns exchanges that have at least 1 actively tracked market. You may receive a map of all inactive cryptocurrencies by passing &#x60;listing_status&#x3D;inactive&#x60;. You may also receive a map of registered exchanges that are listed but do not yet meet methodology requirements to have tracked markets available via &#x60;listing_status&#x3D;untracked&#x60;. Please review **(3) Listing Tiers** in our &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://coinmarketcap.com/methodology/\&quot;&gt;methodology documentation&lt;/a&gt; for additional details on listing states.   **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - Basic   - Hobbyist   - Startup   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.   **Plan credit use:** 1 call credit per call.   **CMC equivalent pages:** No equivalent, this data is only available via API.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingStatus">Only active exchanges are returned by default. Pass &#x60;inactive&#x60; to get a list of exchanges that are no longer active. Pass &#x60;untracked&#x60; to get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values. (optional, default to &quot;active&quot;)</param>
        /// <param name="slug">Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional)</param>
        /// <param name="sort">What field to sort the list of exchanges by. (optional, default to id)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;first_historical_data,last_historical_data,is_active,status&#x60; to include all auxiliary fields. (optional, default to &quot;first_historical_data,last_historical_data,is_active&quot;)</param>
        /// <param name="cryptoId">Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?crypto_id&#x3D;1&#x60; would only return exchanges that have BTC. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ExchangeMapResponseModel"/></returns>
        public async Task<ApiResponse<ExchangeMapResponseModel?>> GetV1ExchangeMapWithHttpInfoAsync(string? listingStatus = null, string? slug = null, int? start = null, int? limit = null, string? sort = null, string? aux = null, string? cryptoId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/exchange/map";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (listingStatus != null)
                    parseQueryString["listing_status"] = Uri.EscapeDataString(listingStatus.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (sort != null)
                    parseQueryString["sort"] = Uri.EscapeDataString(sort.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                if (cryptoId != null)
                    parseQueryString["crypto_id"] = Uri.EscapeDataString(cryptoId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/exchange/map"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<ExchangeMapResponseModel?> apiResponse = new ApiResponse<ExchangeMapResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ExchangeMapResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Market Pairs Latest Returns all active market pairs that CoinMarketCap tracks for a given exchange. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.&#39;    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our exchange level active markets pages like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A CoinMarketCap exchange ID. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass an exchange \&quot;slug\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance\&quot;. One \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeMarketPairsLatestResponseModel"/>&gt;</returns>
        public async Task<ExchangeMarketPairsLatestResponseModel?> GetV1ExchangeMarketpairsLatestAsync(string? id = null, string? slug = null, int? start = null, int? limit = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeMarketPairsLatestResponseModel?> result = await GetV1ExchangeMarketpairsLatestWithHttpInfoAsync(id, slug, start, limit, aux, matchedId, matchedSymbol, category, feeType, convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Market Pairs Latest Returns all active market pairs that CoinMarketCap tracks for a given exchange. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.&#39;    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our exchange level active markets pages like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A CoinMarketCap exchange ID. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass an exchange \&quot;slug\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance\&quot;. One \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeMarketPairsLatestResponseModel"/>&gt;</returns>
        public async Task<ExchangeMarketPairsLatestResponseModel?> GetV1ExchangeMarketpairsLatestOrDefaultAsync(string? id = null, string? slug = null, int? start = null, int? limit = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeMarketPairsLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1ExchangeMarketpairsLatestWithHttpInfoAsync(id, slug, start, limit, aux, matchedId, matchedSymbol, category, feeType, convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Market Pairs Latest Returns all active market pairs that CoinMarketCap tracks for a given exchange. The latest price and volume information is returned for each market. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.&#39;    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard   - Professional   - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Our exchange level active markets pages like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A CoinMarketCap exchange ID. Example: \&quot;1\&quot; (optional)</param>
        /// <param name="slug">Alternatively pass an exchange \&quot;slug\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance\&quot;. One \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="start">Optionally offset the start (1-based index) of the paginated list of items to return. (optional, default to 1)</param>
        /// <param name="limit">Optionally specify the number of results to return. Use this parameter and the \&quot;start\&quot; parameter to determine your own pagination size. (optional, default to 100)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputation&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,category,fee_type&quot;)</param>
        /// <param name="matchedId">Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example &#x60;?matched_id&#x3D;2781&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_symbol&#x60; is used. (optional)</param>
        /// <param name="matchedSymbol">Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example &#x60;?matched_symbol&#x3D;USD&#x60; would only return BTC markets that matched: \&quot;BTC/USD\&quot; or \&quot;USD/BTC\&quot; for the requested exchange. This parameter cannot be used when &#x60;matched_id&#x60; is used. (optional)</param>
        /// <param name="category">The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC. (optional, default to all)</param>
        /// <param name="feeType">The fee type the exchange enforces for this market. (optional, default to all)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ExchangeMarketPairsLatestResponseModel"/></returns>
        public async Task<ApiResponse<ExchangeMarketPairsLatestResponseModel?>> GetV1ExchangeMarketpairsLatestWithHttpInfoAsync(string? id = null, string? slug = null, int? start = null, int? limit = null, string? aux = null, string? matchedId = null, string? matchedSymbol = null, string? category = null, string? feeType = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/exchange/market-pairs/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (start != null)
                    parseQueryString["start"] = Uri.EscapeDataString(start.ToString()!);

                if (limit != null)
                    parseQueryString["limit"] = Uri.EscapeDataString(limit.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                if (matchedId != null)
                    parseQueryString["matched_id"] = Uri.EscapeDataString(matchedId.ToString()!);

                if (matchedSymbol != null)
                    parseQueryString["matched_symbol"] = Uri.EscapeDataString(matchedSymbol.ToString()!);

                if (category != null)
                    parseQueryString["category"] = Uri.EscapeDataString(category.ToString()!);

                if (feeType != null)
                    parseQueryString["fee_type"] = Uri.EscapeDataString(feeType.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/exchange/market-pairs/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<ExchangeMarketPairsLatestResponseModel?> apiResponse = new ApiResponse<ExchangeMarketPairsLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ExchangeMarketPairsLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historic quotes for any exchange based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  - This endpoint supports requesting multiple exchanges in the same call. Please note the API response will be wrapped in an additional object in this case.     **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (Up to 12 months)   - Enterprise (Up to 6 years)  **Note:** You may use the /exchange/map endpoint to receive a list of earliest historical dates that may be fetched for each exchange as  &#x60;first_historical_data&#x60;. This timestamp will either be the date CoinMarketCap first started tracking the exchange or 2018-04-26T00:45:00.000Z, the earliest date this type of historical data is available for.    **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** No equivalent, this data is only available via API outside of our volume sparkline charts in [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated exchange CoinMarketCap ids. Example: \&quot;24,270\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,kraken\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeHistoricalQuotesResponseModel"/>&gt;</returns>
        public async Task<ExchangeHistoricalQuotesResponseModel?> GetV1ExchangeQuotesHistoricalAsync(string? id = null, string? slug = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeHistoricalQuotesResponseModel?> result = await GetV1ExchangeQuotesHistoricalWithHttpInfoAsync(id, slug, timeStart, timeEnd, count, interval, convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historic quotes for any exchange based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  - This endpoint supports requesting multiple exchanges in the same call. Please note the API response will be wrapped in an additional object in this case.     **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (Up to 12 months)   - Enterprise (Up to 6 years)  **Note:** You may use the /exchange/map endpoint to receive a list of earliest historical dates that may be fetched for each exchange as  &#x60;first_historical_data&#x60;. This timestamp will either be the date CoinMarketCap first started tracking the exchange or 2018-04-26T00:45:00.000Z, the earliest date this type of historical data is available for.    **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** No equivalent, this data is only available via API outside of our volume sparkline charts in [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated exchange CoinMarketCap ids. Example: \&quot;24,270\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,kraken\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeHistoricalQuotesResponseModel"/>&gt;</returns>
        public async Task<ExchangeHistoricalQuotesResponseModel?> GetV1ExchangeQuotesHistoricalOrDefaultAsync(string? id = null, string? slug = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeHistoricalQuotesResponseModel?>? result = null;
            try 
            {
                result = await GetV1ExchangeQuotesHistoricalWithHttpInfoAsync(id, slug, timeStart, timeEnd, count, interval, convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historic quotes for any exchange based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned.   - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;.   - If \&quot;time_end\&quot; is not supplied, it defaults to the current time.   - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned.   - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  - This endpoint supports requesting multiple exchanges in the same call. Please note the API response will be wrapped in an additional object in this case.     **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.    The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:**   - ~~Basic~~   - ~~Hobbyist~~   - ~~Startup~~   - Standard (3 months)   - Professional (Up to 12 months)   - Enterprise (Up to 6 years)  **Note:** You may use the /exchange/map endpoint to receive a list of earliest historical dates that may be fetched for each exchange as  &#x60;first_historical_data&#x60;. This timestamp will either be the date CoinMarketCap first started tracking the exchange or 2018-04-26T00:45:00.000Z, the earliest date this type of historical data is available for.    **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** No equivalent, this data is only available via API outside of our volume sparkline charts in [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated exchange CoinMarketCap ids. Example: \&quot;24,270\&quot; (optional)</param>
        /// <param name="slug">Alternatively, one or more comma-separated exchange names in URL friendly shorthand \&quot;slug\&quot; format (all lowercase, spaces replaced with hyphens). Example: \&quot;binance,kraken\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 5m)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ExchangeHistoricalQuotesResponseModel"/></returns>
        public async Task<ApiResponse<ExchangeHistoricalQuotesResponseModel?>> GetV1ExchangeQuotesHistoricalWithHttpInfoAsync(string? id = null, string? slug = null, string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/exchange/quotes/historical";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (timeStart != null)
                    parseQueryString["time_start"] = Uri.EscapeDataString(timeStart.ToString()!);

                if (timeEnd != null)
                    parseQueryString["time_end"] = Uri.EscapeDataString(timeEnd.ToString()!);

                if (count != null)
                    parseQueryString["count"] = Uri.EscapeDataString(count.ToString()!);

                if (interval != null)
                    parseQueryString["interval"] = Uri.EscapeDataString(interval.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/exchange/quotes/historical"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<ExchangeHistoricalQuotesResponseModel?> apiResponse = new ApiResponse<ExchangeHistoricalQuotesResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ExchangeHistoricalQuotesResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Quotes Latest Returns the latest aggregate market data for 1 or more exchanges. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data summary for specific exchanges like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap exchange IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, pass a comma-separated list of exchange \&quot;slugs\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeQuotesLatestResponseModel"/>&gt;</returns>
        public async Task<ExchangeQuotesLatestResponseModel?> GetV1ExchangeQuotesLatestAsync(string? id = null, string? slug = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeQuotesLatestResponseModel?> result = await GetV1ExchangeQuotesLatestWithHttpInfoAsync(id, slug, convert, convertId, aux, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Quotes Latest Returns the latest aggregate market data for 1 or more exchanges. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data summary for specific exchanges like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap exchange IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, pass a comma-separated list of exchange \&quot;slugs\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ExchangeQuotesLatestResponseModel"/>&gt;</returns>
        public async Task<ExchangeQuotesLatestResponseModel?> GetV1ExchangeQuotesLatestOrDefaultAsync(string? id = null, string? slug = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ExchangeQuotesLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1ExchangeQuotesLatestWithHttpInfoAsync(id, slug, convert, convertId, aux, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Quotes Latest Returns the latest aggregate market data for 1 or more exchanges. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 60 seconds.   **Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per &#x60;convert&#x60; option beyond the first.   **CMC equivalent pages:** Latest market data summary for specific exchanges like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">One or more comma-separated CoinMarketCap exchange IDs. Example: \&quot;1,2\&quot; (optional)</param>
        /// <param name="slug">Alternatively, pass a comma-separated list of exchange \&quot;slugs\&quot; (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \&quot;binance,gdax\&quot;. At least one \&quot;id\&quot; *or* \&quot;slug\&quot; is required. (optional)</param>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&#x60; to include all auxiliary fields. (optional, default to &quot;num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ExchangeQuotesLatestResponseModel"/></returns>
        public async Task<ApiResponse<ExchangeQuotesLatestResponseModel?>> GetV1ExchangeQuotesLatestWithHttpInfoAsync(string? id = null, string? slug = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using HttpRequestMessage request = new HttpRequestMessage();

                UriBuilder uriBuilder = new UriBuilder();
                uriBuilder.Host = HttpClient.BaseAddress!.Host;
                uriBuilder.Scheme = ClientUtils.SCHEME;
                uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/exchange/quotes/latest";

                System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                if (id != null)
                    parseQueryString["id"] = Uri.EscapeDataString(id.ToString()!);

                if (slug != null)
                    parseQueryString["slug"] = Uri.EscapeDataString(slug.ToString()!);

                if (convert != null)
                    parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                if (convertId != null)
                    parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                if (aux != null)
                    parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                uriBuilder.Query = parseQueryString.ToString();

                MultipartContent multipartContent = new MultipartContent();

                request.Content = multipartContent;

                List<TokenBase> tokens = new List<TokenBase>();
                    
                ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                
                tokens.Add(apiKey);
                
                apiKey.UseInHeader(request, "X-CMC_PRO_API_KEY");
                
                request.RequestUri = uriBuilder.Uri;
                
                string[] accepts = new string[] { 
                    "*/*" 
                };
                
                string? accept = ClientUtils.SelectHeaderAccept(accepts);

                if (accept != null)
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                
                request.Method = HttpMethod.Get;
                
                using HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                DateTime requestedAt = DateTime.UtcNow;

                string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                if (ApiResponded != null)
                {
                    try
                    {
                        ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/exchange/quotes/latest"));
                    }
                    catch(Exception e)
                    {
                        Logger.LogError(e, "An error occured while invoking ApiResponded.");
                    }
                }

                ApiResponse<ExchangeQuotesLatestResponseModel?> apiResponse = new ApiResponse<ExchangeQuotesLatestResponseModel?>(responseMessage, responseContent);

                if (apiResponse.IsSuccessStatusCode)
                    apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ExchangeQuotesLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                else if (apiResponse.StatusCode == HttpStatusCode.TooManyRequests)
                    foreach(TokenBase token in tokens)
                        token.BeginRateLimit();

                return apiResponse;
            } 
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }
    }
}
