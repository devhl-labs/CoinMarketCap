// <auto-generated>
/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using devhl.CoinMarketCap.Client;
using devhl.CoinMarketCap.Model;

namespace devhl.CoinMarketCap.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalMetricsApi : IApi
    {
        /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historical global cryptocurrency market metrics based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned. - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;. - If \&quot;time_end\&quot; is not supplied, it defaults to the current time. - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned. - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.      The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up).   **CMC equivalent pages:** Our Total Market Capitalization global chart [coinmarketcap.com/charts/](https://coinmarketcap.com/charts/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 1d)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;GlobalMetricsQuotesHistoricResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<GlobalMetricsQuotesHistoricResponseModel?>> GetV1GlobalmetricsQuotesHistoricalWithHttpInfoAsync(string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historical global cryptocurrency market metrics based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned. - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;. - If \&quot;time_end\&quot; is not supplied, it defaults to the current time. - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned. - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.      The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up).   **CMC equivalent pages:** Our Total Market Capitalization global chart [coinmarketcap.com/charts/](https://coinmarketcap.com/charts/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 1d)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;GlobalMetricsQuotesHistoricResponseModel&gt;</returns>
        Task<GlobalMetricsQuotesHistoricResponseModel?> GetV1GlobalmetricsQuotesHistoricalAsync(string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Historical
        /// </summary>
        /// <remarks>
        /// Returns an interval of historical global cryptocurrency market metrics based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned. - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;. - If \&quot;time_end\&quot; is not supplied, it defaults to the current time. - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned. - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.      The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up).   **CMC equivalent pages:** Our Total Market Capitalization global chart [coinmarketcap.com/charts/](https://coinmarketcap.com/charts/).  
        /// </remarks>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 1d)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;GlobalMetricsQuotesHistoricResponseModel?&gt;</returns>
        Task<GlobalMetricsQuotesHistoricResponseModel?> GetV1GlobalmetricsQuotesHistoricalOrDefaultAsync(string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null);

                /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest global cryptocurrency market metrics. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Hobbyist - Startup - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 5 minute.    **Plan credit use:** 1 call credit per call and 1 call credit per &#x60;convert&#x60; option beyond the first.    **CMC equivalent pages:** The latest aggregate global market stats ticker across all CMC pages like [coinmarketcap.com](https://coinmarketcap.com/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;GlobalMetricsQuotesLatestResponseModel?&gt;&gt;</returns>
        Task<ApiResponse<GlobalMetricsQuotesLatestResponseModel?>> GetV1GlobalmetricsQuotesLatestWithHttpInfoAsync(string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest global cryptocurrency market metrics. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Hobbyist - Startup - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 5 minute.    **Plan credit use:** 1 call credit per call and 1 call credit per &#x60;convert&#x60; option beyond the first.    **CMC equivalent pages:** The latest aggregate global market stats ticker across all CMC pages like [coinmarketcap.com](https://coinmarketcap.com/).  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;GlobalMetricsQuotesLatestResponseModel&gt;</returns>
        Task<GlobalMetricsQuotesLatestResponseModel?> GetV1GlobalmetricsQuotesLatestAsync(string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Quotes Latest
        /// </summary>
        /// <remarks>
        /// Returns the latest global cryptocurrency market metrics. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Hobbyist - Startup - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 5 minute.    **Plan credit use:** 1 call credit per call and 1 call credit per &#x60;convert&#x60; option beyond the first.    **CMC equivalent pages:** The latest aggregate global market stats ticker across all CMC pages like [coinmarketcap.com](https://coinmarketcap.com/).  
        /// </remarks>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;GlobalMetricsQuotesLatestResponseModel?&gt;</returns>
        Task<GlobalMetricsQuotesLatestResponseModel?> GetV1GlobalmetricsQuotesLatestOrDefaultAsync(string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalMetricsApi : IGlobalMetricsApi
    {
        /// <summary>
        /// An event to track the health of the server. 
        /// If you store these event args, be sure to purge old event args to prevent a memory leak.
        /// </summary>
        public event ClientUtils.EventHandler<ApiResponseEventArgs>? ApiResponded;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GlobalMetricsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalMetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalMetricsApi(ILogger<GlobalMetricsApi> logger, HttpClient httpClient, 
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            Logger = logger;
            HttpClient = httpClient;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historical global cryptocurrency market metrics based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned. - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;. - If \&quot;time_end\&quot; is not supplied, it defaults to the current time. - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned. - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.      The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up).   **CMC equivalent pages:** Our Total Market Capitalization global chart [coinmarketcap.com/charts/](https://coinmarketcap.com/charts/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 1d)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GlobalMetricsQuotesHistoricResponseModel"/>&gt;</returns>
        public async Task<GlobalMetricsQuotesHistoricResponseModel?> GetV1GlobalmetricsQuotesHistoricalAsync(string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<GlobalMetricsQuotesHistoricResponseModel?> result = await GetV1GlobalmetricsQuotesHistoricalWithHttpInfoAsync(timeStart, timeEnd, count, interval, convert, convertId, aux, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historical global cryptocurrency market metrics based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned. - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;. - If \&quot;time_end\&quot; is not supplied, it defaults to the current time. - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned. - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.      The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up).   **CMC equivalent pages:** Our Total Market Capitalization global chart [coinmarketcap.com/charts/](https://coinmarketcap.com/charts/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 1d)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GlobalMetricsQuotesHistoricResponseModel"/>&gt;</returns>
        public async Task<GlobalMetricsQuotesHistoricResponseModel?> GetV1GlobalmetricsQuotesHistoricalOrDefaultAsync(string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<GlobalMetricsQuotesHistoricResponseModel?>? result = null;
            try 
            {
                result = await GetV1GlobalmetricsQuotesHistoricalWithHttpInfoAsync(timeStart, timeEnd, count, interval, convert, convertId, aux, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Quotes Historical Returns an interval of historical global cryptocurrency market metrics based on time and interval parameters.  **Technical Notes** - A historic quote for every \&quot;interval\&quot; period between your \&quot;time_start\&quot; and \&quot;time_end\&quot; will be returned. - If a \&quot;time_start\&quot; is not supplied, the \&quot;interval\&quot; will be applied in reverse from \&quot;time_end\&quot;. - If \&quot;time_end\&quot; is not supplied, it defaults to the current time. - At each \&quot;interval\&quot; period, the historic quote that is closest in time to the requested time will be returned. - If no historic quotes are available in a given \&quot;interval\&quot; period up until the next interval period, it will be skipped.  **Interval Options**   There are 2 types of time interval formats that may be used for \&quot;interval\&quot;.    The first are calendar year and time constants in UTC time:   **\&quot;hourly\&quot;** - Get the first quote available at the beginning of each calendar hour.   **\&quot;daily\&quot;** - Get the first quote available at the beginning of each calendar day.   **\&quot;weekly\&quot;** - Get the first quote available at the beginning of each calendar week.   **\&quot;monthly\&quot;** - Get the first quote available at the beginning of each calendar month.   **\&quot;yearly\&quot;** - Get the first quote available at the beginning of each calendar year.      The second are relative time intervals.   **\&quot;m\&quot;**: Get the first quote available every \&quot;m\&quot; minutes (60 second intervals). Supported minutes are: \&quot;5m\&quot;, \&quot;10m\&quot;, \&quot;15m\&quot;, \&quot;30m\&quot;, \&quot;45m\&quot;.   **\&quot;h\&quot;**: Get the first quote available every \&quot;h\&quot; hours (3600 second intervals). Supported hour intervals are: \&quot;1h\&quot;, \&quot;2h\&quot;, \&quot;3h\&quot;, \&quot;4h\&quot;, \&quot;6h\&quot;, \&quot;12h\&quot;.   **\&quot;d\&quot;**: Get the first quote available every \&quot;d\&quot; days (86400 second intervals). Supported day intervals are: \&quot;1d\&quot;, \&quot;2d\&quot;, \&quot;3d\&quot;, \&quot;7d\&quot;, \&quot;14d\&quot;, \&quot;15d\&quot;, \&quot;30d\&quot;, \&quot;60d\&quot;, \&quot;90d\&quot;, \&quot;365d\&quot;.    **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - ~~Basic~~ - ~~Hobbyist~~ - ~~Startup~~ - Standard (3 months) - Professional (12 months) - Enterprise (Up to 6 years)  **Cache / Update frequency:** Every 5 minutes.   **Plan credit use:** 1 call credit per 100 historical data points returned (rounded up).   **CMC equivalent pages:** Our Total Market Capitalization global chart [coinmarketcap.com/charts/](https://coinmarketcap.com/charts/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we&#39;ll return quotes calculated in reverse from \&quot;time_end\&quot;. (optional)</param>
        /// <param name="timeEnd">Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we&#39;ll default to the current time. If no \&quot;time_start\&quot; is passed, we return quotes in reverse order starting from this time. (optional)</param>
        /// <param name="count">The number of interval periods to return results for. Optional, required if both \&quot;time_start\&quot; and \&quot;time_end\&quot; aren&#39;t supplied. The default is 10 items. The current query limit is 10000. (optional, default to 10.0M)</param>
        /// <param name="interval">Interval of time to return data points for. See details in endpoint description. (optional, default to 1d)</param>
        /// <param name="convert">By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="aux">Optionally specify a comma-separated list of supplemental data fields to return. Pass &#x60;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_interval&#x60; to include all auxiliary fields. (optional, default to &quot;btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="GlobalMetricsQuotesHistoricResponseModel"/></returns>
        public async Task<ApiResponse<GlobalMetricsQuotesHistoricResponseModel?>> GetV1GlobalmetricsQuotesHistoricalWithHttpInfoAsync(string? timeStart = null, string? timeEnd = null, decimal? count = null, string? interval = null, string? convert = null, string? convertId = null, string? aux = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/global-metrics/quotes/historical";

                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    if (timeStart != null)
                        parseQueryString["time_start"] = Uri.EscapeDataString(timeStart.ToString()!);

                    if (timeEnd != null)
                        parseQueryString["time_end"] = Uri.EscapeDataString(timeEnd.ToString()!);

                    if (count != null)
                        parseQueryString["count"] = Uri.EscapeDataString(count.ToString()!);

                    if (interval != null)
                        parseQueryString["interval"] = Uri.EscapeDataString(interval.ToString()!);

                    if (convert != null)
                        parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                    if (convertId != null)
                        parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                    if (aux != null)
                        parseQueryString["aux"] = Uri.EscapeDataString(aux.ToString()!);

                    uriBuilder.Query = parseQueryString.ToString();

                    List<TokenBase> tokens = new List<TokenBase>();
                    
                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    
                    tokens.Add(apiKey);
                    
                    apiKey.UseInQuery(request, uriBuilder, parseQueryString, "CMC_PRO_API_KEY");
                    
                    uriBuilder.Query = parseQueryString.ToString();

                    request.RequestUri = uriBuilder.Uri;
                    
                    string[] accepts = new string[] { 
                        "*/*" 
                    };
                    
                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Get; 

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/global-metrics/quotes/historical"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<GlobalMetricsQuotesHistoricResponseModel?> apiResponse = new ApiResponse<GlobalMetricsQuotesHistoricResponseModel?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<GlobalMetricsQuotesHistoricResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }

        /// <summary>
        /// Quotes Latest Returns the latest global cryptocurrency market metrics. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Hobbyist - Startup - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 5 minute.    **Plan credit use:** 1 call credit per call and 1 call credit per &#x60;convert&#x60; option beyond the first.    **CMC equivalent pages:** The latest aggregate global market stats ticker across all CMC pages like [coinmarketcap.com](https://coinmarketcap.com/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GlobalMetricsQuotesLatestResponseModel"/>&gt;</returns>
        public async Task<GlobalMetricsQuotesLatestResponseModel?> GetV1GlobalmetricsQuotesLatestAsync(string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<GlobalMetricsQuotesLatestResponseModel?> result = await GetV1GlobalmetricsQuotesLatestWithHttpInfoAsync(convert, convertId, cancellationToken).ConfigureAwait(false);
            
            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Quotes Latest Returns the latest global cryptocurrency market metrics. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Hobbyist - Startup - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 5 minute.    **Plan credit use:** 1 call credit per call and 1 call credit per &#x60;convert&#x60; option beyond the first.    **CMC equivalent pages:** The latest aggregate global market stats ticker across all CMC pages like [coinmarketcap.com](https://coinmarketcap.com/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="GlobalMetricsQuotesLatestResponseModel"/>&gt;</returns>
        public async Task<GlobalMetricsQuotesLatestResponseModel?> GetV1GlobalmetricsQuotesLatestOrDefaultAsync(string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<GlobalMetricsQuotesLatestResponseModel?>? result = null;
            try 
            {
                result = await GetV1GlobalmetricsQuotesLatestWithHttpInfoAsync(convert, convertId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Quotes Latest Returns the latest global cryptocurrency market metrics. Use the \&quot;convert\&quot; option to return market values in multiple fiat and cryptocurrency conversions in the same call.  **This endpoint is available on the following &lt;a href&#x3D;\&quot;https://coinmarketcap.com/api/features\&quot; target&#x3D;\&quot;_blank\&quot;&gt;API plans&lt;/a&gt;:** - Basic - Hobbyist - Startup - Standard - Professional - Enterprise  **Cache / Update frequency:** Every 5 minute.    **Plan credit use:** 1 call credit per call and 1 call credit per &#x60;convert&#x60; option beyond the first.    **CMC equivalent pages:** The latest aggregate global market stats ticker across all CMC pages like [coinmarketcap.com](https://coinmarketcap.com/).  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="convert">Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \&quot;quote\&quot; object. (optional)</param>
        /// <param name="convertId">Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to &#x60;convert&#x60; outside of ID format. Ex: convert_id&#x3D;1,2781 would replace convert&#x3D;BTC,USD in your query. This parameter cannot be used when &#x60;convert&#x60; is used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="GlobalMetricsQuotesLatestResponseModel"/></returns>
        public async Task<ApiResponse<GlobalMetricsQuotesLatestResponseModel?>> GetV1GlobalmetricsQuotesLatestWithHttpInfoAsync(string? convert = null, string? convertId = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    UriBuilder uriBuilder = new UriBuilder();
                    uriBuilder.Host = HttpClient.BaseAddress!.Host;
                    uriBuilder.Scheme = ClientUtils.SCHEME;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/v1/global-metrics/quotes/latest";

                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    if (convert != null)
                        parseQueryString["convert"] = Uri.EscapeDataString(convert.ToString()!);

                    if (convertId != null)
                        parseQueryString["convert_id"] = Uri.EscapeDataString(convertId.ToString()!);

                    uriBuilder.Query = parseQueryString.ToString();

                    List<TokenBase> tokens = new List<TokenBase>();
                    
                    ApiKeyToken apiKey = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    
                    tokens.Add(apiKey);
                    
                    apiKey.UseInQuery(request, uriBuilder, parseQueryString, "CMC_PRO_API_KEY");
                    
                    uriBuilder.Query = parseQueryString.ToString();

                    request.RequestUri = uriBuilder.Uri;
                    
                    string[] accepts = new string[] { 
                        "*/*" 
                    };
                    
                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));
                    
                    request.Method = HttpMethod.Get; 

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        DateTime requestedAt = DateTime.UtcNow;

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        if (ApiResponded != null)
                        {
                            try
                            {
                                ApiResponded.Invoke(this, new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/v1/global-metrics/quotes/latest"));
                            }
                            catch(Exception e)
                            {
                                Logger.LogError(e, "An error occured while invoking ApiResponded.");
                            }
                        }

                        ApiResponse<GlobalMetricsQuotesLatestResponseModel?> apiResponse = new ApiResponse<GlobalMetricsQuotesLatestResponseModel?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                            apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<GlobalMetricsQuotesLatestResponseModel>(apiResponse.RawContent, ClientUtils.JsonSerializerSettings);
                        else if (apiResponse.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase token in tokens)
                                token.BeginRateLimit();

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                Logger.LogError(e, "An error occured while sending the request to the server.");
                throw;
            }
        }
    }
}
