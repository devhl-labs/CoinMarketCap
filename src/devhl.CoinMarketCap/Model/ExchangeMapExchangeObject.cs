/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// Exchange object description
    /// </summary>
    [DataContract(Name = "Exchange Map - Exchange Object")]
    public partial class ExchangeMapExchangeObject : IEquatable<ExchangeMapExchangeObject>
    {
        /// <summary>
        /// The listing status of the exchange. *This field is only returned if requested through the &#x60;aux&#x60; request parameter.*
        /// </summary>
        /// <value>The listing status of the exchange. *This field is only returned if requested through the &#x60;aux&#x60; request parameter.*</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Inactive for value: inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            Inactive = 2,

            /// <summary>
            /// Enum Untracked for value: untracked
            /// </summary>
            [EnumMember(Value = "untracked")]
            Untracked = 3

        }


        /// <summary>
        /// The listing status of the exchange. *This field is only returned if requested through the &#x60;aux&#x60; request parameter.*
        /// </summary>
        /// <value>The listing status of the exchange. *This field is only returned if requested through the &#x60;aux&#x60; request parameter.*</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeMapExchangeObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExchangeMapExchangeObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeMapExchangeObject" /> class.
        /// </summary>
        /// <param name="id">The unique CoinMarketCap ID for this exchange. (required).</param>
        /// <param name="name">The name of this exchange. (required).</param>
        /// <param name="slug">The web URL friendly shorthand version of this exchange name. (required).</param>
        /// <param name="isActive">1 if this exchange is still being actively tracked and updated, otherwise 0..</param>
        /// <param name="status">The listing status of the exchange. *This field is only returned if requested through the &#x60;aux&#x60; request parameter.*.</param>
        /// <param name="firstHistoricalData">Timestamp (ISO 8601) of the earliest market data record available to query using our historical endpoints. &#x60;null&#x60; if there is no historical data currently available for this exchange..</param>
        /// <param name="lastHistoricalData">Timestamp (ISO 8601) of the latest market data record available to query using our historical endpoints. &#x60;null&#x60; if there is no historical data currently available for this exchange..</param>
        public ExchangeMapExchangeObject(int id = default(int), string name = default(string), string slug = default(string), int isActive = default(int), StatusEnum? status = default(StatusEnum?), DateTime firstHistoricalData = default(DateTime), DateTime lastHistoricalData = default(DateTime))
        {
            this.Id = id;
            this.Name = name;
            this.Slug = slug;
            this.IsActive = isActive;
            this.Status = status;
            this.FirstHistoricalData = firstHistoricalData;
            this.LastHistoricalData = lastHistoricalData;
        }

        /// <summary>
        /// The unique CoinMarketCap ID for this exchange.
        /// </summary>
        /// <value>The unique CoinMarketCap ID for this exchange.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The name of this exchange.
        /// </summary>
        /// <value>The name of this exchange.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The web URL friendly shorthand version of this exchange name.
        /// </summary>
        /// <value>The web URL friendly shorthand version of this exchange name.</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// 1 if this exchange is still being actively tracked and updated, otherwise 0.
        /// </summary>
        /// <value>1 if this exchange is still being actively tracked and updated, otherwise 0.</value>
        [DataMember(Name = "is_active", EmitDefaultValue = false)]
        public int IsActive { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the earliest market data record available to query using our historical endpoints. &#x60;null&#x60; if there is no historical data currently available for this exchange.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the earliest market data record available to query using our historical endpoints. &#x60;null&#x60; if there is no historical data currently available for this exchange.</value>
        [DataMember(Name = "first_historical_data", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FirstHistoricalData { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the latest market data record available to query using our historical endpoints. &#x60;null&#x60; if there is no historical data currently available for this exchange.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the latest market data record available to query using our historical endpoints. &#x60;null&#x60; if there is no historical data currently available for this exchange.</value>
        [DataMember(Name = "last_historical_data", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LastHistoricalData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExchangeMapExchangeObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FirstHistoricalData: ").Append(FirstHistoricalData).Append("\n");
            sb.Append("  LastHistoricalData: ").Append(LastHistoricalData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeMapExchangeObject);
        }

        /// <summary>
        /// Returns true if ExchangeMapExchangeObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeMapExchangeObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeMapExchangeObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.FirstHistoricalData == input.FirstHistoricalData ||
                    (this.FirstHistoricalData != null &&
                    this.FirstHistoricalData.Equals(input.FirstHistoricalData))
                ) && 
                (
                    this.LastHistoricalData == input.LastHistoricalData ||
                    (this.LastHistoricalData != null &&
                    this.LastHistoricalData.Equals(input.LastHistoricalData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.FirstHistoricalData != null)
                    hashCode = hashCode * 59 + this.FirstHistoricalData.GetHashCode();
                if (this.LastHistoricalData != null)
                    hashCode = hashCode * 59 + this.LastHistoricalData.GetHashCode();
                return hashCode;
            }
        }

    }

}
