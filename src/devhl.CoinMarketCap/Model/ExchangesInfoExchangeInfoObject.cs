/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// A results object for each exchange requested. The map key being the id or slug used in the request.
    /// </summary>
    [DataContract(Name = "Exchanges Info - Exchange Info object")]
    public partial class ExchangesInfoExchangeInfoObject : IEquatable<ExchangesInfoExchangeInfoObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesInfoExchangeInfoObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExchangesInfoExchangeInfoObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesInfoExchangeInfoObject" /> class.
        /// </summary>
        /// <param name="id">The unique CoinMarketCap ID for this exchange. (required).</param>
        /// <param name="name">The name of this exchange. (required).</param>
        /// <param name="slug">The web URL friendly shorthand version of the exchange name. (required).</param>
        /// <param name="logo">Link to a CoinMarketCap hosted logo png for this exchange. 64px is default size returned. Replace \&quot;64x64\&quot; in the image path with these alternative sizes: 16, 32, 64, 128, 200 (required).</param>
        /// <param name="description">A CoinMarketCap supplied brief description of this cryptocurrency exchange. This field will return null if a description is not available. (required).</param>
        /// <param name="dateLaunched">Timestamp (ISO 8601) of the launch date for this exchange. (required).</param>
        /// <param name="notice">A [Markdown](https://commonmark.org/help/) formatted message outlining a condition that is impacting the availability of the exchange&#39;s market data or the secure use of the exchange, otherwise null. This may include a maintenance event on the exchange&#39;s end or CoinMarketCap&#39;s end, an alert about reported issues with withdrawls from this exchange, or another condition that may be impacting the exchange and it&#39;s markets. If present, this notice is also displayed in an alert banner at the top of the exchange&#39;s page on coinmarketcap.com. (required).</param>
        /// <param name="urls">urls (required).</param>
        public ExchangesInfoExchangeInfoObject(int id = default(int), string name = default(string), string slug = default(string), string logo = default(string), string description = default(string), DateTime dateLaunched = default(DateTime), string notice = default(string), ExchangesInfoURLsObject urls = default(ExchangesInfoURLsObject))
        {
            this.Id = id;
            this.Name = name;
            this.Slug = slug;
            this.Logo = logo;
            this.Description = description;
            this.DateLaunched = dateLaunched;
            this.Notice = notice;
            // to ensure "urls" is required (not null)
            if (urls == null) {
                throw new ArgumentNullException("urls is a required property for ExchangesInfoExchangeInfoObject and cannot be null");
            }
            this.Urls = urls;
        }

        /// <summary>
        /// The unique CoinMarketCap ID for this exchange.
        /// </summary>
        /// <value>The unique CoinMarketCap ID for this exchange.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The name of this exchange.
        /// </summary>
        /// <value>The name of this exchange.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The web URL friendly shorthand version of the exchange name.
        /// </summary>
        /// <value>The web URL friendly shorthand version of the exchange name.</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Link to a CoinMarketCap hosted logo png for this exchange. 64px is default size returned. Replace \&quot;64x64\&quot; in the image path with these alternative sizes: 16, 32, 64, 128, 200
        /// </summary>
        /// <value>Link to a CoinMarketCap hosted logo png for this exchange. 64px is default size returned. Replace \&quot;64x64\&quot; in the image path with these alternative sizes: 16, 32, 64, 128, 200</value>
        [DataMember(Name = "logo", IsRequired = true, EmitDefaultValue = false)]
        public string Logo { get; set; }

        /// <summary>
        /// A CoinMarketCap supplied brief description of this cryptocurrency exchange. This field will return null if a description is not available.
        /// </summary>
        /// <value>A CoinMarketCap supplied brief description of this cryptocurrency exchange. This field will return null if a description is not available.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the launch date for this exchange.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the launch date for this exchange.</value>
        [DataMember(Name = "date_launched", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateLaunched { get; set; }

        /// <summary>
        /// A [Markdown](https://commonmark.org/help/) formatted message outlining a condition that is impacting the availability of the exchange&#39;s market data or the secure use of the exchange, otherwise null. This may include a maintenance event on the exchange&#39;s end or CoinMarketCap&#39;s end, an alert about reported issues with withdrawls from this exchange, or another condition that may be impacting the exchange and it&#39;s markets. If present, this notice is also displayed in an alert banner at the top of the exchange&#39;s page on coinmarketcap.com.
        /// </summary>
        /// <value>A [Markdown](https://commonmark.org/help/) formatted message outlining a condition that is impacting the availability of the exchange&#39;s market data or the secure use of the exchange, otherwise null. This may include a maintenance event on the exchange&#39;s end or CoinMarketCap&#39;s end, an alert about reported issues with withdrawls from this exchange, or another condition that may be impacting the exchange and it&#39;s markets. If present, this notice is also displayed in an alert banner at the top of the exchange&#39;s page on coinmarketcap.com.</value>
        [DataMember(Name = "notice", IsRequired = true, EmitDefaultValue = false)]
        public string Notice { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", IsRequired = true, EmitDefaultValue = false)]
        public ExchangesInfoURLsObject Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExchangesInfoExchangeInfoObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateLaunched: ").Append(DateLaunched).Append("\n");
            sb.Append("  Notice: ").Append(Notice).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangesInfoExchangeInfoObject);
        }

        /// <summary>
        /// Returns true if ExchangesInfoExchangeInfoObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangesInfoExchangeInfoObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangesInfoExchangeInfoObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DateLaunched == input.DateLaunched ||
                    (this.DateLaunched != null &&
                    this.DateLaunched.Equals(input.DateLaunched))
                ) && 
                (
                    this.Notice == input.Notice ||
                    (this.Notice != null &&
                    this.Notice.Equals(input.Notice))
                ) && 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DateLaunched != null)
                {
                    hashCode = (hashCode * 59) + this.DateLaunched.GetHashCode();
                }
                if (this.Notice != null)
                {
                    hashCode = (hashCode * 59) + this.Notice.GetHashCode();
                }
                if (this.Urls != null)
                {
                    hashCode = (hashCode * 59) + this.Urls.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
