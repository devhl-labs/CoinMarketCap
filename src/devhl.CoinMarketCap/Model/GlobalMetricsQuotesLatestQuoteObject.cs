/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// A market quote in the currency conversion option.
    /// </summary>
    [DataContract(Name = "Global Metrics Quotes Latest - Quote object")]
    public partial class GlobalMetricsQuotesLatestQuoteObject : IEquatable<GlobalMetricsQuotesLatestQuoteObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalMetricsQuotesLatestQuoteObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GlobalMetricsQuotesLatestQuoteObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalMetricsQuotesLatestQuoteObject" /> class.
        /// </summary>
        /// <param name="totalMarketCap">The sum of all individual cryptocurrency market capitalizations in the requested currency. (required).</param>
        /// <param name="totalVolume24h">The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies in the requested currency. (required).</param>
        /// <param name="totalVolume24hReported">The sum of rolling 24 hour reported volume for all cryptocurrencies in the requested currency. (required).</param>
        /// <param name="altcoinVolume24h">The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies excluding Bitcoin in the requested currency. (required).</param>
        /// <param name="altcoinVolume24hReported">The sum of rolling 24 hour reported volume for all cryptocurrencies excluding Bitcoin in the requested currency. (required).</param>
        /// <param name="altcoinMarketCap">The sum of all individual cryptocurrency market capitalizations excluding Bitcoin in the requested currency. (required).</param>
        /// <param name="lastUpdated">Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced. (required).</param>
        public GlobalMetricsQuotesLatestQuoteObject(decimal totalMarketCap = default(decimal), decimal totalVolume24h = default(decimal), decimal totalVolume24hReported = default(decimal), decimal altcoinVolume24h = default(decimal), decimal altcoinVolume24hReported = default(decimal), decimal altcoinMarketCap = default(decimal), DateTime lastUpdated = default(DateTime))
        {
            this.TotalMarketCap = totalMarketCap;
            this.TotalVolume24h = totalVolume24h;
            this.TotalVolume24hReported = totalVolume24hReported;
            this.AltcoinVolume24h = altcoinVolume24h;
            this.AltcoinVolume24hReported = altcoinVolume24hReported;
            this.AltcoinMarketCap = altcoinMarketCap;
            this.LastUpdated = lastUpdated;
        }

        /// <summary>
        /// The sum of all individual cryptocurrency market capitalizations in the requested currency.
        /// </summary>
        /// <value>The sum of all individual cryptocurrency market capitalizations in the requested currency.</value>
        [DataMember(Name = "total_market_cap", IsRequired = true, EmitDefaultValue = false)]
        public decimal TotalMarketCap { get; set; }

        /// <summary>
        /// The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies in the requested currency.
        /// </summary>
        /// <value>The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies in the requested currency.</value>
        [DataMember(Name = "total_volume_24h", IsRequired = true, EmitDefaultValue = false)]
        public decimal TotalVolume24h { get; set; }

        /// <summary>
        /// The sum of rolling 24 hour reported volume for all cryptocurrencies in the requested currency.
        /// </summary>
        /// <value>The sum of rolling 24 hour reported volume for all cryptocurrencies in the requested currency.</value>
        [DataMember(Name = "total_volume_24h_reported", IsRequired = true, EmitDefaultValue = false)]
        public decimal TotalVolume24hReported { get; set; }

        /// <summary>
        /// The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies excluding Bitcoin in the requested currency.
        /// </summary>
        /// <value>The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies excluding Bitcoin in the requested currency.</value>
        [DataMember(Name = "altcoin_volume_24h", IsRequired = true, EmitDefaultValue = false)]
        public decimal AltcoinVolume24h { get; set; }

        /// <summary>
        /// The sum of rolling 24 hour reported volume for all cryptocurrencies excluding Bitcoin in the requested currency.
        /// </summary>
        /// <value>The sum of rolling 24 hour reported volume for all cryptocurrencies excluding Bitcoin in the requested currency.</value>
        [DataMember(Name = "altcoin_volume_24h_reported", IsRequired = true, EmitDefaultValue = false)]
        public decimal AltcoinVolume24hReported { get; set; }

        /// <summary>
        /// The sum of all individual cryptocurrency market capitalizations excluding Bitcoin in the requested currency.
        /// </summary>
        /// <value>The sum of all individual cryptocurrency market capitalizations excluding Bitcoin in the requested currency.</value>
        [DataMember(Name = "altcoin_market_cap", IsRequired = true, EmitDefaultValue = false)]
        public decimal AltcoinMarketCap { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced.</value>
        [DataMember(Name = "last_updated", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlobalMetricsQuotesLatestQuoteObject {\n");
            sb.Append("  TotalMarketCap: ").Append(TotalMarketCap).Append("\n");
            sb.Append("  TotalVolume24h: ").Append(TotalVolume24h).Append("\n");
            sb.Append("  TotalVolume24hReported: ").Append(TotalVolume24hReported).Append("\n");
            sb.Append("  AltcoinVolume24h: ").Append(AltcoinVolume24h).Append("\n");
            sb.Append("  AltcoinVolume24hReported: ").Append(AltcoinVolume24hReported).Append("\n");
            sb.Append("  AltcoinMarketCap: ").Append(AltcoinMarketCap).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlobalMetricsQuotesLatestQuoteObject);
        }

        /// <summary>
        /// Returns true if GlobalMetricsQuotesLatestQuoteObject instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalMetricsQuotesLatestQuoteObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalMetricsQuotesLatestQuoteObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalMarketCap == input.TotalMarketCap ||
                    this.TotalMarketCap.Equals(input.TotalMarketCap)
                ) && 
                (
                    this.TotalVolume24h == input.TotalVolume24h ||
                    this.TotalVolume24h.Equals(input.TotalVolume24h)
                ) && 
                (
                    this.TotalVolume24hReported == input.TotalVolume24hReported ||
                    this.TotalVolume24hReported.Equals(input.TotalVolume24hReported)
                ) && 
                (
                    this.AltcoinVolume24h == input.AltcoinVolume24h ||
                    this.AltcoinVolume24h.Equals(input.AltcoinVolume24h)
                ) && 
                (
                    this.AltcoinVolume24hReported == input.AltcoinVolume24hReported ||
                    this.AltcoinVolume24hReported.Equals(input.AltcoinVolume24hReported)
                ) && 
                (
                    this.AltcoinMarketCap == input.AltcoinMarketCap ||
                    this.AltcoinMarketCap.Equals(input.AltcoinMarketCap)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TotalMarketCap.GetHashCode();
                hashCode = hashCode * 59 + this.TotalVolume24h.GetHashCode();
                hashCode = hashCode * 59 + this.TotalVolume24hReported.GetHashCode();
                hashCode = hashCode * 59 + this.AltcoinVolume24h.GetHashCode();
                hashCode = hashCode * 59 + this.AltcoinVolume24hReported.GetHashCode();
                hashCode = hashCode * 59 + this.AltcoinMarketCap.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                return hashCode;
            }
        }

    }

}
