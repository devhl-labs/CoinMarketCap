/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// The market details for the current interval and currency conversion option. The map key being the curency symbol.
    /// </summary>
    [DataContract(Name = "Cryptocurrency Quotes Historical - Currency Quote object")]
    public partial class CryptocurrencyQuotesHistoricalCurrencyQuoteObject : IEquatable<CryptocurrencyQuotesHistoricalCurrencyQuoteObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrencyQuotesHistoricalCurrencyQuoteObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptocurrencyQuotesHistoricalCurrencyQuoteObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrencyQuotesHistoricalCurrencyQuoteObject" /> class.
        /// </summary>
        /// <param name="price">Price at this interval quote. (required).</param>
        /// <param name="volume24hr">Aggregate 24 hour adjusted volume for all market pairs tracked for this cryptocurrency at the current historical interval. (required).</param>
        /// <param name="marketCap">Number of market pairs available at the current historical interval. (required).</param>
        /// <param name="timestamp">Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced for this conversion. (required).</param>
        public CryptocurrencyQuotesHistoricalCurrencyQuoteObject(decimal price = default(decimal), decimal volume24hr = default(decimal), decimal marketCap = default(decimal), DateTime timestamp = default(DateTime))
        {
            this.Price = price;
            this.Volume24hr = volume24hr;
            this.MarketCap = marketCap;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Price at this interval quote.
        /// </summary>
        /// <value>Price at this interval quote.</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Aggregate 24 hour adjusted volume for all market pairs tracked for this cryptocurrency at the current historical interval.
        /// </summary>
        /// <value>Aggregate 24 hour adjusted volume for all market pairs tracked for this cryptocurrency at the current historical interval.</value>
        [DataMember(Name = "volume_24hr", IsRequired = true, EmitDefaultValue = false)]
        public decimal Volume24hr { get; set; }

        /// <summary>
        /// Number of market pairs available at the current historical interval.
        /// </summary>
        /// <value>Number of market pairs available at the current historical interval.</value>
        [DataMember(Name = "market_cap", IsRequired = true, EmitDefaultValue = false)]
        public decimal MarketCap { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced for this conversion.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced for this conversion.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CryptocurrencyQuotesHistoricalCurrencyQuoteObject {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Volume24hr: ").Append(Volume24hr).Append("\n");
            sb.Append("  MarketCap: ").Append(MarketCap).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptocurrencyQuotesHistoricalCurrencyQuoteObject);
        }

        /// <summary>
        /// Returns true if CryptocurrencyQuotesHistoricalCurrencyQuoteObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptocurrencyQuotesHistoricalCurrencyQuoteObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptocurrencyQuotesHistoricalCurrencyQuoteObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Volume24hr == input.Volume24hr ||
                    this.Volume24hr.Equals(input.Volume24hr)
                ) && 
                (
                    this.MarketCap == input.MarketCap ||
                    this.MarketCap.Equals(input.MarketCap)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Volume24hr.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketCap.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
