/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// An object containing various resource URLs for this cryptocurrency.
    /// </summary>
    [DataContract(Name = "Cryptocurrencies Info - URLs object")]
    public partial class CryptocurrenciesInfoURLsObject : IEquatable<CryptocurrenciesInfoURLsObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrenciesInfoURLsObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptocurrenciesInfoURLsObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrenciesInfoURLsObject" /> class.
        /// </summary>
        /// <param name="website">Array of website URLs. (required).</param>
        /// <param name="technicalDoc">Array of white paper or technical documentation URLs. (required).</param>
        /// <param name="explorer">Array of block explorer URLs. (required).</param>
        /// <param name="sourceCode">Array of source code URLs. (required).</param>
        /// <param name="messageBoard">Array of message board URLs. (required).</param>
        /// <param name="chat">Array of chat service URLs. (required).</param>
        /// <param name="announcement">Array of announcement URLs. (required).</param>
        /// <param name="reddit">Array of Reddit community page URLs. (required).</param>
        /// <param name="twitter">Array of official twitter profile URLs. (required).</param>
        public CryptocurrenciesInfoURLsObject(List<string> website = default(List<string>), List<string> technicalDoc = default(List<string>), List<string> explorer = default(List<string>), List<string> sourceCode = default(List<string>), List<string> messageBoard = default(List<string>), List<string> chat = default(List<string>), List<string> announcement = default(List<string>), List<string> reddit = default(List<string>), List<string> twitter = default(List<string>))
        {
            // to ensure "website" is required (not null)
            if (website == null) {
                throw new ArgumentNullException("website is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.Website = website;
            // to ensure "technicalDoc" is required (not null)
            if (technicalDoc == null) {
                throw new ArgumentNullException("technicalDoc is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.TechnicalDoc = technicalDoc;
            // to ensure "explorer" is required (not null)
            if (explorer == null) {
                throw new ArgumentNullException("explorer is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.Explorer = explorer;
            // to ensure "sourceCode" is required (not null)
            if (sourceCode == null) {
                throw new ArgumentNullException("sourceCode is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.SourceCode = sourceCode;
            // to ensure "messageBoard" is required (not null)
            if (messageBoard == null) {
                throw new ArgumentNullException("messageBoard is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.MessageBoard = messageBoard;
            // to ensure "chat" is required (not null)
            if (chat == null) {
                throw new ArgumentNullException("chat is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.Chat = chat;
            // to ensure "announcement" is required (not null)
            if (announcement == null) {
                throw new ArgumentNullException("announcement is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.Announcement = announcement;
            // to ensure "reddit" is required (not null)
            if (reddit == null) {
                throw new ArgumentNullException("reddit is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.Reddit = reddit;
            // to ensure "twitter" is required (not null)
            if (twitter == null) {
                throw new ArgumentNullException("twitter is a required property for CryptocurrenciesInfoURLsObject and cannot be null");
            }
            this.Twitter = twitter;
        }

        /// <summary>
        /// Array of website URLs.
        /// </summary>
        /// <value>Array of website URLs.</value>
        [DataMember(Name = "website", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Website { get; set; }

        /// <summary>
        /// Array of white paper or technical documentation URLs.
        /// </summary>
        /// <value>Array of white paper or technical documentation URLs.</value>
        [DataMember(Name = "technical_doc", IsRequired = true, EmitDefaultValue = false)]
        public List<string> TechnicalDoc { get; set; }

        /// <summary>
        /// Array of block explorer URLs.
        /// </summary>
        /// <value>Array of block explorer URLs.</value>
        [DataMember(Name = "explorer", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Explorer { get; set; }

        /// <summary>
        /// Array of source code URLs.
        /// </summary>
        /// <value>Array of source code URLs.</value>
        [DataMember(Name = "source_code", IsRequired = true, EmitDefaultValue = false)]
        public List<string> SourceCode { get; set; }

        /// <summary>
        /// Array of message board URLs.
        /// </summary>
        /// <value>Array of message board URLs.</value>
        [DataMember(Name = "message_board", IsRequired = true, EmitDefaultValue = false)]
        public List<string> MessageBoard { get; set; }

        /// <summary>
        /// Array of chat service URLs.
        /// </summary>
        /// <value>Array of chat service URLs.</value>
        [DataMember(Name = "chat", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Chat { get; set; }

        /// <summary>
        /// Array of announcement URLs.
        /// </summary>
        /// <value>Array of announcement URLs.</value>
        [DataMember(Name = "announcement", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Announcement { get; set; }

        /// <summary>
        /// Array of Reddit community page URLs.
        /// </summary>
        /// <value>Array of Reddit community page URLs.</value>
        [DataMember(Name = "reddit", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Reddit { get; set; }

        /// <summary>
        /// Array of official twitter profile URLs.
        /// </summary>
        /// <value>Array of official twitter profile URLs.</value>
        [DataMember(Name = "twitter", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Twitter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptocurrenciesInfoURLsObject {\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  TechnicalDoc: ").Append(TechnicalDoc).Append("\n");
            sb.Append("  Explorer: ").Append(Explorer).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  MessageBoard: ").Append(MessageBoard).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  Announcement: ").Append(Announcement).Append("\n");
            sb.Append("  Reddit: ").Append(Reddit).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptocurrenciesInfoURLsObject);
        }

        /// <summary>
        /// Returns true if CryptocurrenciesInfoURLsObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptocurrenciesInfoURLsObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptocurrenciesInfoURLsObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Website == input.Website ||
                    this.Website != null &&
                    input.Website != null &&
                    this.Website.SequenceEqual(input.Website)
                ) && 
                (
                    this.TechnicalDoc == input.TechnicalDoc ||
                    this.TechnicalDoc != null &&
                    input.TechnicalDoc != null &&
                    this.TechnicalDoc.SequenceEqual(input.TechnicalDoc)
                ) && 
                (
                    this.Explorer == input.Explorer ||
                    this.Explorer != null &&
                    input.Explorer != null &&
                    this.Explorer.SequenceEqual(input.Explorer)
                ) && 
                (
                    this.SourceCode == input.SourceCode ||
                    this.SourceCode != null &&
                    input.SourceCode != null &&
                    this.SourceCode.SequenceEqual(input.SourceCode)
                ) && 
                (
                    this.MessageBoard == input.MessageBoard ||
                    this.MessageBoard != null &&
                    input.MessageBoard != null &&
                    this.MessageBoard.SequenceEqual(input.MessageBoard)
                ) && 
                (
                    this.Chat == input.Chat ||
                    this.Chat != null &&
                    input.Chat != null &&
                    this.Chat.SequenceEqual(input.Chat)
                ) && 
                (
                    this.Announcement == input.Announcement ||
                    this.Announcement != null &&
                    input.Announcement != null &&
                    this.Announcement.SequenceEqual(input.Announcement)
                ) && 
                (
                    this.Reddit == input.Reddit ||
                    this.Reddit != null &&
                    input.Reddit != null &&
                    this.Reddit.SequenceEqual(input.Reddit)
                ) && 
                (
                    this.Twitter == input.Twitter ||
                    this.Twitter != null &&
                    input.Twitter != null &&
                    this.Twitter.SequenceEqual(input.Twitter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.TechnicalDoc != null)
                    hashCode = hashCode * 59 + this.TechnicalDoc.GetHashCode();
                if (this.Explorer != null)
                    hashCode = hashCode * 59 + this.Explorer.GetHashCode();
                if (this.SourceCode != null)
                    hashCode = hashCode * 59 + this.SourceCode.GetHashCode();
                if (this.MessageBoard != null)
                    hashCode = hashCode * 59 + this.MessageBoard.GetHashCode();
                if (this.Chat != null)
                    hashCode = hashCode * 59 + this.Chat.GetHashCode();
                if (this.Announcement != null)
                    hashCode = hashCode * 59 + this.Announcement.GetHashCode();
                if (this.Reddit != null)
                    hashCode = hashCode * 59 + this.Reddit.GetHashCode();
                if (this.Twitter != null)
                    hashCode = hashCode * 59 + this.Twitter.GetHashCode();
                return hashCode;
            }
        }

    }

}
