/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// A results object for each cryptocurrency requested. The map key being the id/symbol used in the request.
    /// </summary>
    [DataContract(Name = "Cryptocurrencies Info - Cryptocurrency object")]
    public partial class CryptocurrenciesInfoCryptocurrencyObject : IEquatable<CryptocurrenciesInfoCryptocurrencyObject>
    {
        /// <summary>
        /// The category for this cryptocurrency.
        /// </summary>
        /// <value>The category for this cryptocurrency.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Coin for value: coin
            /// </summary>
            [EnumMember(Value = "coin")]
            Coin = 1,

            /// <summary>
            /// Enum Token for value: token
            /// </summary>
            [EnumMember(Value = "token")]
            Token = 2

        }


        /// <summary>
        /// The category for this cryptocurrency.
        /// </summary>
        /// <value>The category for this cryptocurrency.</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrenciesInfoCryptocurrencyObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptocurrenciesInfoCryptocurrencyObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrenciesInfoCryptocurrencyObject" /> class.
        /// </summary>
        /// <param name="id">The unique CoinMarketCap ID for this cryptocurrency. (required).</param>
        /// <param name="name">The name of this cryptocurrency. (required).</param>
        /// <param name="symbol">The ticker symbol for this cryptocurrency. (required).</param>
        /// <param name="category">The category for this cryptocurrency. (required).</param>
        /// <param name="slug">The web URL friendly shorthand version of this cryptocurrency name. (required).</param>
        /// <param name="logo">Link to a CoinMarketCap hosted logo png for this cryptocurrency. 64px is default size returned. Replace \&quot;64x64\&quot; in the image path with these alternative sizes: 16, 32, 64, 128, 200 (required).</param>
        /// <param name="description">A CoinMarketCap supplied brief description of this cryptocurrency. This field will return null if a description is not available. (required).</param>
        /// <param name="dateAdded">Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap. (required).</param>
        /// <param name="notice">A [Markdown](https://commonmark.org/help/) formatted notice that may highlight a significant event or condition that is impacting the cryptocurrency or how it is displayed, otherwise null. A notice may highlight a recent or upcoming mainnet swap, symbol change, exploit event, or known issue with a particular exchange or market, for example. If present, this notice is also displayed in an alert banner at the top of the cryptocurrency&#39;s page on coinmarketcap.com. (required).</param>
        /// <param name="tags">Tags associated with this cryptocurrency. (required).</param>
        /// <param name="platform">platform (required).</param>
        /// <param name="urls">urls (required).</param>
        public CryptocurrenciesInfoCryptocurrencyObject(int id = default(int), string name = default(string), string symbol = default(string), CategoryEnum category = default(CategoryEnum), string slug = default(string), string logo = default(string), string description = default(string), DateTime dateAdded = default(DateTime), string notice = default(string), List<string> tags = default(List<string>), Platform platform = default(Platform), CryptocurrenciesInfoURLsObject urls = default(CryptocurrenciesInfoURLsObject))
        {
            this.Id = id;
            this.Name = name;
            this.Symbol = symbol;
            this.Category = category;
            this.Slug = slug;
            this.Logo = logo;
            this.Description = description;
            this.DateAdded = dateAdded;
            this.Notice = notice;
            // to ensure "tags" is required (not null)
            if (tags == null) {
                throw new ArgumentNullException("tags is a required property for CryptocurrenciesInfoCryptocurrencyObject and cannot be null");
            }
            this.Tags = tags;
            // to ensure "platform" is required (not null)
            if (platform == null) {
                throw new ArgumentNullException("platform is a required property for CryptocurrenciesInfoCryptocurrencyObject and cannot be null");
            }
            this.Platform = platform;
            // to ensure "urls" is required (not null)
            if (urls == null) {
                throw new ArgumentNullException("urls is a required property for CryptocurrenciesInfoCryptocurrencyObject and cannot be null");
            }
            this.Urls = urls;
        }

        /// <summary>
        /// The unique CoinMarketCap ID for this cryptocurrency.
        /// </summary>
        /// <value>The unique CoinMarketCap ID for this cryptocurrency.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The name of this cryptocurrency.
        /// </summary>
        /// <value>The name of this cryptocurrency.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The ticker symbol for this cryptocurrency.
        /// </summary>
        /// <value>The ticker symbol for this cryptocurrency.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// The web URL friendly shorthand version of this cryptocurrency name.
        /// </summary>
        /// <value>The web URL friendly shorthand version of this cryptocurrency name.</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Link to a CoinMarketCap hosted logo png for this cryptocurrency. 64px is default size returned. Replace \&quot;64x64\&quot; in the image path with these alternative sizes: 16, 32, 64, 128, 200
        /// </summary>
        /// <value>Link to a CoinMarketCap hosted logo png for this cryptocurrency. 64px is default size returned. Replace \&quot;64x64\&quot; in the image path with these alternative sizes: 16, 32, 64, 128, 200</value>
        [DataMember(Name = "logo", IsRequired = true, EmitDefaultValue = false)]
        public string Logo { get; set; }

        /// <summary>
        /// A CoinMarketCap supplied brief description of this cryptocurrency. This field will return null if a description is not available.
        /// </summary>
        /// <value>A CoinMarketCap supplied brief description of this cryptocurrency. This field will return null if a description is not available.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.</value>
        [DataMember(Name = "date_added", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// A [Markdown](https://commonmark.org/help/) formatted notice that may highlight a significant event or condition that is impacting the cryptocurrency or how it is displayed, otherwise null. A notice may highlight a recent or upcoming mainnet swap, symbol change, exploit event, or known issue with a particular exchange or market, for example. If present, this notice is also displayed in an alert banner at the top of the cryptocurrency&#39;s page on coinmarketcap.com.
        /// </summary>
        /// <value>A [Markdown](https://commonmark.org/help/) formatted notice that may highlight a significant event or condition that is impacting the cryptocurrency or how it is displayed, otherwise null. A notice may highlight a recent or upcoming mainnet swap, symbol change, exploit event, or known issue with a particular exchange or market, for example. If present, this notice is also displayed in an alert banner at the top of the cryptocurrency&#39;s page on coinmarketcap.com.</value>
        [DataMember(Name = "notice", IsRequired = true, EmitDefaultValue = false)]
        public string Notice { get; set; }

        /// <summary>
        /// Tags associated with this cryptocurrency.
        /// </summary>
        /// <value>Tags associated with this cryptocurrency.</value>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = false)]
        public Platform Platform { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", IsRequired = true, EmitDefaultValue = false)]
        public CryptocurrenciesInfoURLsObject Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptocurrenciesInfoCryptocurrencyObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  Notice: ").Append(Notice).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptocurrenciesInfoCryptocurrencyObject);
        }

        /// <summary>
        /// Returns true if CryptocurrenciesInfoCryptocurrencyObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptocurrenciesInfoCryptocurrencyObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptocurrenciesInfoCryptocurrencyObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DateAdded == input.DateAdded ||
                    (this.DateAdded != null &&
                    this.DateAdded.Equals(input.DateAdded))
                ) && 
                (
                    this.Notice == input.Notice ||
                    (this.Notice != null &&
                    this.Notice.Equals(input.Notice))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DateAdded != null)
                    hashCode = hashCode * 59 + this.DateAdded.GetHashCode();
                if (this.Notice != null)
                    hashCode = hashCode * 59 + this.Notice.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                return hashCode;
            }
        }

    }

}
