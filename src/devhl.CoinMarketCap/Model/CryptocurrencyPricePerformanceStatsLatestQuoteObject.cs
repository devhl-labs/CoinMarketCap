/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// A time period quote in the currency conversion option.
    /// </summary>
    [DataContract(Name = "Cryptocurrency Price Performance Stats Latest - Quote object")]
    public partial class CryptocurrencyPricePerformanceStatsLatestQuoteObject : IEquatable<CryptocurrencyPricePerformanceStatsLatestQuoteObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrencyPricePerformanceStatsLatestQuoteObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptocurrencyPricePerformanceStatsLatestQuoteObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrencyPricePerformanceStatsLatestQuoteObject" /> class.
        /// </summary>
        /// <param name="open">Cryptocurrency price at the start of the requested time period historically converted into units of the convert currency. (required).</param>
        /// <param name="openTimestamp">Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;open&#x60; price conversion. (required).</param>
        /// <param name="high">Highest USD price achieved within the requested time period historically converted into units of the convert currency. (required).</param>
        /// <param name="highTimestamp">Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;high&#x60; price conversion. *For &#x60;yesterday&#x60; UTC close will be used.* (required).</param>
        /// <param name="low">Lowest USD price achieved within the requested time period historically converted into units of the convert currency. (required).</param>
        /// <param name="lowTimestamp">Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;low&#x60; price conversion. *For &#x60;yesterday&#x60; UTC close will be used.* (required).</param>
        /// <param name="close">Cryptocurrency price at the end of the requested time period historically converted into units of the convert currency. (required).</param>
        /// <param name="closeTimestamp">Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;close&#x60; price conversion. (required).</param>
        /// <param name="percentChange">The approximate percentage change (ROI) if purchased at the start of the time period. This is the time of launch or earliest known price for the &#x60;all_time&#x60; period. This value includes historical change in market rate for the specified convert currency. (required).</param>
        /// <param name="priceChange">The actual price change between the start of the time period and end. This is the time of launch or earliest known price for the &#x60;all_time&#x60; period. This value includes historical change in market rate for the specified convert currency. (required).</param>
        public CryptocurrencyPricePerformanceStatsLatestQuoteObject(decimal open = default(decimal), DateTime openTimestamp = default(DateTime), decimal high = default(decimal), DateTime highTimestamp = default(DateTime), decimal low = default(decimal), DateTime lowTimestamp = default(DateTime), decimal close = default(decimal), DateTime closeTimestamp = default(DateTime), decimal percentChange = default(decimal), decimal priceChange = default(decimal))
        {
            this.Open = open;
            this.OpenTimestamp = openTimestamp;
            this.High = high;
            this.HighTimestamp = highTimestamp;
            this.Low = low;
            this.LowTimestamp = lowTimestamp;
            this.Close = close;
            this.CloseTimestamp = closeTimestamp;
            this.PercentChange = percentChange;
            this.PriceChange = priceChange;
        }

        /// <summary>
        /// Cryptocurrency price at the start of the requested time period historically converted into units of the convert currency.
        /// </summary>
        /// <value>Cryptocurrency price at the start of the requested time period historically converted into units of the convert currency.</value>
        [DataMember(Name = "open", IsRequired = true, EmitDefaultValue = false)]
        public decimal Open { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;open&#x60; price conversion.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;open&#x60; price conversion.</value>
        [DataMember(Name = "open_timestamp", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime OpenTimestamp { get; set; }

        /// <summary>
        /// Highest USD price achieved within the requested time period historically converted into units of the convert currency.
        /// </summary>
        /// <value>Highest USD price achieved within the requested time period historically converted into units of the convert currency.</value>
        [DataMember(Name = "high", IsRequired = true, EmitDefaultValue = false)]
        public decimal High { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;high&#x60; price conversion. *For &#x60;yesterday&#x60; UTC close will be used.*
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;high&#x60; price conversion. *For &#x60;yesterday&#x60; UTC close will be used.*</value>
        [DataMember(Name = "high_timestamp", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime HighTimestamp { get; set; }

        /// <summary>
        /// Lowest USD price achieved within the requested time period historically converted into units of the convert currency.
        /// </summary>
        /// <value>Lowest USD price achieved within the requested time period historically converted into units of the convert currency.</value>
        [DataMember(Name = "low", IsRequired = true, EmitDefaultValue = false)]
        public decimal Low { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;low&#x60; price conversion. *For &#x60;yesterday&#x60; UTC close will be used.*
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;low&#x60; price conversion. *For &#x60;yesterday&#x60; UTC close will be used.*</value>
        [DataMember(Name = "low_timestamp", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LowTimestamp { get; set; }

        /// <summary>
        /// Cryptocurrency price at the end of the requested time period historically converted into units of the convert currency.
        /// </summary>
        /// <value>Cryptocurrency price at the end of the requested time period historically converted into units of the convert currency.</value>
        [DataMember(Name = "close", IsRequired = true, EmitDefaultValue = false)]
        public decimal Close { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;close&#x60; price conversion.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the closest convert currency reference price used during &#x60;close&#x60; price conversion.</value>
        [DataMember(Name = "close_timestamp", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime CloseTimestamp { get; set; }

        /// <summary>
        /// The approximate percentage change (ROI) if purchased at the start of the time period. This is the time of launch or earliest known price for the &#x60;all_time&#x60; period. This value includes historical change in market rate for the specified convert currency.
        /// </summary>
        /// <value>The approximate percentage change (ROI) if purchased at the start of the time period. This is the time of launch or earliest known price for the &#x60;all_time&#x60; period. This value includes historical change in market rate for the specified convert currency.</value>
        [DataMember(Name = "percent_change", IsRequired = true, EmitDefaultValue = false)]
        public decimal PercentChange { get; set; }

        /// <summary>
        /// The actual price change between the start of the time period and end. This is the time of launch or earliest known price for the &#x60;all_time&#x60; period. This value includes historical change in market rate for the specified convert currency.
        /// </summary>
        /// <value>The actual price change between the start of the time period and end. This is the time of launch or earliest known price for the &#x60;all_time&#x60; period. This value includes historical change in market rate for the specified convert currency.</value>
        [DataMember(Name = "price_change", IsRequired = true, EmitDefaultValue = false)]
        public decimal PriceChange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CryptocurrencyPricePerformanceStatsLatestQuoteObject {\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  OpenTimestamp: ").Append(OpenTimestamp).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  HighTimestamp: ").Append(HighTimestamp).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  LowTimestamp: ").Append(LowTimestamp).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  CloseTimestamp: ").Append(CloseTimestamp).Append("\n");
            sb.Append("  PercentChange: ").Append(PercentChange).Append("\n");
            sb.Append("  PriceChange: ").Append(PriceChange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptocurrencyPricePerformanceStatsLatestQuoteObject);
        }

        /// <summary>
        /// Returns true if CryptocurrencyPricePerformanceStatsLatestQuoteObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptocurrencyPricePerformanceStatsLatestQuoteObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptocurrencyPricePerformanceStatsLatestQuoteObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Open == input.Open ||
                    this.Open.Equals(input.Open)
                ) && 
                (
                    this.OpenTimestamp == input.OpenTimestamp ||
                    (this.OpenTimestamp != null &&
                    this.OpenTimestamp.Equals(input.OpenTimestamp))
                ) && 
                (
                    this.High == input.High ||
                    this.High.Equals(input.High)
                ) && 
                (
                    this.HighTimestamp == input.HighTimestamp ||
                    (this.HighTimestamp != null &&
                    this.HighTimestamp.Equals(input.HighTimestamp))
                ) && 
                (
                    this.Low == input.Low ||
                    this.Low.Equals(input.Low)
                ) && 
                (
                    this.LowTimestamp == input.LowTimestamp ||
                    (this.LowTimestamp != null &&
                    this.LowTimestamp.Equals(input.LowTimestamp))
                ) && 
                (
                    this.Close == input.Close ||
                    this.Close.Equals(input.Close)
                ) && 
                (
                    this.CloseTimestamp == input.CloseTimestamp ||
                    (this.CloseTimestamp != null &&
                    this.CloseTimestamp.Equals(input.CloseTimestamp))
                ) && 
                (
                    this.PercentChange == input.PercentChange ||
                    this.PercentChange.Equals(input.PercentChange)
                ) && 
                (
                    this.PriceChange == input.PriceChange ||
                    this.PriceChange.Equals(input.PriceChange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Open.GetHashCode();
                if (this.OpenTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.OpenTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.High.GetHashCode();
                if (this.HighTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.HighTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Low.GetHashCode();
                if (this.LowTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.LowTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Close.GetHashCode();
                if (this.CloseTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.CloseTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PercentChange.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceChange.GetHashCode();
                return hashCode;
            }
        }

    }

}
