/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// A blockchain object for every blockchain that matched list options.
    /// </summary>
    [DataContract(Name = "Blockchain Statistics Latest - Blockchain object")]
    public partial class BlockchainStatisticsLatestBlockchainObject : IEquatable<BlockchainStatisticsLatestBlockchainObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainStatisticsLatestBlockchainObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockchainStatisticsLatestBlockchainObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainStatisticsLatestBlockchainObject" /> class.
        /// </summary>
        /// <param name="id">The unique CoinMarketCap ID for this blockchain&#39;s cryptocurrency. (required).</param>
        /// <param name="slug">The web URL friendly shorthand version of the cryptocurrency&#39;s name. (required).</param>
        /// <param name="symbol">The ticker symbol for the cryptocurrency. (required).</param>
        /// <param name="blockRewardStatic">The reward assigned to the miner of a block excluding fees. (required).</param>
        /// <param name="consensusMechanism">The consensus mechanism used by the blockchain, for example, \&quot;proof-of-work\&quot; or \&quot;proof-of-stake\&quot;. (required).</param>
        /// <param name="difficulty">The global block difficulty determining how hard to find a hash on this blockchain. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.* (required).</param>
        /// <param name="hashrate24h">The average hashrate over the past 24 hours. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.* (required).</param>
        /// <param name="pendingTransactions">The number of pending transactions. (required).</param>
        /// <param name="reductionRate">The rate the block reward is adjusted at a specified interval. (required).</param>
        /// <param name="totalBlocks">The total number of blocks. (required).</param>
        /// <param name="totalTransactions">The total number of transactions. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.* (required).</param>
        /// <param name="tps24h">The average transactions per second over the past 24 hours. (required).</param>
        /// <param name="firstBlockTimestamp">Timestamp (ISO 8601) of the time the first block was mined on this chain. (required).</param>
        public BlockchainStatisticsLatestBlockchainObject(int id = default(int), string slug = default(string), string symbol = default(string), decimal blockRewardStatic = default(decimal), string consensusMechanism = default(string), string difficulty = default(string), string hashrate24h = default(string), int pendingTransactions = default(int), string reductionRate = default(string), int totalBlocks = default(int), string totalTransactions = default(string), decimal tps24h = default(decimal), DateTime firstBlockTimestamp = default(DateTime))
        {
            this.Id = id;
            this.Slug = slug;
            this.Symbol = symbol;
            this.BlockRewardStatic = blockRewardStatic;
            this.ConsensusMechanism = consensusMechanism;
            this.Difficulty = difficulty;
            this.Hashrate24h = hashrate24h;
            this.PendingTransactions = pendingTransactions;
            this.ReductionRate = reductionRate;
            this.TotalBlocks = totalBlocks;
            this.TotalTransactions = totalTransactions;
            this.Tps24h = tps24h;
            this.FirstBlockTimestamp = firstBlockTimestamp;
        }

        /// <summary>
        /// The unique CoinMarketCap ID for this blockchain&#39;s cryptocurrency.
        /// </summary>
        /// <value>The unique CoinMarketCap ID for this blockchain&#39;s cryptocurrency.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The web URL friendly shorthand version of the cryptocurrency&#39;s name.
        /// </summary>
        /// <value>The web URL friendly shorthand version of the cryptocurrency&#39;s name.</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// The ticker symbol for the cryptocurrency.
        /// </summary>
        /// <value>The ticker symbol for the cryptocurrency.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// The reward assigned to the miner of a block excluding fees.
        /// </summary>
        /// <value>The reward assigned to the miner of a block excluding fees.</value>
        [DataMember(Name = "block_reward_static", IsRequired = true, EmitDefaultValue = false)]
        public decimal BlockRewardStatic { get; set; }

        /// <summary>
        /// The consensus mechanism used by the blockchain, for example, \&quot;proof-of-work\&quot; or \&quot;proof-of-stake\&quot;.
        /// </summary>
        /// <value>The consensus mechanism used by the blockchain, for example, \&quot;proof-of-work\&quot; or \&quot;proof-of-stake\&quot;.</value>
        [DataMember(Name = "consensus_mechanism", IsRequired = true, EmitDefaultValue = false)]
        public string ConsensusMechanism { get; set; }

        /// <summary>
        /// The global block difficulty determining how hard to find a hash on this blockchain. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*
        /// </summary>
        /// <value>The global block difficulty determining how hard to find a hash on this blockchain. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*</value>
        [DataMember(Name = "difficulty", IsRequired = true, EmitDefaultValue = false)]
        public string Difficulty { get; set; }

        /// <summary>
        /// The average hashrate over the past 24 hours. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*
        /// </summary>
        /// <value>The average hashrate over the past 24 hours. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*</value>
        [DataMember(Name = "hashrate_24h", IsRequired = true, EmitDefaultValue = false)]
        public string Hashrate24h { get; set; }

        /// <summary>
        /// The number of pending transactions.
        /// </summary>
        /// <value>The number of pending transactions.</value>
        [DataMember(Name = "pending_transactions", IsRequired = true, EmitDefaultValue = false)]
        public int PendingTransactions { get; set; }

        /// <summary>
        /// The rate the block reward is adjusted at a specified interval.
        /// </summary>
        /// <value>The rate the block reward is adjusted at a specified interval.</value>
        [DataMember(Name = "reduction_rate", IsRequired = true, EmitDefaultValue = false)]
        public string ReductionRate { get; set; }

        /// <summary>
        /// The total number of blocks.
        /// </summary>
        /// <value>The total number of blocks.</value>
        [DataMember(Name = "total_blocks", IsRequired = true, EmitDefaultValue = false)]
        public int TotalBlocks { get; set; }

        /// <summary>
        /// The total number of transactions. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*
        /// </summary>
        /// <value>The total number of transactions. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*</value>
        [DataMember(Name = "total_transactions", IsRequired = true, EmitDefaultValue = false)]
        public string TotalTransactions { get; set; }

        /// <summary>
        /// The average transactions per second over the past 24 hours.
        /// </summary>
        /// <value>The average transactions per second over the past 24 hours.</value>
        [DataMember(Name = "tps_24h", IsRequired = true, EmitDefaultValue = false)]
        public decimal Tps24h { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of the time the first block was mined on this chain.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of the time the first block was mined on this chain.</value>
        [DataMember(Name = "first_block_timestamp", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FirstBlockTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockchainStatisticsLatestBlockchainObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BlockRewardStatic: ").Append(BlockRewardStatic).Append("\n");
            sb.Append("  ConsensusMechanism: ").Append(ConsensusMechanism).Append("\n");
            sb.Append("  Difficulty: ").Append(Difficulty).Append("\n");
            sb.Append("  Hashrate24h: ").Append(Hashrate24h).Append("\n");
            sb.Append("  PendingTransactions: ").Append(PendingTransactions).Append("\n");
            sb.Append("  ReductionRate: ").Append(ReductionRate).Append("\n");
            sb.Append("  TotalBlocks: ").Append(TotalBlocks).Append("\n");
            sb.Append("  TotalTransactions: ").Append(TotalTransactions).Append("\n");
            sb.Append("  Tps24h: ").Append(Tps24h).Append("\n");
            sb.Append("  FirstBlockTimestamp: ").Append(FirstBlockTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockchainStatisticsLatestBlockchainObject);
        }

        /// <summary>
        /// Returns true if BlockchainStatisticsLatestBlockchainObject instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockchainStatisticsLatestBlockchainObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockchainStatisticsLatestBlockchainObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.BlockRewardStatic == input.BlockRewardStatic ||
                    this.BlockRewardStatic.Equals(input.BlockRewardStatic)
                ) && 
                (
                    this.ConsensusMechanism == input.ConsensusMechanism ||
                    (this.ConsensusMechanism != null &&
                    this.ConsensusMechanism.Equals(input.ConsensusMechanism))
                ) && 
                (
                    this.Difficulty == input.Difficulty ||
                    (this.Difficulty != null &&
                    this.Difficulty.Equals(input.Difficulty))
                ) && 
                (
                    this.Hashrate24h == input.Hashrate24h ||
                    (this.Hashrate24h != null &&
                    this.Hashrate24h.Equals(input.Hashrate24h))
                ) && 
                (
                    this.PendingTransactions == input.PendingTransactions ||
                    this.PendingTransactions.Equals(input.PendingTransactions)
                ) && 
                (
                    this.ReductionRate == input.ReductionRate ||
                    (this.ReductionRate != null &&
                    this.ReductionRate.Equals(input.ReductionRate))
                ) && 
                (
                    this.TotalBlocks == input.TotalBlocks ||
                    this.TotalBlocks.Equals(input.TotalBlocks)
                ) && 
                (
                    this.TotalTransactions == input.TotalTransactions ||
                    (this.TotalTransactions != null &&
                    this.TotalTransactions.Equals(input.TotalTransactions))
                ) && 
                (
                    this.Tps24h == input.Tps24h ||
                    this.Tps24h.Equals(input.Tps24h)
                ) && 
                (
                    this.FirstBlockTimestamp == input.FirstBlockTimestamp ||
                    (this.FirstBlockTimestamp != null &&
                    this.FirstBlockTimestamp.Equals(input.FirstBlockTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockRewardStatic.GetHashCode();
                if (this.ConsensusMechanism != null)
                {
                    hashCode = (hashCode * 59) + this.ConsensusMechanism.GetHashCode();
                }
                if (this.Difficulty != null)
                {
                    hashCode = (hashCode * 59) + this.Difficulty.GetHashCode();
                }
                if (this.Hashrate24h != null)
                {
                    hashCode = (hashCode * 59) + this.Hashrate24h.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PendingTransactions.GetHashCode();
                if (this.ReductionRate != null)
                {
                    hashCode = (hashCode * 59) + this.ReductionRate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalBlocks.GetHashCode();
                if (this.TotalTransactions != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTransactions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Tps24h.GetHashCode();
                if (this.FirstBlockTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.FirstBlockTimestamp.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
