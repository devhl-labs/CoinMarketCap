/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// An object containing various resource URLs for this exchange.
    /// </summary>
    [DataContract(Name = "Exchanges Info - URLs object")]
    public partial class ExchangesInfoURLsObject : IEquatable<ExchangesInfoURLsObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesInfoURLsObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExchangesInfoURLsObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesInfoURLsObject" /> class.
        /// </summary>
        /// <param name="website">Official website URLs. (required).</param>
        /// <param name="blog">Official blog URLs. (required).</param>
        /// <param name="chat">Official chat URLs. (required).</param>
        /// <param name="fee">Official web URLs covering exchange fees. (required).</param>
        /// <param name="twitter">Official twitter profile URLs. (required).</param>
        public ExchangesInfoURLsObject(List<string> website = default(List<string>), List<string> blog = default(List<string>), List<string> chat = default(List<string>), List<string> fee = default(List<string>), List<string> twitter = default(List<string>))
        {
            // to ensure "website" is required (not null)
            if (website == null) {
                throw new ArgumentNullException("website is a required property for ExchangesInfoURLsObject and cannot be null");
            }
            this.Website = website;
            // to ensure "blog" is required (not null)
            if (blog == null) {
                throw new ArgumentNullException("blog is a required property for ExchangesInfoURLsObject and cannot be null");
            }
            this.Blog = blog;
            // to ensure "chat" is required (not null)
            if (chat == null) {
                throw new ArgumentNullException("chat is a required property for ExchangesInfoURLsObject and cannot be null");
            }
            this.Chat = chat;
            // to ensure "fee" is required (not null)
            if (fee == null) {
                throw new ArgumentNullException("fee is a required property for ExchangesInfoURLsObject and cannot be null");
            }
            this.Fee = fee;
            // to ensure "twitter" is required (not null)
            if (twitter == null) {
                throw new ArgumentNullException("twitter is a required property for ExchangesInfoURLsObject and cannot be null");
            }
            this.Twitter = twitter;
        }

        /// <summary>
        /// Official website URLs.
        /// </summary>
        /// <value>Official website URLs.</value>
        [DataMember(Name = "website", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Website { get; set; }

        /// <summary>
        /// Official blog URLs.
        /// </summary>
        /// <value>Official blog URLs.</value>
        [DataMember(Name = "blog", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Blog { get; set; }

        /// <summary>
        /// Official chat URLs.
        /// </summary>
        /// <value>Official chat URLs.</value>
        [DataMember(Name = "chat", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Chat { get; set; }

        /// <summary>
        /// Official web URLs covering exchange fees.
        /// </summary>
        /// <value>Official web URLs covering exchange fees.</value>
        [DataMember(Name = "fee", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Fee { get; set; }

        /// <summary>
        /// Official twitter profile URLs.
        /// </summary>
        /// <value>Official twitter profile URLs.</value>
        [DataMember(Name = "twitter", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Twitter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExchangesInfoURLsObject {\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Blog: ").Append(Blog).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangesInfoURLsObject);
        }

        /// <summary>
        /// Returns true if ExchangesInfoURLsObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangesInfoURLsObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangesInfoURLsObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Website == input.Website ||
                    this.Website != null &&
                    input.Website != null &&
                    this.Website.SequenceEqual(input.Website)
                ) && 
                (
                    this.Blog == input.Blog ||
                    this.Blog != null &&
                    input.Blog != null &&
                    this.Blog.SequenceEqual(input.Blog)
                ) && 
                (
                    this.Chat == input.Chat ||
                    this.Chat != null &&
                    input.Chat != null &&
                    this.Chat.SequenceEqual(input.Chat)
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee != null &&
                    input.Fee != null &&
                    this.Fee.SequenceEqual(input.Fee)
                ) && 
                (
                    this.Twitter == input.Twitter ||
                    this.Twitter != null &&
                    input.Twitter != null &&
                    this.Twitter.SequenceEqual(input.Twitter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                if (this.Blog != null)
                {
                    hashCode = (hashCode * 59) + this.Blog.GetHashCode();
                }
                if (this.Chat != null)
                {
                    hashCode = (hashCode * 59) + this.Chat.GetHashCode();
                }
                if (this.Fee != null)
                {
                    hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                }
                if (this.Twitter != null)
                {
                    hashCode = (hashCode * 59) + this.Twitter.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
