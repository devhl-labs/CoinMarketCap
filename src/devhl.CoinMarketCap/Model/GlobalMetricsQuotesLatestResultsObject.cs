/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// Results object for your API call.
    /// </summary>
    [DataContract(Name = "Global Metrics Quotes Latest - Results Object")]
    public partial class GlobalMetricsQuotesLatestResultsObject : IEquatable<GlobalMetricsQuotesLatestResultsObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalMetricsQuotesLatestResultsObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GlobalMetricsQuotesLatestResultsObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalMetricsQuotesLatestResultsObject" /> class.
        /// </summary>
        /// <param name="btcDominance">Bitcoin&#39;s market dominance percentage by market cap..</param>
        /// <param name="ethDominance">Ethereum&#39;s market dominance percentage by market cap..</param>
        /// <param name="activeCryptocurrencies">Count of active cryptocurrencies tracked by CoinMarketCap. This includes all cryptocurrencies with a &#x60;listing_status&#x60; of \&quot;active\&quot; or \&quot;listed\&quot; as returned from our /cryptocurrency/map call. (required).</param>
        /// <param name="totalCryptocurrencies">Count of all cryptocurrencies tracked by CoinMarketCap. This includes \&quot;inactive\&quot; &#x60;listing_status&#x60; cryptocurrencies. (required).</param>
        /// <param name="activeMarketPairs">Count of active market pairs tracked by CoinMarketCap across all exchanges. (required).</param>
        /// <param name="activeExchanges">Count of active exchanges tracked by CoinMarketCap. This includes all exchanges with a &#x60;listing_status&#x60; of \&quot;active\&quot; or \&quot;listed\&quot; as returned by our /exchange/map call. (required).</param>
        /// <param name="totalExchanges">Count of all exchanges tracked by CoinMarketCap. This includes \&quot;inactive\&quot; &#x60;listing_status&#x60; exchanges. (required).</param>
        /// <param name="lastUpdated">Timestamp of when this record was last updated. (required).</param>
        /// <param name="quote">quote (required).</param>
        public GlobalMetricsQuotesLatestResultsObject(decimal btcDominance = default(decimal), decimal ethDominance = default(decimal), decimal activeCryptocurrencies = default(decimal), decimal totalCryptocurrencies = default(decimal), decimal activeMarketPairs = default(decimal), decimal activeExchanges = default(decimal), decimal totalExchanges = default(decimal), DateTime lastUpdated = default(DateTime), GlobalMetricsQuotesLatestQuoteMap quote = default(GlobalMetricsQuotesLatestQuoteMap))
        {
            this.ActiveCryptocurrencies = activeCryptocurrencies;
            this.TotalCryptocurrencies = totalCryptocurrencies;
            this.ActiveMarketPairs = activeMarketPairs;
            this.ActiveExchanges = activeExchanges;
            this.TotalExchanges = totalExchanges;
            this.LastUpdated = lastUpdated;
            // to ensure "quote" is required (not null)
            if (quote == null) {
                throw new ArgumentNullException("quote is a required property for GlobalMetricsQuotesLatestResultsObject and cannot be null");
            }
            this.Quote = quote;
            this.BtcDominance = btcDominance;
            this.EthDominance = ethDominance;
        }

        /// <summary>
        /// Bitcoin&#39;s market dominance percentage by market cap.
        /// </summary>
        /// <value>Bitcoin&#39;s market dominance percentage by market cap.</value>
        [DataMember(Name = "btc_dominance", EmitDefaultValue = false)]
        public decimal BtcDominance { get; set; }

        /// <summary>
        /// Ethereum&#39;s market dominance percentage by market cap.
        /// </summary>
        /// <value>Ethereum&#39;s market dominance percentage by market cap.</value>
        [DataMember(Name = "eth_dominance", EmitDefaultValue = false)]
        public decimal EthDominance { get; set; }

        /// <summary>
        /// Count of active cryptocurrencies tracked by CoinMarketCap. This includes all cryptocurrencies with a &#x60;listing_status&#x60; of \&quot;active\&quot; or \&quot;listed\&quot; as returned from our /cryptocurrency/map call.
        /// </summary>
        /// <value>Count of active cryptocurrencies tracked by CoinMarketCap. This includes all cryptocurrencies with a &#x60;listing_status&#x60; of \&quot;active\&quot; or \&quot;listed\&quot; as returned from our /cryptocurrency/map call.</value>
        [DataMember(Name = "active_cryptocurrencies", IsRequired = true, EmitDefaultValue = false)]
        public decimal ActiveCryptocurrencies { get; set; }

        /// <summary>
        /// Count of all cryptocurrencies tracked by CoinMarketCap. This includes \&quot;inactive\&quot; &#x60;listing_status&#x60; cryptocurrencies.
        /// </summary>
        /// <value>Count of all cryptocurrencies tracked by CoinMarketCap. This includes \&quot;inactive\&quot; &#x60;listing_status&#x60; cryptocurrencies.</value>
        [DataMember(Name = "total_cryptocurrencies", IsRequired = true, EmitDefaultValue = false)]
        public decimal TotalCryptocurrencies { get; set; }

        /// <summary>
        /// Count of active market pairs tracked by CoinMarketCap across all exchanges.
        /// </summary>
        /// <value>Count of active market pairs tracked by CoinMarketCap across all exchanges.</value>
        [DataMember(Name = "active_market_pairs", IsRequired = true, EmitDefaultValue = false)]
        public decimal ActiveMarketPairs { get; set; }

        /// <summary>
        /// Count of active exchanges tracked by CoinMarketCap. This includes all exchanges with a &#x60;listing_status&#x60; of \&quot;active\&quot; or \&quot;listed\&quot; as returned by our /exchange/map call.
        /// </summary>
        /// <value>Count of active exchanges tracked by CoinMarketCap. This includes all exchanges with a &#x60;listing_status&#x60; of \&quot;active\&quot; or \&quot;listed\&quot; as returned by our /exchange/map call.</value>
        [DataMember(Name = "active_exchanges", IsRequired = true, EmitDefaultValue = false)]
        public decimal ActiveExchanges { get; set; }

        /// <summary>
        /// Count of all exchanges tracked by CoinMarketCap. This includes \&quot;inactive\&quot; &#x60;listing_status&#x60; exchanges.
        /// </summary>
        /// <value>Count of all exchanges tracked by CoinMarketCap. This includes \&quot;inactive\&quot; &#x60;listing_status&#x60; exchanges.</value>
        [DataMember(Name = "total_exchanges", IsRequired = true, EmitDefaultValue = false)]
        public decimal TotalExchanges { get; set; }

        /// <summary>
        /// Timestamp of when this record was last updated.
        /// </summary>
        /// <value>Timestamp of when this record was last updated.</value>
        [DataMember(Name = "last_updated", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Quote
        /// </summary>
        [DataMember(Name = "quote", IsRequired = true, EmitDefaultValue = false)]
        public GlobalMetricsQuotesLatestQuoteMap Quote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GlobalMetricsQuotesLatestResultsObject {\n");
            sb.Append("  BtcDominance: ").Append(BtcDominance).Append("\n");
            sb.Append("  EthDominance: ").Append(EthDominance).Append("\n");
            sb.Append("  ActiveCryptocurrencies: ").Append(ActiveCryptocurrencies).Append("\n");
            sb.Append("  TotalCryptocurrencies: ").Append(TotalCryptocurrencies).Append("\n");
            sb.Append("  ActiveMarketPairs: ").Append(ActiveMarketPairs).Append("\n");
            sb.Append("  ActiveExchanges: ").Append(ActiveExchanges).Append("\n");
            sb.Append("  TotalExchanges: ").Append(TotalExchanges).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlobalMetricsQuotesLatestResultsObject);
        }

        /// <summary>
        /// Returns true if GlobalMetricsQuotesLatestResultsObject instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalMetricsQuotesLatestResultsObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalMetricsQuotesLatestResultsObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BtcDominance == input.BtcDominance ||
                    this.BtcDominance.Equals(input.BtcDominance)
                ) && 
                (
                    this.EthDominance == input.EthDominance ||
                    this.EthDominance.Equals(input.EthDominance)
                ) && 
                (
                    this.ActiveCryptocurrencies == input.ActiveCryptocurrencies ||
                    this.ActiveCryptocurrencies.Equals(input.ActiveCryptocurrencies)
                ) && 
                (
                    this.TotalCryptocurrencies == input.TotalCryptocurrencies ||
                    this.TotalCryptocurrencies.Equals(input.TotalCryptocurrencies)
                ) && 
                (
                    this.ActiveMarketPairs == input.ActiveMarketPairs ||
                    this.ActiveMarketPairs.Equals(input.ActiveMarketPairs)
                ) && 
                (
                    this.ActiveExchanges == input.ActiveExchanges ||
                    this.ActiveExchanges.Equals(input.ActiveExchanges)
                ) && 
                (
                    this.TotalExchanges == input.TotalExchanges ||
                    this.TotalExchanges.Equals(input.TotalExchanges)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BtcDominance.GetHashCode();
                hashCode = (hashCode * 59) + this.EthDominance.GetHashCode();
                hashCode = (hashCode * 59) + this.ActiveCryptocurrencies.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCryptocurrencies.GetHashCode();
                hashCode = (hashCode * 59) + this.ActiveMarketPairs.GetHashCode();
                hashCode = (hashCode * 59) + this.ActiveExchanges.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalExchanges.GetHashCode();
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.Quote != null)
                {
                    hashCode = (hashCode * 59) + this.Quote.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
