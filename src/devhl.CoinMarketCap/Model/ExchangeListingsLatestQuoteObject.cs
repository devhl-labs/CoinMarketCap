/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// A market quote in the currency conversion option.
    /// </summary>
    [DataContract(Name = "Exchange Listings Latest - Quote object")]
    public partial class ExchangeListingsLatestQuoteObject : IEquatable<ExchangeListingsLatestQuoteObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeListingsLatestQuoteObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExchangeListingsLatestQuoteObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeListingsLatestQuoteObject" /> class.
        /// </summary>
        /// <param name="lastUpdated">Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced for this conversion. (required).</param>
        /// <param name="volume24h">Reported 24 hour volume in the specified currency. (required).</param>
        /// <param name="volume24hAdjusted">Adjusted 24 hour volume in the specified currency for spot markets excluding markets with no fees and transaction mining. (required).</param>
        /// <param name="volume7d">7 day volume in the specified currency. (required).</param>
        /// <param name="volume30d">30 day volume in the specified currency. (required).</param>
        /// <param name="percentChangeVolume24h">24 hour volume change percentage in the specified currency. (required).</param>
        /// <param name="percentChangeVolume7d">7 day volume change percentage in the specified currency. (required).</param>
        /// <param name="percentChangeVolume30d">30 day volume change percentage in the specified currency. (required).</param>
        /// <param name="effectiveLiquidity24h">24 hour liquidity in the specified currency..</param>
        /// <param name="derivativeVolume">Reported 24 hour derivative volume in the specified currency..</param>
        /// <param name="openInterest">Reported 24 hour derivative open interest in the specified currency..</param>
        /// <param name="spotVolumeUsd">Reported all time spot volume in the specified currency..</param>
        public ExchangeListingsLatestQuoteObject(DateTime lastUpdated = default(DateTime), decimal volume24h = default(decimal), decimal volume24hAdjusted = default(decimal), decimal volume7d = default(decimal), decimal volume30d = default(decimal), decimal percentChangeVolume24h = default(decimal), decimal percentChangeVolume7d = default(decimal), decimal percentChangeVolume30d = default(decimal), decimal effectiveLiquidity24h = default(decimal), decimal derivativeVolume = default(decimal), decimal openInterest = default(decimal), decimal spotVolumeUsd = default(decimal))
        {
            this.LastUpdated = lastUpdated;
            this.Volume24h = volume24h;
            this.Volume24hAdjusted = volume24hAdjusted;
            this.Volume7d = volume7d;
            this.Volume30d = volume30d;
            this.PercentChangeVolume24h = percentChangeVolume24h;
            this.PercentChangeVolume7d = percentChangeVolume7d;
            this.PercentChangeVolume30d = percentChangeVolume30d;
            this.EffectiveLiquidity24h = effectiveLiquidity24h;
            this.DerivativeVolume = derivativeVolume;
            this.OpenInterest = openInterest;
            this.SpotVolumeUsd = spotVolumeUsd;
        }

        /// <summary>
        /// Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced for this conversion.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of when the conversion currency&#39;s current value was referenced for this conversion.</value>
        [DataMember(Name = "last_updated", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Reported 24 hour volume in the specified currency.
        /// </summary>
        /// <value>Reported 24 hour volume in the specified currency.</value>
        [DataMember(Name = "volume_24h", IsRequired = true, EmitDefaultValue = false)]
        public decimal Volume24h { get; set; }

        /// <summary>
        /// Adjusted 24 hour volume in the specified currency for spot markets excluding markets with no fees and transaction mining.
        /// </summary>
        /// <value>Adjusted 24 hour volume in the specified currency for spot markets excluding markets with no fees and transaction mining.</value>
        [DataMember(Name = "volume_24h_adjusted", IsRequired = true, EmitDefaultValue = false)]
        public decimal Volume24hAdjusted { get; set; }

        /// <summary>
        /// 7 day volume in the specified currency.
        /// </summary>
        /// <value>7 day volume in the specified currency.</value>
        [DataMember(Name = "volume_7d", IsRequired = true, EmitDefaultValue = false)]
        public decimal Volume7d { get; set; }

        /// <summary>
        /// 30 day volume in the specified currency.
        /// </summary>
        /// <value>30 day volume in the specified currency.</value>
        [DataMember(Name = "volume_30d", IsRequired = true, EmitDefaultValue = false)]
        public decimal Volume30d { get; set; }

        /// <summary>
        /// 24 hour volume change percentage in the specified currency.
        /// </summary>
        /// <value>24 hour volume change percentage in the specified currency.</value>
        [DataMember(Name = "percent_change_volume_24h", IsRequired = true, EmitDefaultValue = false)]
        public decimal PercentChangeVolume24h { get; set; }

        /// <summary>
        /// 7 day volume change percentage in the specified currency.
        /// </summary>
        /// <value>7 day volume change percentage in the specified currency.</value>
        [DataMember(Name = "percent_change_volume_7d", IsRequired = true, EmitDefaultValue = false)]
        public decimal PercentChangeVolume7d { get; set; }

        /// <summary>
        /// 30 day volume change percentage in the specified currency.
        /// </summary>
        /// <value>30 day volume change percentage in the specified currency.</value>
        [DataMember(Name = "percent_change_volume_30d", IsRequired = true, EmitDefaultValue = false)]
        public decimal PercentChangeVolume30d { get; set; }

        /// <summary>
        /// 24 hour liquidity in the specified currency.
        /// </summary>
        /// <value>24 hour liquidity in the specified currency.</value>
        [DataMember(Name = "effective_liquidity_24h", EmitDefaultValue = false)]
        public decimal EffectiveLiquidity24h { get; set; }

        /// <summary>
        /// Reported 24 hour derivative volume in the specified currency.
        /// </summary>
        /// <value>Reported 24 hour derivative volume in the specified currency.</value>
        [DataMember(Name = "derivative_volume", EmitDefaultValue = false)]
        public decimal DerivativeVolume { get; set; }

        /// <summary>
        /// Reported 24 hour derivative open interest in the specified currency.
        /// </summary>
        /// <value>Reported 24 hour derivative open interest in the specified currency.</value>
        [DataMember(Name = "open_interest", EmitDefaultValue = false)]
        public decimal OpenInterest { get; set; }

        /// <summary>
        /// Reported all time spot volume in the specified currency.
        /// </summary>
        /// <value>Reported all time spot volume in the specified currency.</value>
        [DataMember(Name = "spot_volume_usd", EmitDefaultValue = false)]
        public decimal SpotVolumeUsd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExchangeListingsLatestQuoteObject {\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Volume24h: ").Append(Volume24h).Append("\n");
            sb.Append("  Volume24hAdjusted: ").Append(Volume24hAdjusted).Append("\n");
            sb.Append("  Volume7d: ").Append(Volume7d).Append("\n");
            sb.Append("  Volume30d: ").Append(Volume30d).Append("\n");
            sb.Append("  PercentChangeVolume24h: ").Append(PercentChangeVolume24h).Append("\n");
            sb.Append("  PercentChangeVolume7d: ").Append(PercentChangeVolume7d).Append("\n");
            sb.Append("  PercentChangeVolume30d: ").Append(PercentChangeVolume30d).Append("\n");
            sb.Append("  EffectiveLiquidity24h: ").Append(EffectiveLiquidity24h).Append("\n");
            sb.Append("  DerivativeVolume: ").Append(DerivativeVolume).Append("\n");
            sb.Append("  OpenInterest: ").Append(OpenInterest).Append("\n");
            sb.Append("  SpotVolumeUsd: ").Append(SpotVolumeUsd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeListingsLatestQuoteObject);
        }

        /// <summary>
        /// Returns true if ExchangeListingsLatestQuoteObject instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeListingsLatestQuoteObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeListingsLatestQuoteObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Volume24h == input.Volume24h ||
                    this.Volume24h.Equals(input.Volume24h)
                ) && 
                (
                    this.Volume24hAdjusted == input.Volume24hAdjusted ||
                    this.Volume24hAdjusted.Equals(input.Volume24hAdjusted)
                ) && 
                (
                    this.Volume7d == input.Volume7d ||
                    this.Volume7d.Equals(input.Volume7d)
                ) && 
                (
                    this.Volume30d == input.Volume30d ||
                    this.Volume30d.Equals(input.Volume30d)
                ) && 
                (
                    this.PercentChangeVolume24h == input.PercentChangeVolume24h ||
                    this.PercentChangeVolume24h.Equals(input.PercentChangeVolume24h)
                ) && 
                (
                    this.PercentChangeVolume7d == input.PercentChangeVolume7d ||
                    this.PercentChangeVolume7d.Equals(input.PercentChangeVolume7d)
                ) && 
                (
                    this.PercentChangeVolume30d == input.PercentChangeVolume30d ||
                    this.PercentChangeVolume30d.Equals(input.PercentChangeVolume30d)
                ) && 
                (
                    this.EffectiveLiquidity24h == input.EffectiveLiquidity24h ||
                    this.EffectiveLiquidity24h.Equals(input.EffectiveLiquidity24h)
                ) && 
                (
                    this.DerivativeVolume == input.DerivativeVolume ||
                    this.DerivativeVolume.Equals(input.DerivativeVolume)
                ) && 
                (
                    this.OpenInterest == input.OpenInterest ||
                    this.OpenInterest.Equals(input.OpenInterest)
                ) && 
                (
                    this.SpotVolumeUsd == input.SpotVolumeUsd ||
                    this.SpotVolumeUsd.Equals(input.SpotVolumeUsd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                hashCode = hashCode * 59 + this.Volume24h.GetHashCode();
                hashCode = hashCode * 59 + this.Volume24hAdjusted.GetHashCode();
                hashCode = hashCode * 59 + this.Volume7d.GetHashCode();
                hashCode = hashCode * 59 + this.Volume30d.GetHashCode();
                hashCode = hashCode * 59 + this.PercentChangeVolume24h.GetHashCode();
                hashCode = hashCode * 59 + this.PercentChangeVolume7d.GetHashCode();
                hashCode = hashCode * 59 + this.PercentChangeVolume30d.GetHashCode();
                hashCode = hashCode * 59 + this.EffectiveLiquidity24h.GetHashCode();
                hashCode = hashCode * 59 + this.DerivativeVolume.GetHashCode();
                hashCode = hashCode * 59 + this.OpenInterest.GetHashCode();
                hashCode = hashCode * 59 + this.SpotVolumeUsd.GetHashCode();
                return hashCode;
            }
        }

    }

}
