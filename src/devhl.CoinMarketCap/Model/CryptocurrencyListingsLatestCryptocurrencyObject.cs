/*
 * CoinMarketCap Cryptocurrency API Documentation
 *
 * # Introduction The CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.  This API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the [CoinMarketCap API FAQ](https://coinmarketcap.com/api/faq).  # Quick Start Guide  For developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.  1. **Sign up for a free Developer Portal account.** You can sign up at [pro.coinmarketcap.com](https://pro.coinmarketcap.com) - This is our live production environment with the latest market data. Select the free `Basic` plan if it meets your needs or upgrade to a paid tier. 2. **Copy your API Key.** Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the `API Key` box in the top left panel. 3. **Make a test call using your key.** You may use the code examples provided below to make a test call with your programming language of choice. This example [fetches all active cryptocurrencies by market cap and return market values in USD](https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest?start=1&limit=5000&convert=USD).     *Be sure to replace the API Key in sample code with your own and use API domain `pro-api.coinmarketcap.com` or use the test API Key `b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c` for `sandbox-api.coinmarketcap.com` testing with our sandbox.coinmarketcap.com environment. Please note that our sandbox api has mock data and should not be used in your application.*
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@coinmarketcap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = devhl.CoinMarketCap.Client.OpenAPIDateConverter;

namespace devhl.CoinMarketCap.Model
{
    /// <summary>
    /// A cryptocurrency object for every cryptocurrency that matched list options.
    /// </summary>
    [DataContract(Name = "Cryptocurrency Listings Latest - Cryptocurrency object")]
    public partial class CryptocurrencyListingsLatestCryptocurrencyObject : IEquatable<CryptocurrencyListingsLatestCryptocurrencyObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrencyListingsLatestCryptocurrencyObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptocurrencyListingsLatestCryptocurrencyObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptocurrencyListingsLatestCryptocurrencyObject" /> class.
        /// </summary>
        /// <param name="id">The unique CoinMarketCap ID for this cryptocurrency. (required).</param>
        /// <param name="name">The name of this cryptocurrency. (required).</param>
        /// <param name="symbol">The ticker symbol for this cryptocurrency. (required).</param>
        /// <param name="slug">The web URL friendly shorthand version of this cryptocurrency name. (required).</param>
        /// <param name="cmcRank">The cryptocurrency&#39;s historic CoinMarketCap rank at the end of the requested UTC day. (required).</param>
        /// <param name="numMarketPairs">The number of active trading pairs available for this cryptocurrency across supported exchanges..</param>
        /// <param name="circulatingSupply">The approximate number of coins circulating for this cryptocurrency at the end of the requested UTC day. (required).</param>
        /// <param name="totalSupply">The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned) at the end of the requested UTC day. (required).</param>
        /// <param name="maxSupply">The expected maximum limit of coins ever to be available for this cryptocurrency. (required).</param>
        /// <param name="lastUpdated">Timestamp (ISO 8601) of when this cryptocurrency&#39;s market data was referenced for this UTC date snapshot. This is always the last update available during the UTC date requested. (required).</param>
        /// <param name="dateAdded">Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap. (required).</param>
        /// <param name="tags">Array of tags associated with this cryptocurrency. Currently only a mineable tag will be returned if the cryptocurrency is mineable. Additional tags will be returned in the future. (required).</param>
        /// <param name="platform">platform (required).</param>
        /// <param name="quote">quote (required).</param>
        public CryptocurrencyListingsLatestCryptocurrencyObject(int id = default(int), string name = default(string), string symbol = default(string), string slug = default(string), int cmcRank = default(int), int numMarketPairs = default(int), decimal circulatingSupply = default(decimal), decimal totalSupply = default(decimal), decimal maxSupply = default(decimal), DateTime lastUpdated = default(DateTime), DateTime dateAdded = default(DateTime), List<string> tags = default(List<string>), Platform platform = default(Platform), CryptocurrencyListingsLatestQuoteMap quote = default(CryptocurrencyListingsLatestQuoteMap))
        {
            this.Id = id;
            this.Name = name;
            this.Symbol = symbol;
            this.Slug = slug;
            this.CmcRank = cmcRank;
            this.CirculatingSupply = circulatingSupply;
            this.TotalSupply = totalSupply;
            this.MaxSupply = maxSupply;
            this.LastUpdated = lastUpdated;
            this.DateAdded = dateAdded;
            // to ensure "tags" is required (not null)
            if (tags == null) {
                throw new ArgumentNullException("tags is a required property for CryptocurrencyListingsLatestCryptocurrencyObject and cannot be null");
            }
            this.Tags = tags;
            // to ensure "platform" is required (not null)
            if (platform == null) {
                throw new ArgumentNullException("platform is a required property for CryptocurrencyListingsLatestCryptocurrencyObject and cannot be null");
            }
            this.Platform = platform;
            // to ensure "quote" is required (not null)
            if (quote == null) {
                throw new ArgumentNullException("quote is a required property for CryptocurrencyListingsLatestCryptocurrencyObject and cannot be null");
            }
            this.Quote = quote;
            this.NumMarketPairs = numMarketPairs;
        }

        /// <summary>
        /// The unique CoinMarketCap ID for this cryptocurrency.
        /// </summary>
        /// <value>The unique CoinMarketCap ID for this cryptocurrency.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The name of this cryptocurrency.
        /// </summary>
        /// <value>The name of this cryptocurrency.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The ticker symbol for this cryptocurrency.
        /// </summary>
        /// <value>The ticker symbol for this cryptocurrency.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// The web URL friendly shorthand version of this cryptocurrency name.
        /// </summary>
        /// <value>The web URL friendly shorthand version of this cryptocurrency name.</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// The cryptocurrency&#39;s historic CoinMarketCap rank at the end of the requested UTC day.
        /// </summary>
        /// <value>The cryptocurrency&#39;s historic CoinMarketCap rank at the end of the requested UTC day.</value>
        [DataMember(Name = "cmc_rank", IsRequired = true, EmitDefaultValue = false)]
        public int CmcRank { get; set; }

        /// <summary>
        /// The number of active trading pairs available for this cryptocurrency across supported exchanges.
        /// </summary>
        /// <value>The number of active trading pairs available for this cryptocurrency across supported exchanges.</value>
        [DataMember(Name = "num_market_pairs", EmitDefaultValue = false)]
        public int NumMarketPairs { get; set; }

        /// <summary>
        /// The approximate number of coins circulating for this cryptocurrency at the end of the requested UTC day.
        /// </summary>
        /// <value>The approximate number of coins circulating for this cryptocurrency at the end of the requested UTC day.</value>
        [DataMember(Name = "circulating_supply", IsRequired = true, EmitDefaultValue = false)]
        public decimal CirculatingSupply { get; set; }

        /// <summary>
        /// The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned) at the end of the requested UTC day.
        /// </summary>
        /// <value>The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned) at the end of the requested UTC day.</value>
        [DataMember(Name = "total_supply", IsRequired = true, EmitDefaultValue = false)]
        public decimal TotalSupply { get; set; }

        /// <summary>
        /// The expected maximum limit of coins ever to be available for this cryptocurrency.
        /// </summary>
        /// <value>The expected maximum limit of coins ever to be available for this cryptocurrency.</value>
        [DataMember(Name = "max_supply", IsRequired = true, EmitDefaultValue = false)]
        public decimal MaxSupply { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of when this cryptocurrency&#39;s market data was referenced for this UTC date snapshot. This is always the last update available during the UTC date requested.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of when this cryptocurrency&#39;s market data was referenced for this UTC date snapshot. This is always the last update available during the UTC date requested.</value>
        [DataMember(Name = "last_updated", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.
        /// </summary>
        /// <value>Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.</value>
        [DataMember(Name = "date_added", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateAdded { get; set; }

        /// <summary>
        /// Array of tags associated with this cryptocurrency. Currently only a mineable tag will be returned if the cryptocurrency is mineable. Additional tags will be returned in the future.
        /// </summary>
        /// <value>Array of tags associated with this cryptocurrency. Currently only a mineable tag will be returned if the cryptocurrency is mineable. Additional tags will be returned in the future.</value>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = false)]
        public Platform Platform { get; set; }

        /// <summary>
        /// Gets or Sets Quote
        /// </summary>
        [DataMember(Name = "quote", IsRequired = true, EmitDefaultValue = false)]
        public CryptocurrencyListingsLatestQuoteMap Quote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptocurrencyListingsLatestCryptocurrencyObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  CmcRank: ").Append(CmcRank).Append("\n");
            sb.Append("  NumMarketPairs: ").Append(NumMarketPairs).Append("\n");
            sb.Append("  CirculatingSupply: ").Append(CirculatingSupply).Append("\n");
            sb.Append("  TotalSupply: ").Append(TotalSupply).Append("\n");
            sb.Append("  MaxSupply: ").Append(MaxSupply).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptocurrencyListingsLatestCryptocurrencyObject);
        }

        /// <summary>
        /// Returns true if CryptocurrencyListingsLatestCryptocurrencyObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptocurrencyListingsLatestCryptocurrencyObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptocurrencyListingsLatestCryptocurrencyObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.CmcRank == input.CmcRank ||
                    this.CmcRank.Equals(input.CmcRank)
                ) && 
                (
                    this.NumMarketPairs == input.NumMarketPairs ||
                    this.NumMarketPairs.Equals(input.NumMarketPairs)
                ) && 
                (
                    this.CirculatingSupply == input.CirculatingSupply ||
                    this.CirculatingSupply.Equals(input.CirculatingSupply)
                ) && 
                (
                    this.TotalSupply == input.TotalSupply ||
                    this.TotalSupply.Equals(input.TotalSupply)
                ) && 
                (
                    this.MaxSupply == input.MaxSupply ||
                    this.MaxSupply.Equals(input.MaxSupply)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.DateAdded == input.DateAdded ||
                    (this.DateAdded != null &&
                    this.DateAdded.Equals(input.DateAdded))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                hashCode = hashCode * 59 + this.CmcRank.GetHashCode();
                hashCode = hashCode * 59 + this.NumMarketPairs.GetHashCode();
                hashCode = hashCode * 59 + this.CirculatingSupply.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSupply.GetHashCode();
                hashCode = hashCode * 59 + this.MaxSupply.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.DateAdded != null)
                    hashCode = hashCode * 59 + this.DateAdded.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                return hashCode;
            }
        }

    }

}
